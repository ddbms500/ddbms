// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/ddbms.proto

#ifndef PROTOBUF_proto_2fddbms_2eproto__INCLUDED
#define PROTOBUF_proto_2fddbms_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace whiteBear {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fddbms_2eproto();
void protobuf_AssignDesc_proto_2fddbms_2eproto();
void protobuf_ShutdownFile_proto_2fddbms_2eproto();

class Column;
class DeleteTempTableRequest;
class DeleteTempTableResponse;
class LoadTableRequest;
class LoadTableResponse;
class NonResultsSQLRequest;
class NonResultsSQLResponse;
class Predicate;
class QueryNode;
class QueryTempTableRequest;
class QueryTempTableResponse;
class QueryTreeRequest;
class QueryTreeResponse;
class ResultsSQLRequest;
class ResultsSQLResponse;
class SelectSQLRequest;
class SelectSQLResponse;

enum Predicate_OperationType {
  Predicate_OperationType_JOIN = 0,
  Predicate_OperationType_EQUAL = 1,
  Predicate_OperationType_LESS = 2,
  Predicate_OperationType_LESS_EQUAL = 3,
  Predicate_OperationType_GREAT = 4,
  Predicate_OperationType_GREAT_EQUAL = 5,
  Predicate_OperationType_DEFAULT = 6
};
bool Predicate_OperationType_IsValid(int value);
const Predicate_OperationType Predicate_OperationType_OperationType_MIN = Predicate_OperationType_JOIN;
const Predicate_OperationType Predicate_OperationType_OperationType_MAX = Predicate_OperationType_DEFAULT;
const int Predicate_OperationType_OperationType_ARRAYSIZE = Predicate_OperationType_OperationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Predicate_OperationType_descriptor();
inline const ::std::string& Predicate_OperationType_Name(Predicate_OperationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Predicate_OperationType_descriptor(), value);
}
inline bool Predicate_OperationType_Parse(
    const ::std::string& name, Predicate_OperationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Predicate_OperationType>(
    Predicate_OperationType_descriptor(), name, value);
}
enum QueryNode_NodeType {
  QueryNode_NodeType_PROJECTION = 0,
  QueryNode_NodeType_SELECTION = 1,
  QueryNode_NodeType_JOIN = 2,
  QueryNode_NodeType_UNION = 3,
  QueryNode_NodeType_DEFAULT = 4
};
bool QueryNode_NodeType_IsValid(int value);
const QueryNode_NodeType QueryNode_NodeType_NodeType_MIN = QueryNode_NodeType_PROJECTION;
const QueryNode_NodeType QueryNode_NodeType_NodeType_MAX = QueryNode_NodeType_DEFAULT;
const int QueryNode_NodeType_NodeType_ARRAYSIZE = QueryNode_NodeType_NodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* QueryNode_NodeType_descriptor();
inline const ::std::string& QueryNode_NodeType_Name(QueryNode_NodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    QueryNode_NodeType_descriptor(), value);
}
inline bool QueryNode_NodeType_Parse(
    const ::std::string& name, QueryNode_NodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QueryNode_NodeType>(
    QueryNode_NodeType_descriptor(), name, value);
}
enum Column_AttributeType {
  Column_AttributeType_BOOL = 0,
  Column_AttributeType_INT = 1,
  Column_AttributeType_STRING = 2,
  Column_AttributeType_FLOAT = 3,
  Column_AttributeType_DOUBLE = 4
};
bool Column_AttributeType_IsValid(int value);
const Column_AttributeType Column_AttributeType_AttributeType_MIN = Column_AttributeType_BOOL;
const Column_AttributeType Column_AttributeType_AttributeType_MAX = Column_AttributeType_DOUBLE;
const int Column_AttributeType_AttributeType_ARRAYSIZE = Column_AttributeType_AttributeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Column_AttributeType_descriptor();
inline const ::std::string& Column_AttributeType_Name(Column_AttributeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Column_AttributeType_descriptor(), value);
}
inline bool Column_AttributeType_Parse(
    const ::std::string& name, Column_AttributeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Column_AttributeType>(
    Column_AttributeType_descriptor(), name, value);
}
// ===================================================================

class Predicate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:whiteBear.Predicate) */ {
 public:
  Predicate();
  virtual ~Predicate();

  Predicate(const Predicate& from);

  inline Predicate& operator=(const Predicate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Predicate& default_instance();

  void Swap(Predicate* other);

  // implements Message ----------------------------------------------

  inline Predicate* New() const { return New(NULL); }

  Predicate* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Predicate& from);
  void MergeFrom(const Predicate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Predicate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Predicate_OperationType OperationType;
  static const OperationType JOIN =
    Predicate_OperationType_JOIN;
  static const OperationType EQUAL =
    Predicate_OperationType_EQUAL;
  static const OperationType LESS =
    Predicate_OperationType_LESS;
  static const OperationType LESS_EQUAL =
    Predicate_OperationType_LESS_EQUAL;
  static const OperationType GREAT =
    Predicate_OperationType_GREAT;
  static const OperationType GREAT_EQUAL =
    Predicate_OperationType_GREAT_EQUAL;
  static const OperationType DEFAULT =
    Predicate_OperationType_DEFAULT;
  static inline bool OperationType_IsValid(int value) {
    return Predicate_OperationType_IsValid(value);
  }
  static const OperationType OperationType_MIN =
    Predicate_OperationType_OperationType_MIN;
  static const OperationType OperationType_MAX =
    Predicate_OperationType_OperationType_MAX;
  static const int OperationType_ARRAYSIZE =
    Predicate_OperationType_OperationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OperationType_descriptor() {
    return Predicate_OperationType_descriptor();
  }
  static inline const ::std::string& OperationType_Name(OperationType value) {
    return Predicate_OperationType_Name(value);
  }
  static inline bool OperationType_Parse(const ::std::string& name,
      OperationType* value) {
    return Predicate_OperationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string attribute_name_ = 1;
  bool has_attribute_name_() const;
  void clear_attribute_name_();
  static const int kAttributeNameFieldNumber = 1;
  const ::std::string& attribute_name_() const;
  void set_attribute_name_(const ::std::string& value);
  void set_attribute_name_(const char* value);
  void set_attribute_name_(const char* value, size_t size);
  ::std::string* mutable_attribute_name_();
  ::std::string* release_attribute_name_();
  void set_allocated_attribute_name_(::std::string* attribute_name_);

  // required string table_name_ = 2;
  bool has_table_name_() const;
  void clear_table_name_();
  static const int kTableNameFieldNumber = 2;
  const ::std::string& table_name_() const;
  void set_table_name_(const ::std::string& value);
  void set_table_name_(const char* value);
  void set_table_name_(const char* value, size_t size);
  ::std::string* mutable_table_name_();
  ::std::string* release_table_name_();
  void set_allocated_table_name_(::std::string* table_name_);

  // required .whiteBear.Predicate.OperationType operation_type_ = 3;
  bool has_operation_type_() const;
  void clear_operation_type_();
  static const int kOperationTypeFieldNumber = 3;
  ::whiteBear::Predicate_OperationType operation_type_() const;
  void set_operation_type_(::whiteBear::Predicate_OperationType value);

  // required .whiteBear.Predicate.OperationType left_operation_type_ = 4;
  bool has_left_operation_type_() const;
  void clear_left_operation_type_();
  static const int kLeftOperationTypeFieldNumber = 4;
  ::whiteBear::Predicate_OperationType left_operation_type_() const;
  void set_left_operation_type_(::whiteBear::Predicate_OperationType value);

  // required string right_value_ = 5;
  bool has_right_value_() const;
  void clear_right_value_();
  static const int kRightValueFieldNumber = 5;
  const ::std::string& right_value_() const;
  void set_right_value_(const ::std::string& value);
  void set_right_value_(const char* value);
  void set_right_value_(const char* value, size_t size);
  ::std::string* mutable_right_value_();
  ::std::string* release_right_value_();
  void set_allocated_right_value_(::std::string* right_value_);

  // optional string left_value_ = 6;
  bool has_left_value_() const;
  void clear_left_value_();
  static const int kLeftValueFieldNumber = 6;
  const ::std::string& left_value_() const;
  void set_left_value_(const ::std::string& value);
  void set_left_value_(const char* value);
  void set_left_value_(const char* value, size_t size);
  ::std::string* mutable_left_value_();
  ::std::string* release_left_value_();
  void set_allocated_left_value_(::std::string* left_value_);

  // optional string right_attribute_name_ = 7;
  bool has_right_attribute_name_() const;
  void clear_right_attribute_name_();
  static const int kRightAttributeNameFieldNumber = 7;
  const ::std::string& right_attribute_name_() const;
  void set_right_attribute_name_(const ::std::string& value);
  void set_right_attribute_name_(const char* value);
  void set_right_attribute_name_(const char* value, size_t size);
  ::std::string* mutable_right_attribute_name_();
  ::std::string* release_right_attribute_name_();
  void set_allocated_right_attribute_name_(::std::string* right_attribute_name_);

  // optional string right_table_name_ = 8;
  bool has_right_table_name_() const;
  void clear_right_table_name_();
  static const int kRightTableNameFieldNumber = 8;
  const ::std::string& right_table_name_() const;
  void set_right_table_name_(const ::std::string& value);
  void set_right_table_name_(const char* value);
  void set_right_table_name_(const char* value, size_t size);
  ::std::string* mutable_right_table_name_();
  ::std::string* release_right_table_name_();
  void set_allocated_right_table_name_(::std::string* right_table_name_);

  // @@protoc_insertion_point(class_scope:whiteBear.Predicate)
 private:
  inline void set_has_attribute_name_();
  inline void clear_has_attribute_name_();
  inline void set_has_table_name_();
  inline void clear_has_table_name_();
  inline void set_has_operation_type_();
  inline void clear_has_operation_type_();
  inline void set_has_left_operation_type_();
  inline void clear_has_left_operation_type_();
  inline void set_has_right_value_();
  inline void clear_has_right_value_();
  inline void set_has_left_value_();
  inline void clear_has_left_value_();
  inline void set_has_right_attribute_name_();
  inline void clear_has_right_attribute_name_();
  inline void set_has_right_table_name_();
  inline void clear_has_right_table_name_();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr attribute_name__;
  ::google::protobuf::internal::ArenaStringPtr table_name__;
  int operation_type__;
  int left_operation_type__;
  ::google::protobuf::internal::ArenaStringPtr right_value__;
  ::google::protobuf::internal::ArenaStringPtr left_value__;
  ::google::protobuf::internal::ArenaStringPtr right_attribute_name__;
  ::google::protobuf::internal::ArenaStringPtr right_table_name__;
  friend void  protobuf_AddDesc_proto_2fddbms_2eproto();
  friend void protobuf_AssignDesc_proto_2fddbms_2eproto();
  friend void protobuf_ShutdownFile_proto_2fddbms_2eproto();

  void InitAsDefaultInstance();
  static Predicate* default_instance_;
};
// -------------------------------------------------------------------

class QueryNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:whiteBear.QueryNode) */ {
 public:
  QueryNode();
  virtual ~QueryNode();

  QueryNode(const QueryNode& from);

  inline QueryNode& operator=(const QueryNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryNode& default_instance();

  void Swap(QueryNode* other);

  // implements Message ----------------------------------------------

  inline QueryNode* New() const { return New(NULL); }

  QueryNode* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryNode& from);
  void MergeFrom(const QueryNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef QueryNode_NodeType NodeType;
  static const NodeType PROJECTION =
    QueryNode_NodeType_PROJECTION;
  static const NodeType SELECTION =
    QueryNode_NodeType_SELECTION;
  static const NodeType JOIN =
    QueryNode_NodeType_JOIN;
  static const NodeType UNION =
    QueryNode_NodeType_UNION;
  static const NodeType DEFAULT =
    QueryNode_NodeType_DEFAULT;
  static inline bool NodeType_IsValid(int value) {
    return QueryNode_NodeType_IsValid(value);
  }
  static const NodeType NodeType_MIN =
    QueryNode_NodeType_NodeType_MIN;
  static const NodeType NodeType_MAX =
    QueryNode_NodeType_NodeType_MAX;
  static const int NodeType_ARRAYSIZE =
    QueryNode_NodeType_NodeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NodeType_descriptor() {
    return QueryNode_NodeType_descriptor();
  }
  static inline const ::std::string& NodeType_Name(NodeType value) {
    return QueryNode_NodeType_Name(value);
  }
  static inline bool NodeType_Parse(const ::std::string& name,
      NodeType* value) {
    return QueryNode_NodeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .whiteBear.QueryNode.NodeType node_type_ = 1;
  bool has_node_type_() const;
  void clear_node_type_();
  static const int kNodeTypeFieldNumber = 1;
  ::whiteBear::QueryNode_NodeType node_type_() const;
  void set_node_type_(::whiteBear::QueryNode_NodeType value);

  // required string site_ = 2;
  bool has_site_() const;
  void clear_site_();
  static const int kSiteFieldNumber = 2;
  const ::std::string& site_() const;
  void set_site_(const ::std::string& value);
  void set_site_(const char* value);
  void set_site_(const char* value, size_t size);
  ::std::string* mutable_site_();
  ::std::string* release_site_();
  void set_allocated_site_(::std::string* site_);

  // required string table_name_ = 3;
  bool has_table_name_() const;
  void clear_table_name_();
  static const int kTableNameFieldNumber = 3;
  const ::std::string& table_name_() const;
  void set_table_name_(const ::std::string& value);
  void set_table_name_(const char* value);
  void set_table_name_(const char* value, size_t size);
  ::std::string* mutable_table_name_();
  ::std::string* release_table_name_();
  void set_allocated_table_name_(::std::string* table_name_);

  // repeated string attr_name_ = 4;
  int attr_name__size() const;
  void clear_attr_name_();
  static const int kAttrNameFieldNumber = 4;
  const ::std::string& attr_name_(int index) const;
  ::std::string* mutable_attr_name_(int index);
  void set_attr_name_(int index, const ::std::string& value);
  void set_attr_name_(int index, const char* value);
  void set_attr_name_(int index, const char* value, size_t size);
  ::std::string* add_attr_name_();
  void add_attr_name_(const ::std::string& value);
  void add_attr_name_(const char* value);
  void add_attr_name_(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& attr_name_() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attr_name_();

  // repeated .whiteBear.Predicate select_predicates_ = 5;
  int select_predicates__size() const;
  void clear_select_predicates_();
  static const int kSelectPredicatesFieldNumber = 5;
  const ::whiteBear::Predicate& select_predicates_(int index) const;
  ::whiteBear::Predicate* mutable_select_predicates_(int index);
  ::whiteBear::Predicate* add_select_predicates_();
  ::google::protobuf::RepeatedPtrField< ::whiteBear::Predicate >*
      mutable_select_predicates_();
  const ::google::protobuf::RepeatedPtrField< ::whiteBear::Predicate >&
      select_predicates_() const;

  // repeated .whiteBear.Predicate join_predicate_ = 6;
  int join_predicate__size() const;
  void clear_join_predicate_();
  static const int kJoinPredicateFieldNumber = 6;
  const ::whiteBear::Predicate& join_predicate_(int index) const;
  ::whiteBear::Predicate* mutable_join_predicate_(int index);
  ::whiteBear::Predicate* add_join_predicate_();
  ::google::protobuf::RepeatedPtrField< ::whiteBear::Predicate >*
      mutable_join_predicate_();
  const ::google::protobuf::RepeatedPtrField< ::whiteBear::Predicate >&
      join_predicate_() const;

  // required int32 parent_ = 7;
  bool has_parent_() const;
  void clear_parent_();
  static const int kParentFieldNumber = 7;
  ::google::protobuf::int32 parent_() const;
  void set_parent_(::google::protobuf::int32 value);

  // repeated int32 sons_ = 8;
  int sons__size() const;
  void clear_sons_();
  static const int kSonsFieldNumber = 8;
  ::google::protobuf::int32 sons_(int index) const;
  void set_sons_(int index, ::google::protobuf::int32 value);
  void add_sons_(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      sons_() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_sons_();

  // required bool is_parent_ = 9 [default = false];
  bool has_is_parent_() const;
  void clear_is_parent_();
  static const int kIsParentFieldNumber = 9;
  bool is_parent_() const;
  void set_is_parent_(bool value);

  // required bool is_leaf_ = 10 [default = false];
  bool has_is_leaf_() const;
  void clear_is_leaf_();
  static const int kIsLeafFieldNumber = 10;
  bool is_leaf_() const;
  void set_is_leaf_(bool value);

  // @@protoc_insertion_point(class_scope:whiteBear.QueryNode)
 private:
  inline void set_has_node_type_();
  inline void clear_has_node_type_();
  inline void set_has_site_();
  inline void clear_has_site_();
  inline void set_has_table_name_();
  inline void clear_has_table_name_();
  inline void set_has_parent_();
  inline void clear_has_parent_();
  inline void set_has_is_parent_();
  inline void clear_has_is_parent_();
  inline void set_has_is_leaf_();
  inline void clear_has_is_leaf_();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr site__;
  ::google::protobuf::internal::ArenaStringPtr table_name__;
  ::google::protobuf::RepeatedPtrField< ::std::string> attr_name__;
  int node_type__;
  ::google::protobuf::int32 parent__;
  ::google::protobuf::RepeatedPtrField< ::whiteBear::Predicate > select_predicates__;
  ::google::protobuf::RepeatedPtrField< ::whiteBear::Predicate > join_predicate__;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > sons__;
  bool is_parent__;
  bool is_leaf__;
  friend void  protobuf_AddDesc_proto_2fddbms_2eproto();
  friend void protobuf_AssignDesc_proto_2fddbms_2eproto();
  friend void protobuf_ShutdownFile_proto_2fddbms_2eproto();

  void InitAsDefaultInstance();
  static QueryNode* default_instance_;
};
// -------------------------------------------------------------------

class QueryTreeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:whiteBear.QueryTreeRequest) */ {
 public:
  QueryTreeRequest();
  virtual ~QueryTreeRequest();

  QueryTreeRequest(const QueryTreeRequest& from);

  inline QueryTreeRequest& operator=(const QueryTreeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryTreeRequest& default_instance();

  void Swap(QueryTreeRequest* other);

  // implements Message ----------------------------------------------

  inline QueryTreeRequest* New() const { return New(NULL); }

  QueryTreeRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryTreeRequest& from);
  void MergeFrom(const QueryTreeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryTreeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 n = 1 [default = 0];
  bool has_n() const;
  void clear_n();
  static const int kNFieldNumber = 1;
  ::google::protobuf::int32 n() const;
  void set_n(::google::protobuf::int32 value);

  // required int32 root_index = 2 [default = -1];
  bool has_root_index() const;
  void clear_root_index();
  static const int kRootIndexFieldNumber = 2;
  ::google::protobuf::int32 root_index() const;
  void set_root_index(::google::protobuf::int32 value);

  // repeated .whiteBear.QueryNode nodes = 3;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 3;
  const ::whiteBear::QueryNode& nodes(int index) const;
  ::whiteBear::QueryNode* mutable_nodes(int index);
  ::whiteBear::QueryNode* add_nodes();
  ::google::protobuf::RepeatedPtrField< ::whiteBear::QueryNode >*
      mutable_nodes();
  const ::google::protobuf::RepeatedPtrField< ::whiteBear::QueryNode >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:whiteBear.QueryTreeRequest)
 private:
  inline void set_has_n();
  inline void clear_has_n();
  inline void set_has_root_index();
  inline void clear_has_root_index();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 n_;
  ::google::protobuf::int32 root_index_;
  ::google::protobuf::RepeatedPtrField< ::whiteBear::QueryNode > nodes_;
  friend void  protobuf_AddDesc_proto_2fddbms_2eproto();
  friend void protobuf_AssignDesc_proto_2fddbms_2eproto();
  friend void protobuf_ShutdownFile_proto_2fddbms_2eproto();

  void InitAsDefaultInstance();
  static QueryTreeRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryTreeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:whiteBear.QueryTreeResponse) */ {
 public:
  QueryTreeResponse();
  virtual ~QueryTreeResponse();

  QueryTreeResponse(const QueryTreeResponse& from);

  inline QueryTreeResponse& operator=(const QueryTreeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryTreeResponse& default_instance();

  void Swap(QueryTreeResponse* other);

  // implements Message ----------------------------------------------

  inline QueryTreeResponse* New() const { return New(NULL); }

  QueryTreeResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryTreeResponse& from);
  void MergeFrom(const QueryTreeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryTreeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool success = 1 [default = true];
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // optional string errors = 2 [default = "NULL error message"];
  bool has_errors() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 2;
  const ::std::string& errors() const;
  void set_errors(const ::std::string& value);
  void set_errors(const char* value);
  void set_errors(const char* value, size_t size);
  ::std::string* mutable_errors();
  ::std::string* release_errors();
  void set_allocated_errors(::std::string* errors);

  // @@protoc_insertion_point(class_scope:whiteBear.QueryTreeResponse)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_errors();
  inline void clear_has_errors();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_errors_;
  ::google::protobuf::internal::ArenaStringPtr errors_;
  bool success_;
  friend void  protobuf_AddDesc_proto_2fddbms_2eproto();
  friend void protobuf_AssignDesc_proto_2fddbms_2eproto();
  friend void protobuf_ShutdownFile_proto_2fddbms_2eproto();

  void InitAsDefaultInstance();
  static QueryTreeResponse* default_instance_;
};
// -------------------------------------------------------------------

class Column : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:whiteBear.Column) */ {
 public:
  Column();
  virtual ~Column();

  Column(const Column& from);

  inline Column& operator=(const Column& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Column& default_instance();

  void Swap(Column* other);

  // implements Message ----------------------------------------------

  inline Column* New() const { return New(NULL); }

  Column* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Column& from);
  void MergeFrom(const Column& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Column* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Column_AttributeType AttributeType;
  static const AttributeType BOOL =
    Column_AttributeType_BOOL;
  static const AttributeType INT =
    Column_AttributeType_INT;
  static const AttributeType STRING =
    Column_AttributeType_STRING;
  static const AttributeType FLOAT =
    Column_AttributeType_FLOAT;
  static const AttributeType DOUBLE =
    Column_AttributeType_DOUBLE;
  static inline bool AttributeType_IsValid(int value) {
    return Column_AttributeType_IsValid(value);
  }
  static const AttributeType AttributeType_MIN =
    Column_AttributeType_AttributeType_MIN;
  static const AttributeType AttributeType_MAX =
    Column_AttributeType_AttributeType_MAX;
  static const int AttributeType_ARRAYSIZE =
    Column_AttributeType_AttributeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AttributeType_descriptor() {
    return Column_AttributeType_descriptor();
  }
  static inline const ::std::string& AttributeType_Name(AttributeType value) {
    return Column_AttributeType_Name(value);
  }
  static inline bool AttributeType_Parse(const ::std::string& name,
      AttributeType* value) {
    return Column_AttributeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string attr_meta = 1;
  bool has_attr_meta() const;
  void clear_attr_meta();
  static const int kAttrMetaFieldNumber = 1;
  const ::std::string& attr_meta() const;
  void set_attr_meta(const ::std::string& value);
  void set_attr_meta(const char* value);
  void set_attr_meta(const char* value, size_t size);
  ::std::string* mutable_attr_meta();
  ::std::string* release_attr_meta();
  void set_allocated_attr_meta(::std::string* attr_meta);

  // required .whiteBear.Column.AttributeType attr_type = 2;
  bool has_attr_type() const;
  void clear_attr_type();
  static const int kAttrTypeFieldNumber = 2;
  ::whiteBear::Column_AttributeType attr_type() const;
  void set_attr_type(::whiteBear::Column_AttributeType value);

  // repeated float attr_values_float = 3;
  int attr_values_float_size() const;
  void clear_attr_values_float();
  static const int kAttrValuesFloatFieldNumber = 3;
  float attr_values_float(int index) const;
  void set_attr_values_float(int index, float value);
  void add_attr_values_float(float value);
  const ::google::protobuf::RepeatedField< float >&
      attr_values_float() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_attr_values_float();

  // repeated double attr_values_double = 4;
  int attr_values_double_size() const;
  void clear_attr_values_double();
  static const int kAttrValuesDoubleFieldNumber = 4;
  double attr_values_double(int index) const;
  void set_attr_values_double(int index, double value);
  void add_attr_values_double(double value);
  const ::google::protobuf::RepeatedField< double >&
      attr_values_double() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_attr_values_double();

  // repeated bool attr_values_bool = 5;
  int attr_values_bool_size() const;
  void clear_attr_values_bool();
  static const int kAttrValuesBoolFieldNumber = 5;
  bool attr_values_bool(int index) const;
  void set_attr_values_bool(int index, bool value);
  void add_attr_values_bool(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      attr_values_bool() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_attr_values_bool();

  // repeated string attr_values_string = 6;
  int attr_values_string_size() const;
  void clear_attr_values_string();
  static const int kAttrValuesStringFieldNumber = 6;
  const ::std::string& attr_values_string(int index) const;
  ::std::string* mutable_attr_values_string(int index);
  void set_attr_values_string(int index, const ::std::string& value);
  void set_attr_values_string(int index, const char* value);
  void set_attr_values_string(int index, const char* value, size_t size);
  ::std::string* add_attr_values_string();
  void add_attr_values_string(const ::std::string& value);
  void add_attr_values_string(const char* value);
  void add_attr_values_string(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& attr_values_string() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attr_values_string();

  // repeated int32 attr_values_int = 7;
  int attr_values_int_size() const;
  void clear_attr_values_int();
  static const int kAttrValuesIntFieldNumber = 7;
  ::google::protobuf::int32 attr_values_int(int index) const;
  void set_attr_values_int(int index, ::google::protobuf::int32 value);
  void add_attr_values_int(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      attr_values_int() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_attr_values_int();

  // @@protoc_insertion_point(class_scope:whiteBear.Column)
 private:
  inline void set_has_attr_meta();
  inline void clear_has_attr_meta();
  inline void set_has_attr_type();
  inline void clear_has_attr_type();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr attr_meta_;
  ::google::protobuf::RepeatedField< float > attr_values_float_;
  ::google::protobuf::RepeatedField< double > attr_values_double_;
  ::google::protobuf::RepeatedField< bool > attr_values_bool_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attr_values_string_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > attr_values_int_;
  int attr_type_;
  friend void  protobuf_AddDesc_proto_2fddbms_2eproto();
  friend void protobuf_AssignDesc_proto_2fddbms_2eproto();
  friend void protobuf_ShutdownFile_proto_2fddbms_2eproto();

  void InitAsDefaultInstance();
  static Column* default_instance_;
};
// -------------------------------------------------------------------

class LoadTableRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:whiteBear.LoadTableRequest) */ {
 public:
  LoadTableRequest();
  virtual ~LoadTableRequest();

  LoadTableRequest(const LoadTableRequest& from);

  inline LoadTableRequest& operator=(const LoadTableRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadTableRequest& default_instance();

  void Swap(LoadTableRequest* other);

  // implements Message ----------------------------------------------

  inline LoadTableRequest* New() const { return New(NULL); }

  LoadTableRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoadTableRequest& from);
  void MergeFrom(const LoadTableRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoadTableRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string table_name = 1;
  bool has_table_name() const;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // required int32 meta_nums = 2 [default = 0];
  bool has_meta_nums() const;
  void clear_meta_nums();
  static const int kMetaNumsFieldNumber = 2;
  ::google::protobuf::int32 meta_nums() const;
  void set_meta_nums(::google::protobuf::int32 value);

  // repeated .whiteBear.Column columns = 3;
  int columns_size() const;
  void clear_columns();
  static const int kColumnsFieldNumber = 3;
  const ::whiteBear::Column& columns(int index) const;
  ::whiteBear::Column* mutable_columns(int index);
  ::whiteBear::Column* add_columns();
  ::google::protobuf::RepeatedPtrField< ::whiteBear::Column >*
      mutable_columns();
  const ::google::protobuf::RepeatedPtrField< ::whiteBear::Column >&
      columns() const;

  // @@protoc_insertion_point(class_scope:whiteBear.LoadTableRequest)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_meta_nums();
  inline void clear_has_meta_nums();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  ::google::protobuf::RepeatedPtrField< ::whiteBear::Column > columns_;
  ::google::protobuf::int32 meta_nums_;
  friend void  protobuf_AddDesc_proto_2fddbms_2eproto();
  friend void protobuf_AssignDesc_proto_2fddbms_2eproto();
  friend void protobuf_ShutdownFile_proto_2fddbms_2eproto();

  void InitAsDefaultInstance();
  static LoadTableRequest* default_instance_;
};
// -------------------------------------------------------------------

class LoadTableResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:whiteBear.LoadTableResponse) */ {
 public:
  LoadTableResponse();
  virtual ~LoadTableResponse();

  LoadTableResponse(const LoadTableResponse& from);

  inline LoadTableResponse& operator=(const LoadTableResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadTableResponse& default_instance();

  void Swap(LoadTableResponse* other);

  // implements Message ----------------------------------------------

  inline LoadTableResponse* New() const { return New(NULL); }

  LoadTableResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoadTableResponse& from);
  void MergeFrom(const LoadTableResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoadTableResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool success = 1 [default = false];
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // optional string errors = 2 [default = "NULL error message"];
  bool has_errors() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 2;
  const ::std::string& errors() const;
  void set_errors(const ::std::string& value);
  void set_errors(const char* value);
  void set_errors(const char* value, size_t size);
  ::std::string* mutable_errors();
  ::std::string* release_errors();
  void set_allocated_errors(::std::string* errors);

  // @@protoc_insertion_point(class_scope:whiteBear.LoadTableResponse)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_errors();
  inline void clear_has_errors();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_errors_;
  ::google::protobuf::internal::ArenaStringPtr errors_;
  bool success_;
  friend void  protobuf_AddDesc_proto_2fddbms_2eproto();
  friend void protobuf_AssignDesc_proto_2fddbms_2eproto();
  friend void protobuf_ShutdownFile_proto_2fddbms_2eproto();

  void InitAsDefaultInstance();
  static LoadTableResponse* default_instance_;
};
// -------------------------------------------------------------------

class QueryTempTableRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:whiteBear.QueryTempTableRequest) */ {
 public:
  QueryTempTableRequest();
  virtual ~QueryTempTableRequest();

  QueryTempTableRequest(const QueryTempTableRequest& from);

  inline QueryTempTableRequest& operator=(const QueryTempTableRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryTempTableRequest& default_instance();

  void Swap(QueryTempTableRequest* other);

  // implements Message ----------------------------------------------

  inline QueryTempTableRequest* New() const { return New(NULL); }

  QueryTempTableRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryTempTableRequest& from);
  void MergeFrom(const QueryTempTableRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryTempTableRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string table_name = 1;
  bool has_table_name() const;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // @@protoc_insertion_point(class_scope:whiteBear.QueryTempTableRequest)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  friend void  protobuf_AddDesc_proto_2fddbms_2eproto();
  friend void protobuf_AssignDesc_proto_2fddbms_2eproto();
  friend void protobuf_ShutdownFile_proto_2fddbms_2eproto();

  void InitAsDefaultInstance();
  static QueryTempTableRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryTempTableResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:whiteBear.QueryTempTableResponse) */ {
 public:
  QueryTempTableResponse();
  virtual ~QueryTempTableResponse();

  QueryTempTableResponse(const QueryTempTableResponse& from);

  inline QueryTempTableResponse& operator=(const QueryTempTableResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryTempTableResponse& default_instance();

  void Swap(QueryTempTableResponse* other);

  // implements Message ----------------------------------------------

  inline QueryTempTableResponse* New() const { return New(NULL); }

  QueryTempTableResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryTempTableResponse& from);
  void MergeFrom(const QueryTempTableResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryTempTableResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 meta_nums = 1 [default = 0];
  bool has_meta_nums() const;
  void clear_meta_nums();
  static const int kMetaNumsFieldNumber = 1;
  ::google::protobuf::int32 meta_nums() const;
  void set_meta_nums(::google::protobuf::int32 value);

  // repeated .whiteBear.Column columns = 2;
  int columns_size() const;
  void clear_columns();
  static const int kColumnsFieldNumber = 2;
  const ::whiteBear::Column& columns(int index) const;
  ::whiteBear::Column* mutable_columns(int index);
  ::whiteBear::Column* add_columns();
  ::google::protobuf::RepeatedPtrField< ::whiteBear::Column >*
      mutable_columns();
  const ::google::protobuf::RepeatedPtrField< ::whiteBear::Column >&
      columns() const;

  // required bool success = 3 [default = false];
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 3;
  bool success() const;
  void set_success(bool value);

  // optional string errors = 4 [default = "NULL error message"];
  bool has_errors() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 4;
  const ::std::string& errors() const;
  void set_errors(const ::std::string& value);
  void set_errors(const char* value);
  void set_errors(const char* value, size_t size);
  ::std::string* mutable_errors();
  ::std::string* release_errors();
  void set_allocated_errors(::std::string* errors);

  // @@protoc_insertion_point(class_scope:whiteBear.QueryTempTableResponse)
 private:
  inline void set_has_meta_nums();
  inline void clear_has_meta_nums();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_errors();
  inline void clear_has_errors();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::whiteBear::Column > columns_;
  ::google::protobuf::int32 meta_nums_;
  bool success_;
  static ::std::string* _default_errors_;
  ::google::protobuf::internal::ArenaStringPtr errors_;
  friend void  protobuf_AddDesc_proto_2fddbms_2eproto();
  friend void protobuf_AssignDesc_proto_2fddbms_2eproto();
  friend void protobuf_ShutdownFile_proto_2fddbms_2eproto();

  void InitAsDefaultInstance();
  static QueryTempTableResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeleteTempTableRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:whiteBear.DeleteTempTableRequest) */ {
 public:
  DeleteTempTableRequest();
  virtual ~DeleteTempTableRequest();

  DeleteTempTableRequest(const DeleteTempTableRequest& from);

  inline DeleteTempTableRequest& operator=(const DeleteTempTableRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteTempTableRequest& default_instance();

  void Swap(DeleteTempTableRequest* other);

  // implements Message ----------------------------------------------

  inline DeleteTempTableRequest* New() const { return New(NULL); }

  DeleteTempTableRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteTempTableRequest& from);
  void MergeFrom(const DeleteTempTableRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteTempTableRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string table_name = 1;
  bool has_table_name() const;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // @@protoc_insertion_point(class_scope:whiteBear.DeleteTempTableRequest)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  friend void  protobuf_AddDesc_proto_2fddbms_2eproto();
  friend void protobuf_AssignDesc_proto_2fddbms_2eproto();
  friend void protobuf_ShutdownFile_proto_2fddbms_2eproto();

  void InitAsDefaultInstance();
  static DeleteTempTableRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeleteTempTableResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:whiteBear.DeleteTempTableResponse) */ {
 public:
  DeleteTempTableResponse();
  virtual ~DeleteTempTableResponse();

  DeleteTempTableResponse(const DeleteTempTableResponse& from);

  inline DeleteTempTableResponse& operator=(const DeleteTempTableResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteTempTableResponse& default_instance();

  void Swap(DeleteTempTableResponse* other);

  // implements Message ----------------------------------------------

  inline DeleteTempTableResponse* New() const { return New(NULL); }

  DeleteTempTableResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteTempTableResponse& from);
  void MergeFrom(const DeleteTempTableResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteTempTableResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool success = 1 [default = false];
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // optional string errors = 2 [default = "NULL error message"];
  bool has_errors() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 2;
  const ::std::string& errors() const;
  void set_errors(const ::std::string& value);
  void set_errors(const char* value);
  void set_errors(const char* value, size_t size);
  ::std::string* mutable_errors();
  ::std::string* release_errors();
  void set_allocated_errors(::std::string* errors);

  // @@protoc_insertion_point(class_scope:whiteBear.DeleteTempTableResponse)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_errors();
  inline void clear_has_errors();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_errors_;
  ::google::protobuf::internal::ArenaStringPtr errors_;
  bool success_;
  friend void  protobuf_AddDesc_proto_2fddbms_2eproto();
  friend void protobuf_AssignDesc_proto_2fddbms_2eproto();
  friend void protobuf_ShutdownFile_proto_2fddbms_2eproto();

  void InitAsDefaultInstance();
  static DeleteTempTableResponse* default_instance_;
};
// -------------------------------------------------------------------

class NonResultsSQLRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:whiteBear.NonResultsSQLRequest) */ {
 public:
  NonResultsSQLRequest();
  virtual ~NonResultsSQLRequest();

  NonResultsSQLRequest(const NonResultsSQLRequest& from);

  inline NonResultsSQLRequest& operator=(const NonResultsSQLRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NonResultsSQLRequest& default_instance();

  void Swap(NonResultsSQLRequest* other);

  // implements Message ----------------------------------------------

  inline NonResultsSQLRequest* New() const { return New(NULL); }

  NonResultsSQLRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NonResultsSQLRequest& from);
  void MergeFrom(const NonResultsSQLRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NonResultsSQLRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sql = 1;
  bool has_sql() const;
  void clear_sql();
  static const int kSqlFieldNumber = 1;
  const ::std::string& sql() const;
  void set_sql(const ::std::string& value);
  void set_sql(const char* value);
  void set_sql(const char* value, size_t size);
  ::std::string* mutable_sql();
  ::std::string* release_sql();
  void set_allocated_sql(::std::string* sql);

  // @@protoc_insertion_point(class_scope:whiteBear.NonResultsSQLRequest)
 private:
  inline void set_has_sql();
  inline void clear_has_sql();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sql_;
  friend void  protobuf_AddDesc_proto_2fddbms_2eproto();
  friend void protobuf_AssignDesc_proto_2fddbms_2eproto();
  friend void protobuf_ShutdownFile_proto_2fddbms_2eproto();

  void InitAsDefaultInstance();
  static NonResultsSQLRequest* default_instance_;
};
// -------------------------------------------------------------------

class NonResultsSQLResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:whiteBear.NonResultsSQLResponse) */ {
 public:
  NonResultsSQLResponse();
  virtual ~NonResultsSQLResponse();

  NonResultsSQLResponse(const NonResultsSQLResponse& from);

  inline NonResultsSQLResponse& operator=(const NonResultsSQLResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NonResultsSQLResponse& default_instance();

  void Swap(NonResultsSQLResponse* other);

  // implements Message ----------------------------------------------

  inline NonResultsSQLResponse* New() const { return New(NULL); }

  NonResultsSQLResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NonResultsSQLResponse& from);
  void MergeFrom(const NonResultsSQLResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NonResultsSQLResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool success = 1 [default = false];
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // optional string errors = 2 [default = "NULL error message"];
  bool has_errors() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 2;
  const ::std::string& errors() const;
  void set_errors(const ::std::string& value);
  void set_errors(const char* value);
  void set_errors(const char* value, size_t size);
  ::std::string* mutable_errors();
  ::std::string* release_errors();
  void set_allocated_errors(::std::string* errors);

  // @@protoc_insertion_point(class_scope:whiteBear.NonResultsSQLResponse)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_errors();
  inline void clear_has_errors();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_errors_;
  ::google::protobuf::internal::ArenaStringPtr errors_;
  bool success_;
  friend void  protobuf_AddDesc_proto_2fddbms_2eproto();
  friend void protobuf_AssignDesc_proto_2fddbms_2eproto();
  friend void protobuf_ShutdownFile_proto_2fddbms_2eproto();

  void InitAsDefaultInstance();
  static NonResultsSQLResponse* default_instance_;
};
// -------------------------------------------------------------------

class ResultsSQLRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:whiteBear.ResultsSQLRequest) */ {
 public:
  ResultsSQLRequest();
  virtual ~ResultsSQLRequest();

  ResultsSQLRequest(const ResultsSQLRequest& from);

  inline ResultsSQLRequest& operator=(const ResultsSQLRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultsSQLRequest& default_instance();

  void Swap(ResultsSQLRequest* other);

  // implements Message ----------------------------------------------

  inline ResultsSQLRequest* New() const { return New(NULL); }

  ResultsSQLRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResultsSQLRequest& from);
  void MergeFrom(const ResultsSQLRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResultsSQLRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sql = 1;
  bool has_sql() const;
  void clear_sql();
  static const int kSqlFieldNumber = 1;
  const ::std::string& sql() const;
  void set_sql(const ::std::string& value);
  void set_sql(const char* value);
  void set_sql(const char* value, size_t size);
  ::std::string* mutable_sql();
  ::std::string* release_sql();
  void set_allocated_sql(::std::string* sql);

  // @@protoc_insertion_point(class_scope:whiteBear.ResultsSQLRequest)
 private:
  inline void set_has_sql();
  inline void clear_has_sql();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sql_;
  friend void  protobuf_AddDesc_proto_2fddbms_2eproto();
  friend void protobuf_AssignDesc_proto_2fddbms_2eproto();
  friend void protobuf_ShutdownFile_proto_2fddbms_2eproto();

  void InitAsDefaultInstance();
  static ResultsSQLRequest* default_instance_;
};
// -------------------------------------------------------------------

class ResultsSQLResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:whiteBear.ResultsSQLResponse) */ {
 public:
  ResultsSQLResponse();
  virtual ~ResultsSQLResponse();

  ResultsSQLResponse(const ResultsSQLResponse& from);

  inline ResultsSQLResponse& operator=(const ResultsSQLResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultsSQLResponse& default_instance();

  void Swap(ResultsSQLResponse* other);

  // implements Message ----------------------------------------------

  inline ResultsSQLResponse* New() const { return New(NULL); }

  ResultsSQLResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResultsSQLResponse& from);
  void MergeFrom(const ResultsSQLResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResultsSQLResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string table_name = 1;
  bool has_table_name() const;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // required int32 meta_nums = 2 [default = 0];
  bool has_meta_nums() const;
  void clear_meta_nums();
  static const int kMetaNumsFieldNumber = 2;
  ::google::protobuf::int32 meta_nums() const;
  void set_meta_nums(::google::protobuf::int32 value);

  // repeated .whiteBear.Column columns = 3;
  int columns_size() const;
  void clear_columns();
  static const int kColumnsFieldNumber = 3;
  const ::whiteBear::Column& columns(int index) const;
  ::whiteBear::Column* mutable_columns(int index);
  ::whiteBear::Column* add_columns();
  ::google::protobuf::RepeatedPtrField< ::whiteBear::Column >*
      mutable_columns();
  const ::google::protobuf::RepeatedPtrField< ::whiteBear::Column >&
      columns() const;

  // required bool success = 4 [default = false];
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 4;
  bool success() const;
  void set_success(bool value);

  // optional string errors = 5 [default = "NULL error message"];
  bool has_errors() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 5;
  const ::std::string& errors() const;
  void set_errors(const ::std::string& value);
  void set_errors(const char* value);
  void set_errors(const char* value, size_t size);
  ::std::string* mutable_errors();
  ::std::string* release_errors();
  void set_allocated_errors(::std::string* errors);

  // @@protoc_insertion_point(class_scope:whiteBear.ResultsSQLResponse)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_meta_nums();
  inline void clear_has_meta_nums();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_errors();
  inline void clear_has_errors();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  ::google::protobuf::RepeatedPtrField< ::whiteBear::Column > columns_;
  ::google::protobuf::int32 meta_nums_;
  bool success_;
  static ::std::string* _default_errors_;
  ::google::protobuf::internal::ArenaStringPtr errors_;
  friend void  protobuf_AddDesc_proto_2fddbms_2eproto();
  friend void protobuf_AssignDesc_proto_2fddbms_2eproto();
  friend void protobuf_ShutdownFile_proto_2fddbms_2eproto();

  void InitAsDefaultInstance();
  static ResultsSQLResponse* default_instance_;
};
// -------------------------------------------------------------------

class SelectSQLRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:whiteBear.SelectSQLRequest) */ {
 public:
  SelectSQLRequest();
  virtual ~SelectSQLRequest();

  SelectSQLRequest(const SelectSQLRequest& from);

  inline SelectSQLRequest& operator=(const SelectSQLRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectSQLRequest& default_instance();

  void Swap(SelectSQLRequest* other);

  // implements Message ----------------------------------------------

  inline SelectSQLRequest* New() const { return New(NULL); }

  SelectSQLRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SelectSQLRequest& from);
  void MergeFrom(const SelectSQLRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SelectSQLRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sql = 1;
  bool has_sql() const;
  void clear_sql();
  static const int kSqlFieldNumber = 1;
  const ::std::string& sql() const;
  void set_sql(const ::std::string& value);
  void set_sql(const char* value);
  void set_sql(const char* value, size_t size);
  ::std::string* mutable_sql();
  ::std::string* release_sql();
  void set_allocated_sql(::std::string* sql);

  // @@protoc_insertion_point(class_scope:whiteBear.SelectSQLRequest)
 private:
  inline void set_has_sql();
  inline void clear_has_sql();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sql_;
  friend void  protobuf_AddDesc_proto_2fddbms_2eproto();
  friend void protobuf_AssignDesc_proto_2fddbms_2eproto();
  friend void protobuf_ShutdownFile_proto_2fddbms_2eproto();

  void InitAsDefaultInstance();
  static SelectSQLRequest* default_instance_;
};
// -------------------------------------------------------------------

class SelectSQLResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:whiteBear.SelectSQLResponse) */ {
 public:
  SelectSQLResponse();
  virtual ~SelectSQLResponse();

  SelectSQLResponse(const SelectSQLResponse& from);

  inline SelectSQLResponse& operator=(const SelectSQLResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectSQLResponse& default_instance();

  void Swap(SelectSQLResponse* other);

  // implements Message ----------------------------------------------

  inline SelectSQLResponse* New() const { return New(NULL); }

  SelectSQLResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SelectSQLResponse& from);
  void MergeFrom(const SelectSQLResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SelectSQLResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string table_name = 1;
  bool has_table_name() const;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // required int32 meta_nums = 2 [default = 0];
  bool has_meta_nums() const;
  void clear_meta_nums();
  static const int kMetaNumsFieldNumber = 2;
  ::google::protobuf::int32 meta_nums() const;
  void set_meta_nums(::google::protobuf::int32 value);

  // repeated .whiteBear.Column columns = 3;
  int columns_size() const;
  void clear_columns();
  static const int kColumnsFieldNumber = 3;
  const ::whiteBear::Column& columns(int index) const;
  ::whiteBear::Column* mutable_columns(int index);
  ::whiteBear::Column* add_columns();
  ::google::protobuf::RepeatedPtrField< ::whiteBear::Column >*
      mutable_columns();
  const ::google::protobuf::RepeatedPtrField< ::whiteBear::Column >&
      columns() const;

  // required bool success = 4 [default = false];
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 4;
  bool success() const;
  void set_success(bool value);

  // optional string errors = 5 [default = "NULL error message"];
  bool has_errors() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 5;
  const ::std::string& errors() const;
  void set_errors(const ::std::string& value);
  void set_errors(const char* value);
  void set_errors(const char* value, size_t size);
  ::std::string* mutable_errors();
  ::std::string* release_errors();
  void set_allocated_errors(::std::string* errors);

  // @@protoc_insertion_point(class_scope:whiteBear.SelectSQLResponse)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_meta_nums();
  inline void clear_has_meta_nums();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_errors();
  inline void clear_has_errors();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  ::google::protobuf::RepeatedPtrField< ::whiteBear::Column > columns_;
  ::google::protobuf::int32 meta_nums_;
  bool success_;
  static ::std::string* _default_errors_;
  ::google::protobuf::internal::ArenaStringPtr errors_;
  friend void  protobuf_AddDesc_proto_2fddbms_2eproto();
  friend void protobuf_AssignDesc_proto_2fddbms_2eproto();
  friend void protobuf_ShutdownFile_proto_2fddbms_2eproto();

  void InitAsDefaultInstance();
  static SelectSQLResponse* default_instance_;
};
// ===================================================================

class DDBService_Stub;

class DDBService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline DDBService() {};
 public:
  virtual ~DDBService();

  typedef DDBService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void QueryTreeService(::google::protobuf::RpcController* controller,
                       const ::whiteBear::QueryTreeRequest* request,
                       ::whiteBear::QueryTreeResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void LoadTable(::google::protobuf::RpcController* controller,
                       const ::whiteBear::LoadTableRequest* request,
                       ::whiteBear::LoadTableResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void QueryTempTable(::google::protobuf::RpcController* controller,
                       const ::whiteBear::QueryTempTableRequest* request,
                       ::whiteBear::QueryTempTableResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteTempTable(::google::protobuf::RpcController* controller,
                       const ::whiteBear::DeleteTempTableRequest* request,
                       ::whiteBear::DeleteTempTableResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NonResultsSQL(::google::protobuf::RpcController* controller,
                       const ::whiteBear::NonResultsSQLRequest* request,
                       ::whiteBear::NonResultsSQLResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ResultsSQL(::google::protobuf::RpcController* controller,
                       const ::whiteBear::ResultsSQLRequest* request,
                       ::whiteBear::ResultsSQLResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SelectSQL(::google::protobuf::RpcController* controller,
                       const ::whiteBear::SelectSQLRequest* request,
                       ::whiteBear::SelectSQLResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DDBService);
};

class DDBService_Stub : public DDBService {
 public:
  DDBService_Stub(::google::protobuf::RpcChannel* channel);
  DDBService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~DDBService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements DDBService ------------------------------------------

  void QueryTreeService(::google::protobuf::RpcController* controller,
                       const ::whiteBear::QueryTreeRequest* request,
                       ::whiteBear::QueryTreeResponse* response,
                       ::google::protobuf::Closure* done);
  void LoadTable(::google::protobuf::RpcController* controller,
                       const ::whiteBear::LoadTableRequest* request,
                       ::whiteBear::LoadTableResponse* response,
                       ::google::protobuf::Closure* done);
  void QueryTempTable(::google::protobuf::RpcController* controller,
                       const ::whiteBear::QueryTempTableRequest* request,
                       ::whiteBear::QueryTempTableResponse* response,
                       ::google::protobuf::Closure* done);
  void DeleteTempTable(::google::protobuf::RpcController* controller,
                       const ::whiteBear::DeleteTempTableRequest* request,
                       ::whiteBear::DeleteTempTableResponse* response,
                       ::google::protobuf::Closure* done);
  void NonResultsSQL(::google::protobuf::RpcController* controller,
                       const ::whiteBear::NonResultsSQLRequest* request,
                       ::whiteBear::NonResultsSQLResponse* response,
                       ::google::protobuf::Closure* done);
  void ResultsSQL(::google::protobuf::RpcController* controller,
                       const ::whiteBear::ResultsSQLRequest* request,
                       ::whiteBear::ResultsSQLResponse* response,
                       ::google::protobuf::Closure* done);
  void SelectSQL(::google::protobuf::RpcController* controller,
                       const ::whiteBear::SelectSQLRequest* request,
                       ::whiteBear::SelectSQLResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DDBService_Stub);
};


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Predicate

// required string attribute_name_ = 1;
inline bool Predicate::has_attribute_name_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Predicate::set_has_attribute_name_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Predicate::clear_has_attribute_name_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Predicate::clear_attribute_name_() {
  attribute_name__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attribute_name_();
}
inline const ::std::string& Predicate::attribute_name_() const {
  // @@protoc_insertion_point(field_get:whiteBear.Predicate.attribute_name_)
  return attribute_name__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Predicate::set_attribute_name_(const ::std::string& value) {
  set_has_attribute_name_();
  attribute_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.Predicate.attribute_name_)
}
inline void Predicate::set_attribute_name_(const char* value) {
  set_has_attribute_name_();
  attribute_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.Predicate.attribute_name_)
}
inline void Predicate::set_attribute_name_(const char* value, size_t size) {
  set_has_attribute_name_();
  attribute_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.Predicate.attribute_name_)
}
inline ::std::string* Predicate::mutable_attribute_name_() {
  set_has_attribute_name_();
  // @@protoc_insertion_point(field_mutable:whiteBear.Predicate.attribute_name_)
  return attribute_name__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Predicate::release_attribute_name_() {
  // @@protoc_insertion_point(field_release:whiteBear.Predicate.attribute_name_)
  clear_has_attribute_name_();
  return attribute_name__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Predicate::set_allocated_attribute_name_(::std::string* attribute_name_) {
  if (attribute_name_ != NULL) {
    set_has_attribute_name_();
  } else {
    clear_has_attribute_name_();
  }
  attribute_name__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attribute_name_);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.Predicate.attribute_name_)
}

// required string table_name_ = 2;
inline bool Predicate::has_table_name_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Predicate::set_has_table_name_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Predicate::clear_has_table_name_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Predicate::clear_table_name_() {
  table_name__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_name_();
}
inline const ::std::string& Predicate::table_name_() const {
  // @@protoc_insertion_point(field_get:whiteBear.Predicate.table_name_)
  return table_name__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Predicate::set_table_name_(const ::std::string& value) {
  set_has_table_name_();
  table_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.Predicate.table_name_)
}
inline void Predicate::set_table_name_(const char* value) {
  set_has_table_name_();
  table_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.Predicate.table_name_)
}
inline void Predicate::set_table_name_(const char* value, size_t size) {
  set_has_table_name_();
  table_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.Predicate.table_name_)
}
inline ::std::string* Predicate::mutable_table_name_() {
  set_has_table_name_();
  // @@protoc_insertion_point(field_mutable:whiteBear.Predicate.table_name_)
  return table_name__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Predicate::release_table_name_() {
  // @@protoc_insertion_point(field_release:whiteBear.Predicate.table_name_)
  clear_has_table_name_();
  return table_name__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Predicate::set_allocated_table_name_(::std::string* table_name_) {
  if (table_name_ != NULL) {
    set_has_table_name_();
  } else {
    clear_has_table_name_();
  }
  table_name__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name_);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.Predicate.table_name_)
}

// required .whiteBear.Predicate.OperationType operation_type_ = 3;
inline bool Predicate::has_operation_type_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Predicate::set_has_operation_type_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Predicate::clear_has_operation_type_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Predicate::clear_operation_type_() {
  operation_type__ = 0;
  clear_has_operation_type_();
}
inline ::whiteBear::Predicate_OperationType Predicate::operation_type_() const {
  // @@protoc_insertion_point(field_get:whiteBear.Predicate.operation_type_)
  return static_cast< ::whiteBear::Predicate_OperationType >(operation_type__);
}
inline void Predicate::set_operation_type_(::whiteBear::Predicate_OperationType value) {
  assert(::whiteBear::Predicate_OperationType_IsValid(value));
  set_has_operation_type_();
  operation_type__ = value;
  // @@protoc_insertion_point(field_set:whiteBear.Predicate.operation_type_)
}

// required .whiteBear.Predicate.OperationType left_operation_type_ = 4;
inline bool Predicate::has_left_operation_type_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Predicate::set_has_left_operation_type_() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Predicate::clear_has_left_operation_type_() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Predicate::clear_left_operation_type_() {
  left_operation_type__ = 0;
  clear_has_left_operation_type_();
}
inline ::whiteBear::Predicate_OperationType Predicate::left_operation_type_() const {
  // @@protoc_insertion_point(field_get:whiteBear.Predicate.left_operation_type_)
  return static_cast< ::whiteBear::Predicate_OperationType >(left_operation_type__);
}
inline void Predicate::set_left_operation_type_(::whiteBear::Predicate_OperationType value) {
  assert(::whiteBear::Predicate_OperationType_IsValid(value));
  set_has_left_operation_type_();
  left_operation_type__ = value;
  // @@protoc_insertion_point(field_set:whiteBear.Predicate.left_operation_type_)
}

// required string right_value_ = 5;
inline bool Predicate::has_right_value_() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Predicate::set_has_right_value_() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Predicate::clear_has_right_value_() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Predicate::clear_right_value_() {
  right_value__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_right_value_();
}
inline const ::std::string& Predicate::right_value_() const {
  // @@protoc_insertion_point(field_get:whiteBear.Predicate.right_value_)
  return right_value__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Predicate::set_right_value_(const ::std::string& value) {
  set_has_right_value_();
  right_value__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.Predicate.right_value_)
}
inline void Predicate::set_right_value_(const char* value) {
  set_has_right_value_();
  right_value__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.Predicate.right_value_)
}
inline void Predicate::set_right_value_(const char* value, size_t size) {
  set_has_right_value_();
  right_value__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.Predicate.right_value_)
}
inline ::std::string* Predicate::mutable_right_value_() {
  set_has_right_value_();
  // @@protoc_insertion_point(field_mutable:whiteBear.Predicate.right_value_)
  return right_value__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Predicate::release_right_value_() {
  // @@protoc_insertion_point(field_release:whiteBear.Predicate.right_value_)
  clear_has_right_value_();
  return right_value__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Predicate::set_allocated_right_value_(::std::string* right_value_) {
  if (right_value_ != NULL) {
    set_has_right_value_();
  } else {
    clear_has_right_value_();
  }
  right_value__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), right_value_);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.Predicate.right_value_)
}

// optional string left_value_ = 6;
inline bool Predicate::has_left_value_() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Predicate::set_has_left_value_() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Predicate::clear_has_left_value_() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Predicate::clear_left_value_() {
  left_value__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_left_value_();
}
inline const ::std::string& Predicate::left_value_() const {
  // @@protoc_insertion_point(field_get:whiteBear.Predicate.left_value_)
  return left_value__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Predicate::set_left_value_(const ::std::string& value) {
  set_has_left_value_();
  left_value__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.Predicate.left_value_)
}
inline void Predicate::set_left_value_(const char* value) {
  set_has_left_value_();
  left_value__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.Predicate.left_value_)
}
inline void Predicate::set_left_value_(const char* value, size_t size) {
  set_has_left_value_();
  left_value__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.Predicate.left_value_)
}
inline ::std::string* Predicate::mutable_left_value_() {
  set_has_left_value_();
  // @@protoc_insertion_point(field_mutable:whiteBear.Predicate.left_value_)
  return left_value__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Predicate::release_left_value_() {
  // @@protoc_insertion_point(field_release:whiteBear.Predicate.left_value_)
  clear_has_left_value_();
  return left_value__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Predicate::set_allocated_left_value_(::std::string* left_value_) {
  if (left_value_ != NULL) {
    set_has_left_value_();
  } else {
    clear_has_left_value_();
  }
  left_value__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), left_value_);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.Predicate.left_value_)
}

// optional string right_attribute_name_ = 7;
inline bool Predicate::has_right_attribute_name_() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Predicate::set_has_right_attribute_name_() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Predicate::clear_has_right_attribute_name_() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Predicate::clear_right_attribute_name_() {
  right_attribute_name__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_right_attribute_name_();
}
inline const ::std::string& Predicate::right_attribute_name_() const {
  // @@protoc_insertion_point(field_get:whiteBear.Predicate.right_attribute_name_)
  return right_attribute_name__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Predicate::set_right_attribute_name_(const ::std::string& value) {
  set_has_right_attribute_name_();
  right_attribute_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.Predicate.right_attribute_name_)
}
inline void Predicate::set_right_attribute_name_(const char* value) {
  set_has_right_attribute_name_();
  right_attribute_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.Predicate.right_attribute_name_)
}
inline void Predicate::set_right_attribute_name_(const char* value, size_t size) {
  set_has_right_attribute_name_();
  right_attribute_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.Predicate.right_attribute_name_)
}
inline ::std::string* Predicate::mutable_right_attribute_name_() {
  set_has_right_attribute_name_();
  // @@protoc_insertion_point(field_mutable:whiteBear.Predicate.right_attribute_name_)
  return right_attribute_name__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Predicate::release_right_attribute_name_() {
  // @@protoc_insertion_point(field_release:whiteBear.Predicate.right_attribute_name_)
  clear_has_right_attribute_name_();
  return right_attribute_name__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Predicate::set_allocated_right_attribute_name_(::std::string* right_attribute_name_) {
  if (right_attribute_name_ != NULL) {
    set_has_right_attribute_name_();
  } else {
    clear_has_right_attribute_name_();
  }
  right_attribute_name__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), right_attribute_name_);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.Predicate.right_attribute_name_)
}

// optional string right_table_name_ = 8;
inline bool Predicate::has_right_table_name_() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Predicate::set_has_right_table_name_() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Predicate::clear_has_right_table_name_() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Predicate::clear_right_table_name_() {
  right_table_name__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_right_table_name_();
}
inline const ::std::string& Predicate::right_table_name_() const {
  // @@protoc_insertion_point(field_get:whiteBear.Predicate.right_table_name_)
  return right_table_name__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Predicate::set_right_table_name_(const ::std::string& value) {
  set_has_right_table_name_();
  right_table_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.Predicate.right_table_name_)
}
inline void Predicate::set_right_table_name_(const char* value) {
  set_has_right_table_name_();
  right_table_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.Predicate.right_table_name_)
}
inline void Predicate::set_right_table_name_(const char* value, size_t size) {
  set_has_right_table_name_();
  right_table_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.Predicate.right_table_name_)
}
inline ::std::string* Predicate::mutable_right_table_name_() {
  set_has_right_table_name_();
  // @@protoc_insertion_point(field_mutable:whiteBear.Predicate.right_table_name_)
  return right_table_name__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Predicate::release_right_table_name_() {
  // @@protoc_insertion_point(field_release:whiteBear.Predicate.right_table_name_)
  clear_has_right_table_name_();
  return right_table_name__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Predicate::set_allocated_right_table_name_(::std::string* right_table_name_) {
  if (right_table_name_ != NULL) {
    set_has_right_table_name_();
  } else {
    clear_has_right_table_name_();
  }
  right_table_name__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), right_table_name_);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.Predicate.right_table_name_)
}

// -------------------------------------------------------------------

// QueryNode

// required .whiteBear.QueryNode.NodeType node_type_ = 1;
inline bool QueryNode::has_node_type_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryNode::set_has_node_type_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryNode::clear_has_node_type_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryNode::clear_node_type_() {
  node_type__ = 0;
  clear_has_node_type_();
}
inline ::whiteBear::QueryNode_NodeType QueryNode::node_type_() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryNode.node_type_)
  return static_cast< ::whiteBear::QueryNode_NodeType >(node_type__);
}
inline void QueryNode::set_node_type_(::whiteBear::QueryNode_NodeType value) {
  assert(::whiteBear::QueryNode_NodeType_IsValid(value));
  set_has_node_type_();
  node_type__ = value;
  // @@protoc_insertion_point(field_set:whiteBear.QueryNode.node_type_)
}

// required string site_ = 2;
inline bool QueryNode::has_site_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryNode::set_has_site_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryNode::clear_has_site_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryNode::clear_site_() {
  site__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_site_();
}
inline const ::std::string& QueryNode::site_() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryNode.site_)
  return site__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryNode::set_site_(const ::std::string& value) {
  set_has_site_();
  site__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.QueryNode.site_)
}
inline void QueryNode::set_site_(const char* value) {
  set_has_site_();
  site__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.QueryNode.site_)
}
inline void QueryNode::set_site_(const char* value, size_t size) {
  set_has_site_();
  site__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.QueryNode.site_)
}
inline ::std::string* QueryNode::mutable_site_() {
  set_has_site_();
  // @@protoc_insertion_point(field_mutable:whiteBear.QueryNode.site_)
  return site__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryNode::release_site_() {
  // @@protoc_insertion_point(field_release:whiteBear.QueryNode.site_)
  clear_has_site_();
  return site__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryNode::set_allocated_site_(::std::string* site_) {
  if (site_ != NULL) {
    set_has_site_();
  } else {
    clear_has_site_();
  }
  site__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), site_);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.QueryNode.site_)
}

// required string table_name_ = 3;
inline bool QueryNode::has_table_name_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryNode::set_has_table_name_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryNode::clear_has_table_name_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryNode::clear_table_name_() {
  table_name__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_name_();
}
inline const ::std::string& QueryNode::table_name_() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryNode.table_name_)
  return table_name__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryNode::set_table_name_(const ::std::string& value) {
  set_has_table_name_();
  table_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.QueryNode.table_name_)
}
inline void QueryNode::set_table_name_(const char* value) {
  set_has_table_name_();
  table_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.QueryNode.table_name_)
}
inline void QueryNode::set_table_name_(const char* value, size_t size) {
  set_has_table_name_();
  table_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.QueryNode.table_name_)
}
inline ::std::string* QueryNode::mutable_table_name_() {
  set_has_table_name_();
  // @@protoc_insertion_point(field_mutable:whiteBear.QueryNode.table_name_)
  return table_name__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryNode::release_table_name_() {
  // @@protoc_insertion_point(field_release:whiteBear.QueryNode.table_name_)
  clear_has_table_name_();
  return table_name__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryNode::set_allocated_table_name_(::std::string* table_name_) {
  if (table_name_ != NULL) {
    set_has_table_name_();
  } else {
    clear_has_table_name_();
  }
  table_name__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name_);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.QueryNode.table_name_)
}

// repeated string attr_name_ = 4;
inline int QueryNode::attr_name__size() const {
  return attr_name__.size();
}
inline void QueryNode::clear_attr_name_() {
  attr_name__.Clear();
}
inline const ::std::string& QueryNode::attr_name_(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryNode.attr_name_)
  return attr_name__.Get(index);
}
inline ::std::string* QueryNode::mutable_attr_name_(int index) {
  // @@protoc_insertion_point(field_mutable:whiteBear.QueryNode.attr_name_)
  return attr_name__.Mutable(index);
}
inline void QueryNode::set_attr_name_(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:whiteBear.QueryNode.attr_name_)
  attr_name__.Mutable(index)->assign(value);
}
inline void QueryNode::set_attr_name_(int index, const char* value) {
  attr_name__.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:whiteBear.QueryNode.attr_name_)
}
inline void QueryNode::set_attr_name_(int index, const char* value, size_t size) {
  attr_name__.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:whiteBear.QueryNode.attr_name_)
}
inline ::std::string* QueryNode::add_attr_name_() {
  // @@protoc_insertion_point(field_add_mutable:whiteBear.QueryNode.attr_name_)
  return attr_name__.Add();
}
inline void QueryNode::add_attr_name_(const ::std::string& value) {
  attr_name__.Add()->assign(value);
  // @@protoc_insertion_point(field_add:whiteBear.QueryNode.attr_name_)
}
inline void QueryNode::add_attr_name_(const char* value) {
  attr_name__.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:whiteBear.QueryNode.attr_name_)
}
inline void QueryNode::add_attr_name_(const char* value, size_t size) {
  attr_name__.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:whiteBear.QueryNode.attr_name_)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryNode::attr_name_() const {
  // @@protoc_insertion_point(field_list:whiteBear.QueryNode.attr_name_)
  return attr_name__;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryNode::mutable_attr_name_() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.QueryNode.attr_name_)
  return &attr_name__;
}

// repeated .whiteBear.Predicate select_predicates_ = 5;
inline int QueryNode::select_predicates__size() const {
  return select_predicates__.size();
}
inline void QueryNode::clear_select_predicates_() {
  select_predicates__.Clear();
}
inline const ::whiteBear::Predicate& QueryNode::select_predicates_(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryNode.select_predicates_)
  return select_predicates__.Get(index);
}
inline ::whiteBear::Predicate* QueryNode::mutable_select_predicates_(int index) {
  // @@protoc_insertion_point(field_mutable:whiteBear.QueryNode.select_predicates_)
  return select_predicates__.Mutable(index);
}
inline ::whiteBear::Predicate* QueryNode::add_select_predicates_() {
  // @@protoc_insertion_point(field_add:whiteBear.QueryNode.select_predicates_)
  return select_predicates__.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::whiteBear::Predicate >*
QueryNode::mutable_select_predicates_() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.QueryNode.select_predicates_)
  return &select_predicates__;
}
inline const ::google::protobuf::RepeatedPtrField< ::whiteBear::Predicate >&
QueryNode::select_predicates_() const {
  // @@protoc_insertion_point(field_list:whiteBear.QueryNode.select_predicates_)
  return select_predicates__;
}

// repeated .whiteBear.Predicate join_predicate_ = 6;
inline int QueryNode::join_predicate__size() const {
  return join_predicate__.size();
}
inline void QueryNode::clear_join_predicate_() {
  join_predicate__.Clear();
}
inline const ::whiteBear::Predicate& QueryNode::join_predicate_(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryNode.join_predicate_)
  return join_predicate__.Get(index);
}
inline ::whiteBear::Predicate* QueryNode::mutable_join_predicate_(int index) {
  // @@protoc_insertion_point(field_mutable:whiteBear.QueryNode.join_predicate_)
  return join_predicate__.Mutable(index);
}
inline ::whiteBear::Predicate* QueryNode::add_join_predicate_() {
  // @@protoc_insertion_point(field_add:whiteBear.QueryNode.join_predicate_)
  return join_predicate__.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::whiteBear::Predicate >*
QueryNode::mutable_join_predicate_() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.QueryNode.join_predicate_)
  return &join_predicate__;
}
inline const ::google::protobuf::RepeatedPtrField< ::whiteBear::Predicate >&
QueryNode::join_predicate_() const {
  // @@protoc_insertion_point(field_list:whiteBear.QueryNode.join_predicate_)
  return join_predicate__;
}

// required int32 parent_ = 7;
inline bool QueryNode::has_parent_() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QueryNode::set_has_parent_() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QueryNode::clear_has_parent_() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QueryNode::clear_parent_() {
  parent__ = 0;
  clear_has_parent_();
}
inline ::google::protobuf::int32 QueryNode::parent_() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryNode.parent_)
  return parent__;
}
inline void QueryNode::set_parent_(::google::protobuf::int32 value) {
  set_has_parent_();
  parent__ = value;
  // @@protoc_insertion_point(field_set:whiteBear.QueryNode.parent_)
}

// repeated int32 sons_ = 8;
inline int QueryNode::sons__size() const {
  return sons__.size();
}
inline void QueryNode::clear_sons_() {
  sons__.Clear();
}
inline ::google::protobuf::int32 QueryNode::sons_(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryNode.sons_)
  return sons__.Get(index);
}
inline void QueryNode::set_sons_(int index, ::google::protobuf::int32 value) {
  sons__.Set(index, value);
  // @@protoc_insertion_point(field_set:whiteBear.QueryNode.sons_)
}
inline void QueryNode::add_sons_(::google::protobuf::int32 value) {
  sons__.Add(value);
  // @@protoc_insertion_point(field_add:whiteBear.QueryNode.sons_)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QueryNode::sons_() const {
  // @@protoc_insertion_point(field_list:whiteBear.QueryNode.sons_)
  return sons__;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QueryNode::mutable_sons_() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.QueryNode.sons_)
  return &sons__;
}

// required bool is_parent_ = 9 [default = false];
inline bool QueryNode::has_is_parent_() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void QueryNode::set_has_is_parent_() {
  _has_bits_[0] |= 0x00000100u;
}
inline void QueryNode::clear_has_is_parent_() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void QueryNode::clear_is_parent_() {
  is_parent__ = false;
  clear_has_is_parent_();
}
inline bool QueryNode::is_parent_() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryNode.is_parent_)
  return is_parent__;
}
inline void QueryNode::set_is_parent_(bool value) {
  set_has_is_parent_();
  is_parent__ = value;
  // @@protoc_insertion_point(field_set:whiteBear.QueryNode.is_parent_)
}

// required bool is_leaf_ = 10 [default = false];
inline bool QueryNode::has_is_leaf_() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void QueryNode::set_has_is_leaf_() {
  _has_bits_[0] |= 0x00000200u;
}
inline void QueryNode::clear_has_is_leaf_() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void QueryNode::clear_is_leaf_() {
  is_leaf__ = false;
  clear_has_is_leaf_();
}
inline bool QueryNode::is_leaf_() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryNode.is_leaf_)
  return is_leaf__;
}
inline void QueryNode::set_is_leaf_(bool value) {
  set_has_is_leaf_();
  is_leaf__ = value;
  // @@protoc_insertion_point(field_set:whiteBear.QueryNode.is_leaf_)
}

// -------------------------------------------------------------------

// QueryTreeRequest

// required int32 n = 1 [default = 0];
inline bool QueryTreeRequest::has_n() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryTreeRequest::set_has_n() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryTreeRequest::clear_has_n() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryTreeRequest::clear_n() {
  n_ = 0;
  clear_has_n();
}
inline ::google::protobuf::int32 QueryTreeRequest::n() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryTreeRequest.n)
  return n_;
}
inline void QueryTreeRequest::set_n(::google::protobuf::int32 value) {
  set_has_n();
  n_ = value;
  // @@protoc_insertion_point(field_set:whiteBear.QueryTreeRequest.n)
}

// required int32 root_index = 2 [default = -1];
inline bool QueryTreeRequest::has_root_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryTreeRequest::set_has_root_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryTreeRequest::clear_has_root_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryTreeRequest::clear_root_index() {
  root_index_ = -1;
  clear_has_root_index();
}
inline ::google::protobuf::int32 QueryTreeRequest::root_index() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryTreeRequest.root_index)
  return root_index_;
}
inline void QueryTreeRequest::set_root_index(::google::protobuf::int32 value) {
  set_has_root_index();
  root_index_ = value;
  // @@protoc_insertion_point(field_set:whiteBear.QueryTreeRequest.root_index)
}

// repeated .whiteBear.QueryNode nodes = 3;
inline int QueryTreeRequest::nodes_size() const {
  return nodes_.size();
}
inline void QueryTreeRequest::clear_nodes() {
  nodes_.Clear();
}
inline const ::whiteBear::QueryNode& QueryTreeRequest::nodes(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryTreeRequest.nodes)
  return nodes_.Get(index);
}
inline ::whiteBear::QueryNode* QueryTreeRequest::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:whiteBear.QueryTreeRequest.nodes)
  return nodes_.Mutable(index);
}
inline ::whiteBear::QueryNode* QueryTreeRequest::add_nodes() {
  // @@protoc_insertion_point(field_add:whiteBear.QueryTreeRequest.nodes)
  return nodes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::whiteBear::QueryNode >*
QueryTreeRequest::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.QueryTreeRequest.nodes)
  return &nodes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::whiteBear::QueryNode >&
QueryTreeRequest::nodes() const {
  // @@protoc_insertion_point(field_list:whiteBear.QueryTreeRequest.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// QueryTreeResponse

// required bool success = 1 [default = true];
inline bool QueryTreeResponse::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryTreeResponse::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryTreeResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryTreeResponse::clear_success() {
  success_ = true;
  clear_has_success();
}
inline bool QueryTreeResponse::success() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryTreeResponse.success)
  return success_;
}
inline void QueryTreeResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:whiteBear.QueryTreeResponse.success)
}

// optional string errors = 2 [default = "NULL error message"];
inline bool QueryTreeResponse::has_errors() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryTreeResponse::set_has_errors() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryTreeResponse::clear_has_errors() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryTreeResponse::clear_errors() {
  errors_.ClearToDefaultNoArena(_default_errors_);
  clear_has_errors();
}
inline const ::std::string& QueryTreeResponse::errors() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryTreeResponse.errors)
  return errors_.GetNoArena(_default_errors_);
}
inline void QueryTreeResponse::set_errors(const ::std::string& value) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_, value);
  // @@protoc_insertion_point(field_set:whiteBear.QueryTreeResponse.errors)
}
inline void QueryTreeResponse::set_errors(const char* value) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.QueryTreeResponse.errors)
}
inline void QueryTreeResponse::set_errors(const char* value, size_t size) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.QueryTreeResponse.errors)
}
inline ::std::string* QueryTreeResponse::mutable_errors() {
  set_has_errors();
  // @@protoc_insertion_point(field_mutable:whiteBear.QueryTreeResponse.errors)
  return errors_.MutableNoArena(_default_errors_);
}
inline ::std::string* QueryTreeResponse::release_errors() {
  // @@protoc_insertion_point(field_release:whiteBear.QueryTreeResponse.errors)
  clear_has_errors();
  return errors_.ReleaseNoArena(_default_errors_);
}
inline void QueryTreeResponse::set_allocated_errors(::std::string* errors) {
  if (errors != NULL) {
    set_has_errors();
  } else {
    clear_has_errors();
  }
  errors_.SetAllocatedNoArena(_default_errors_, errors);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.QueryTreeResponse.errors)
}

// -------------------------------------------------------------------

// Column

// required string attr_meta = 1;
inline bool Column::has_attr_meta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Column::set_has_attr_meta() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Column::clear_has_attr_meta() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Column::clear_attr_meta() {
  attr_meta_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attr_meta();
}
inline const ::std::string& Column::attr_meta() const {
  // @@protoc_insertion_point(field_get:whiteBear.Column.attr_meta)
  return attr_meta_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Column::set_attr_meta(const ::std::string& value) {
  set_has_attr_meta();
  attr_meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.Column.attr_meta)
}
inline void Column::set_attr_meta(const char* value) {
  set_has_attr_meta();
  attr_meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.Column.attr_meta)
}
inline void Column::set_attr_meta(const char* value, size_t size) {
  set_has_attr_meta();
  attr_meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.Column.attr_meta)
}
inline ::std::string* Column::mutable_attr_meta() {
  set_has_attr_meta();
  // @@protoc_insertion_point(field_mutable:whiteBear.Column.attr_meta)
  return attr_meta_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Column::release_attr_meta() {
  // @@protoc_insertion_point(field_release:whiteBear.Column.attr_meta)
  clear_has_attr_meta();
  return attr_meta_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Column::set_allocated_attr_meta(::std::string* attr_meta) {
  if (attr_meta != NULL) {
    set_has_attr_meta();
  } else {
    clear_has_attr_meta();
  }
  attr_meta_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attr_meta);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.Column.attr_meta)
}

// required .whiteBear.Column.AttributeType attr_type = 2;
inline bool Column::has_attr_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Column::set_has_attr_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Column::clear_has_attr_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Column::clear_attr_type() {
  attr_type_ = 0;
  clear_has_attr_type();
}
inline ::whiteBear::Column_AttributeType Column::attr_type() const {
  // @@protoc_insertion_point(field_get:whiteBear.Column.attr_type)
  return static_cast< ::whiteBear::Column_AttributeType >(attr_type_);
}
inline void Column::set_attr_type(::whiteBear::Column_AttributeType value) {
  assert(::whiteBear::Column_AttributeType_IsValid(value));
  set_has_attr_type();
  attr_type_ = value;
  // @@protoc_insertion_point(field_set:whiteBear.Column.attr_type)
}

// repeated float attr_values_float = 3;
inline int Column::attr_values_float_size() const {
  return attr_values_float_.size();
}
inline void Column::clear_attr_values_float() {
  attr_values_float_.Clear();
}
inline float Column::attr_values_float(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.Column.attr_values_float)
  return attr_values_float_.Get(index);
}
inline void Column::set_attr_values_float(int index, float value) {
  attr_values_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:whiteBear.Column.attr_values_float)
}
inline void Column::add_attr_values_float(float value) {
  attr_values_float_.Add(value);
  // @@protoc_insertion_point(field_add:whiteBear.Column.attr_values_float)
}
inline const ::google::protobuf::RepeatedField< float >&
Column::attr_values_float() const {
  // @@protoc_insertion_point(field_list:whiteBear.Column.attr_values_float)
  return attr_values_float_;
}
inline ::google::protobuf::RepeatedField< float >*
Column::mutable_attr_values_float() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.Column.attr_values_float)
  return &attr_values_float_;
}

// repeated double attr_values_double = 4;
inline int Column::attr_values_double_size() const {
  return attr_values_double_.size();
}
inline void Column::clear_attr_values_double() {
  attr_values_double_.Clear();
}
inline double Column::attr_values_double(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.Column.attr_values_double)
  return attr_values_double_.Get(index);
}
inline void Column::set_attr_values_double(int index, double value) {
  attr_values_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:whiteBear.Column.attr_values_double)
}
inline void Column::add_attr_values_double(double value) {
  attr_values_double_.Add(value);
  // @@protoc_insertion_point(field_add:whiteBear.Column.attr_values_double)
}
inline const ::google::protobuf::RepeatedField< double >&
Column::attr_values_double() const {
  // @@protoc_insertion_point(field_list:whiteBear.Column.attr_values_double)
  return attr_values_double_;
}
inline ::google::protobuf::RepeatedField< double >*
Column::mutable_attr_values_double() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.Column.attr_values_double)
  return &attr_values_double_;
}

// repeated bool attr_values_bool = 5;
inline int Column::attr_values_bool_size() const {
  return attr_values_bool_.size();
}
inline void Column::clear_attr_values_bool() {
  attr_values_bool_.Clear();
}
inline bool Column::attr_values_bool(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.Column.attr_values_bool)
  return attr_values_bool_.Get(index);
}
inline void Column::set_attr_values_bool(int index, bool value) {
  attr_values_bool_.Set(index, value);
  // @@protoc_insertion_point(field_set:whiteBear.Column.attr_values_bool)
}
inline void Column::add_attr_values_bool(bool value) {
  attr_values_bool_.Add(value);
  // @@protoc_insertion_point(field_add:whiteBear.Column.attr_values_bool)
}
inline const ::google::protobuf::RepeatedField< bool >&
Column::attr_values_bool() const {
  // @@protoc_insertion_point(field_list:whiteBear.Column.attr_values_bool)
  return attr_values_bool_;
}
inline ::google::protobuf::RepeatedField< bool >*
Column::mutable_attr_values_bool() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.Column.attr_values_bool)
  return &attr_values_bool_;
}

// repeated string attr_values_string = 6;
inline int Column::attr_values_string_size() const {
  return attr_values_string_.size();
}
inline void Column::clear_attr_values_string() {
  attr_values_string_.Clear();
}
inline const ::std::string& Column::attr_values_string(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.Column.attr_values_string)
  return attr_values_string_.Get(index);
}
inline ::std::string* Column::mutable_attr_values_string(int index) {
  // @@protoc_insertion_point(field_mutable:whiteBear.Column.attr_values_string)
  return attr_values_string_.Mutable(index);
}
inline void Column::set_attr_values_string(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:whiteBear.Column.attr_values_string)
  attr_values_string_.Mutable(index)->assign(value);
}
inline void Column::set_attr_values_string(int index, const char* value) {
  attr_values_string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:whiteBear.Column.attr_values_string)
}
inline void Column::set_attr_values_string(int index, const char* value, size_t size) {
  attr_values_string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:whiteBear.Column.attr_values_string)
}
inline ::std::string* Column::add_attr_values_string() {
  // @@protoc_insertion_point(field_add_mutable:whiteBear.Column.attr_values_string)
  return attr_values_string_.Add();
}
inline void Column::add_attr_values_string(const ::std::string& value) {
  attr_values_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:whiteBear.Column.attr_values_string)
}
inline void Column::add_attr_values_string(const char* value) {
  attr_values_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:whiteBear.Column.attr_values_string)
}
inline void Column::add_attr_values_string(const char* value, size_t size) {
  attr_values_string_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:whiteBear.Column.attr_values_string)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Column::attr_values_string() const {
  // @@protoc_insertion_point(field_list:whiteBear.Column.attr_values_string)
  return attr_values_string_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Column::mutable_attr_values_string() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.Column.attr_values_string)
  return &attr_values_string_;
}

// repeated int32 attr_values_int = 7;
inline int Column::attr_values_int_size() const {
  return attr_values_int_.size();
}
inline void Column::clear_attr_values_int() {
  attr_values_int_.Clear();
}
inline ::google::protobuf::int32 Column::attr_values_int(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.Column.attr_values_int)
  return attr_values_int_.Get(index);
}
inline void Column::set_attr_values_int(int index, ::google::protobuf::int32 value) {
  attr_values_int_.Set(index, value);
  // @@protoc_insertion_point(field_set:whiteBear.Column.attr_values_int)
}
inline void Column::add_attr_values_int(::google::protobuf::int32 value) {
  attr_values_int_.Add(value);
  // @@protoc_insertion_point(field_add:whiteBear.Column.attr_values_int)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Column::attr_values_int() const {
  // @@protoc_insertion_point(field_list:whiteBear.Column.attr_values_int)
  return attr_values_int_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Column::mutable_attr_values_int() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.Column.attr_values_int)
  return &attr_values_int_;
}

// -------------------------------------------------------------------

// LoadTableRequest

// required string table_name = 1;
inline bool LoadTableRequest::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoadTableRequest::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoadTableRequest::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoadTableRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_name();
}
inline const ::std::string& LoadTableRequest::table_name() const {
  // @@protoc_insertion_point(field_get:whiteBear.LoadTableRequest.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoadTableRequest::set_table_name(const ::std::string& value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.LoadTableRequest.table_name)
}
inline void LoadTableRequest::set_table_name(const char* value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.LoadTableRequest.table_name)
}
inline void LoadTableRequest::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.LoadTableRequest.table_name)
}
inline ::std::string* LoadTableRequest::mutable_table_name() {
  set_has_table_name();
  // @@protoc_insertion_point(field_mutable:whiteBear.LoadTableRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoadTableRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:whiteBear.LoadTableRequest.table_name)
  clear_has_table_name();
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoadTableRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    set_has_table_name();
  } else {
    clear_has_table_name();
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.LoadTableRequest.table_name)
}

// required int32 meta_nums = 2 [default = 0];
inline bool LoadTableRequest::has_meta_nums() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoadTableRequest::set_has_meta_nums() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoadTableRequest::clear_has_meta_nums() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoadTableRequest::clear_meta_nums() {
  meta_nums_ = 0;
  clear_has_meta_nums();
}
inline ::google::protobuf::int32 LoadTableRequest::meta_nums() const {
  // @@protoc_insertion_point(field_get:whiteBear.LoadTableRequest.meta_nums)
  return meta_nums_;
}
inline void LoadTableRequest::set_meta_nums(::google::protobuf::int32 value) {
  set_has_meta_nums();
  meta_nums_ = value;
  // @@protoc_insertion_point(field_set:whiteBear.LoadTableRequest.meta_nums)
}

// repeated .whiteBear.Column columns = 3;
inline int LoadTableRequest::columns_size() const {
  return columns_.size();
}
inline void LoadTableRequest::clear_columns() {
  columns_.Clear();
}
inline const ::whiteBear::Column& LoadTableRequest::columns(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.LoadTableRequest.columns)
  return columns_.Get(index);
}
inline ::whiteBear::Column* LoadTableRequest::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:whiteBear.LoadTableRequest.columns)
  return columns_.Mutable(index);
}
inline ::whiteBear::Column* LoadTableRequest::add_columns() {
  // @@protoc_insertion_point(field_add:whiteBear.LoadTableRequest.columns)
  return columns_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::whiteBear::Column >*
LoadTableRequest::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.LoadTableRequest.columns)
  return &columns_;
}
inline const ::google::protobuf::RepeatedPtrField< ::whiteBear::Column >&
LoadTableRequest::columns() const {
  // @@protoc_insertion_point(field_list:whiteBear.LoadTableRequest.columns)
  return columns_;
}

// -------------------------------------------------------------------

// LoadTableResponse

// required bool success = 1 [default = false];
inline bool LoadTableResponse::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoadTableResponse::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoadTableResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoadTableResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool LoadTableResponse::success() const {
  // @@protoc_insertion_point(field_get:whiteBear.LoadTableResponse.success)
  return success_;
}
inline void LoadTableResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:whiteBear.LoadTableResponse.success)
}

// optional string errors = 2 [default = "NULL error message"];
inline bool LoadTableResponse::has_errors() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoadTableResponse::set_has_errors() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoadTableResponse::clear_has_errors() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoadTableResponse::clear_errors() {
  errors_.ClearToDefaultNoArena(_default_errors_);
  clear_has_errors();
}
inline const ::std::string& LoadTableResponse::errors() const {
  // @@protoc_insertion_point(field_get:whiteBear.LoadTableResponse.errors)
  return errors_.GetNoArena(_default_errors_);
}
inline void LoadTableResponse::set_errors(const ::std::string& value) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_, value);
  // @@protoc_insertion_point(field_set:whiteBear.LoadTableResponse.errors)
}
inline void LoadTableResponse::set_errors(const char* value) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.LoadTableResponse.errors)
}
inline void LoadTableResponse::set_errors(const char* value, size_t size) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.LoadTableResponse.errors)
}
inline ::std::string* LoadTableResponse::mutable_errors() {
  set_has_errors();
  // @@protoc_insertion_point(field_mutable:whiteBear.LoadTableResponse.errors)
  return errors_.MutableNoArena(_default_errors_);
}
inline ::std::string* LoadTableResponse::release_errors() {
  // @@protoc_insertion_point(field_release:whiteBear.LoadTableResponse.errors)
  clear_has_errors();
  return errors_.ReleaseNoArena(_default_errors_);
}
inline void LoadTableResponse::set_allocated_errors(::std::string* errors) {
  if (errors != NULL) {
    set_has_errors();
  } else {
    clear_has_errors();
  }
  errors_.SetAllocatedNoArena(_default_errors_, errors);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.LoadTableResponse.errors)
}

// -------------------------------------------------------------------

// QueryTempTableRequest

// required string table_name = 1;
inline bool QueryTempTableRequest::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryTempTableRequest::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryTempTableRequest::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryTempTableRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_name();
}
inline const ::std::string& QueryTempTableRequest::table_name() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryTempTableRequest.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryTempTableRequest::set_table_name(const ::std::string& value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.QueryTempTableRequest.table_name)
}
inline void QueryTempTableRequest::set_table_name(const char* value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.QueryTempTableRequest.table_name)
}
inline void QueryTempTableRequest::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.QueryTempTableRequest.table_name)
}
inline ::std::string* QueryTempTableRequest::mutable_table_name() {
  set_has_table_name();
  // @@protoc_insertion_point(field_mutable:whiteBear.QueryTempTableRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryTempTableRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:whiteBear.QueryTempTableRequest.table_name)
  clear_has_table_name();
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryTempTableRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    set_has_table_name();
  } else {
    clear_has_table_name();
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.QueryTempTableRequest.table_name)
}

// -------------------------------------------------------------------

// QueryTempTableResponse

// required int32 meta_nums = 1 [default = 0];
inline bool QueryTempTableResponse::has_meta_nums() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryTempTableResponse::set_has_meta_nums() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryTempTableResponse::clear_has_meta_nums() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryTempTableResponse::clear_meta_nums() {
  meta_nums_ = 0;
  clear_has_meta_nums();
}
inline ::google::protobuf::int32 QueryTempTableResponse::meta_nums() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryTempTableResponse.meta_nums)
  return meta_nums_;
}
inline void QueryTempTableResponse::set_meta_nums(::google::protobuf::int32 value) {
  set_has_meta_nums();
  meta_nums_ = value;
  // @@protoc_insertion_point(field_set:whiteBear.QueryTempTableResponse.meta_nums)
}

// repeated .whiteBear.Column columns = 2;
inline int QueryTempTableResponse::columns_size() const {
  return columns_.size();
}
inline void QueryTempTableResponse::clear_columns() {
  columns_.Clear();
}
inline const ::whiteBear::Column& QueryTempTableResponse::columns(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryTempTableResponse.columns)
  return columns_.Get(index);
}
inline ::whiteBear::Column* QueryTempTableResponse::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:whiteBear.QueryTempTableResponse.columns)
  return columns_.Mutable(index);
}
inline ::whiteBear::Column* QueryTempTableResponse::add_columns() {
  // @@protoc_insertion_point(field_add:whiteBear.QueryTempTableResponse.columns)
  return columns_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::whiteBear::Column >*
QueryTempTableResponse::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.QueryTempTableResponse.columns)
  return &columns_;
}
inline const ::google::protobuf::RepeatedPtrField< ::whiteBear::Column >&
QueryTempTableResponse::columns() const {
  // @@protoc_insertion_point(field_list:whiteBear.QueryTempTableResponse.columns)
  return columns_;
}

// required bool success = 3 [default = false];
inline bool QueryTempTableResponse::has_success() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryTempTableResponse::set_has_success() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryTempTableResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryTempTableResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool QueryTempTableResponse::success() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryTempTableResponse.success)
  return success_;
}
inline void QueryTempTableResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:whiteBear.QueryTempTableResponse.success)
}

// optional string errors = 4 [default = "NULL error message"];
inline bool QueryTempTableResponse::has_errors() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryTempTableResponse::set_has_errors() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryTempTableResponse::clear_has_errors() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryTempTableResponse::clear_errors() {
  errors_.ClearToDefaultNoArena(_default_errors_);
  clear_has_errors();
}
inline const ::std::string& QueryTempTableResponse::errors() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryTempTableResponse.errors)
  return errors_.GetNoArena(_default_errors_);
}
inline void QueryTempTableResponse::set_errors(const ::std::string& value) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_, value);
  // @@protoc_insertion_point(field_set:whiteBear.QueryTempTableResponse.errors)
}
inline void QueryTempTableResponse::set_errors(const char* value) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.QueryTempTableResponse.errors)
}
inline void QueryTempTableResponse::set_errors(const char* value, size_t size) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.QueryTempTableResponse.errors)
}
inline ::std::string* QueryTempTableResponse::mutable_errors() {
  set_has_errors();
  // @@protoc_insertion_point(field_mutable:whiteBear.QueryTempTableResponse.errors)
  return errors_.MutableNoArena(_default_errors_);
}
inline ::std::string* QueryTempTableResponse::release_errors() {
  // @@protoc_insertion_point(field_release:whiteBear.QueryTempTableResponse.errors)
  clear_has_errors();
  return errors_.ReleaseNoArena(_default_errors_);
}
inline void QueryTempTableResponse::set_allocated_errors(::std::string* errors) {
  if (errors != NULL) {
    set_has_errors();
  } else {
    clear_has_errors();
  }
  errors_.SetAllocatedNoArena(_default_errors_, errors);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.QueryTempTableResponse.errors)
}

// -------------------------------------------------------------------

// DeleteTempTableRequest

// required string table_name = 1;
inline bool DeleteTempTableRequest::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteTempTableRequest::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteTempTableRequest::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteTempTableRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_name();
}
inline const ::std::string& DeleteTempTableRequest::table_name() const {
  // @@protoc_insertion_point(field_get:whiteBear.DeleteTempTableRequest.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteTempTableRequest::set_table_name(const ::std::string& value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.DeleteTempTableRequest.table_name)
}
inline void DeleteTempTableRequest::set_table_name(const char* value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.DeleteTempTableRequest.table_name)
}
inline void DeleteTempTableRequest::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.DeleteTempTableRequest.table_name)
}
inline ::std::string* DeleteTempTableRequest::mutable_table_name() {
  set_has_table_name();
  // @@protoc_insertion_point(field_mutable:whiteBear.DeleteTempTableRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteTempTableRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:whiteBear.DeleteTempTableRequest.table_name)
  clear_has_table_name();
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteTempTableRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    set_has_table_name();
  } else {
    clear_has_table_name();
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.DeleteTempTableRequest.table_name)
}

// -------------------------------------------------------------------

// DeleteTempTableResponse

// required bool success = 1 [default = false];
inline bool DeleteTempTableResponse::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteTempTableResponse::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteTempTableResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteTempTableResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool DeleteTempTableResponse::success() const {
  // @@protoc_insertion_point(field_get:whiteBear.DeleteTempTableResponse.success)
  return success_;
}
inline void DeleteTempTableResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:whiteBear.DeleteTempTableResponse.success)
}

// optional string errors = 2 [default = "NULL error message"];
inline bool DeleteTempTableResponse::has_errors() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteTempTableResponse::set_has_errors() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteTempTableResponse::clear_has_errors() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteTempTableResponse::clear_errors() {
  errors_.ClearToDefaultNoArena(_default_errors_);
  clear_has_errors();
}
inline const ::std::string& DeleteTempTableResponse::errors() const {
  // @@protoc_insertion_point(field_get:whiteBear.DeleteTempTableResponse.errors)
  return errors_.GetNoArena(_default_errors_);
}
inline void DeleteTempTableResponse::set_errors(const ::std::string& value) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_, value);
  // @@protoc_insertion_point(field_set:whiteBear.DeleteTempTableResponse.errors)
}
inline void DeleteTempTableResponse::set_errors(const char* value) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.DeleteTempTableResponse.errors)
}
inline void DeleteTempTableResponse::set_errors(const char* value, size_t size) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.DeleteTempTableResponse.errors)
}
inline ::std::string* DeleteTempTableResponse::mutable_errors() {
  set_has_errors();
  // @@protoc_insertion_point(field_mutable:whiteBear.DeleteTempTableResponse.errors)
  return errors_.MutableNoArena(_default_errors_);
}
inline ::std::string* DeleteTempTableResponse::release_errors() {
  // @@protoc_insertion_point(field_release:whiteBear.DeleteTempTableResponse.errors)
  clear_has_errors();
  return errors_.ReleaseNoArena(_default_errors_);
}
inline void DeleteTempTableResponse::set_allocated_errors(::std::string* errors) {
  if (errors != NULL) {
    set_has_errors();
  } else {
    clear_has_errors();
  }
  errors_.SetAllocatedNoArena(_default_errors_, errors);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.DeleteTempTableResponse.errors)
}

// -------------------------------------------------------------------

// NonResultsSQLRequest

// required string sql = 1;
inline bool NonResultsSQLRequest::has_sql() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NonResultsSQLRequest::set_has_sql() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NonResultsSQLRequest::clear_has_sql() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NonResultsSQLRequest::clear_sql() {
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sql();
}
inline const ::std::string& NonResultsSQLRequest::sql() const {
  // @@protoc_insertion_point(field_get:whiteBear.NonResultsSQLRequest.sql)
  return sql_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NonResultsSQLRequest::set_sql(const ::std::string& value) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.NonResultsSQLRequest.sql)
}
inline void NonResultsSQLRequest::set_sql(const char* value) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.NonResultsSQLRequest.sql)
}
inline void NonResultsSQLRequest::set_sql(const char* value, size_t size) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.NonResultsSQLRequest.sql)
}
inline ::std::string* NonResultsSQLRequest::mutable_sql() {
  set_has_sql();
  // @@protoc_insertion_point(field_mutable:whiteBear.NonResultsSQLRequest.sql)
  return sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NonResultsSQLRequest::release_sql() {
  // @@protoc_insertion_point(field_release:whiteBear.NonResultsSQLRequest.sql)
  clear_has_sql();
  return sql_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NonResultsSQLRequest::set_allocated_sql(::std::string* sql) {
  if (sql != NULL) {
    set_has_sql();
  } else {
    clear_has_sql();
  }
  sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.NonResultsSQLRequest.sql)
}

// -------------------------------------------------------------------

// NonResultsSQLResponse

// required bool success = 1 [default = false];
inline bool NonResultsSQLResponse::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NonResultsSQLResponse::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NonResultsSQLResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NonResultsSQLResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool NonResultsSQLResponse::success() const {
  // @@protoc_insertion_point(field_get:whiteBear.NonResultsSQLResponse.success)
  return success_;
}
inline void NonResultsSQLResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:whiteBear.NonResultsSQLResponse.success)
}

// optional string errors = 2 [default = "NULL error message"];
inline bool NonResultsSQLResponse::has_errors() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NonResultsSQLResponse::set_has_errors() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NonResultsSQLResponse::clear_has_errors() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NonResultsSQLResponse::clear_errors() {
  errors_.ClearToDefaultNoArena(_default_errors_);
  clear_has_errors();
}
inline const ::std::string& NonResultsSQLResponse::errors() const {
  // @@protoc_insertion_point(field_get:whiteBear.NonResultsSQLResponse.errors)
  return errors_.GetNoArena(_default_errors_);
}
inline void NonResultsSQLResponse::set_errors(const ::std::string& value) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_, value);
  // @@protoc_insertion_point(field_set:whiteBear.NonResultsSQLResponse.errors)
}
inline void NonResultsSQLResponse::set_errors(const char* value) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.NonResultsSQLResponse.errors)
}
inline void NonResultsSQLResponse::set_errors(const char* value, size_t size) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.NonResultsSQLResponse.errors)
}
inline ::std::string* NonResultsSQLResponse::mutable_errors() {
  set_has_errors();
  // @@protoc_insertion_point(field_mutable:whiteBear.NonResultsSQLResponse.errors)
  return errors_.MutableNoArena(_default_errors_);
}
inline ::std::string* NonResultsSQLResponse::release_errors() {
  // @@protoc_insertion_point(field_release:whiteBear.NonResultsSQLResponse.errors)
  clear_has_errors();
  return errors_.ReleaseNoArena(_default_errors_);
}
inline void NonResultsSQLResponse::set_allocated_errors(::std::string* errors) {
  if (errors != NULL) {
    set_has_errors();
  } else {
    clear_has_errors();
  }
  errors_.SetAllocatedNoArena(_default_errors_, errors);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.NonResultsSQLResponse.errors)
}

// -------------------------------------------------------------------

// ResultsSQLRequest

// required string sql = 1;
inline bool ResultsSQLRequest::has_sql() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResultsSQLRequest::set_has_sql() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResultsSQLRequest::clear_has_sql() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResultsSQLRequest::clear_sql() {
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sql();
}
inline const ::std::string& ResultsSQLRequest::sql() const {
  // @@protoc_insertion_point(field_get:whiteBear.ResultsSQLRequest.sql)
  return sql_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResultsSQLRequest::set_sql(const ::std::string& value) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.ResultsSQLRequest.sql)
}
inline void ResultsSQLRequest::set_sql(const char* value) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.ResultsSQLRequest.sql)
}
inline void ResultsSQLRequest::set_sql(const char* value, size_t size) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.ResultsSQLRequest.sql)
}
inline ::std::string* ResultsSQLRequest::mutable_sql() {
  set_has_sql();
  // @@protoc_insertion_point(field_mutable:whiteBear.ResultsSQLRequest.sql)
  return sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResultsSQLRequest::release_sql() {
  // @@protoc_insertion_point(field_release:whiteBear.ResultsSQLRequest.sql)
  clear_has_sql();
  return sql_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResultsSQLRequest::set_allocated_sql(::std::string* sql) {
  if (sql != NULL) {
    set_has_sql();
  } else {
    clear_has_sql();
  }
  sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.ResultsSQLRequest.sql)
}

// -------------------------------------------------------------------

// ResultsSQLResponse

// required string table_name = 1;
inline bool ResultsSQLResponse::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResultsSQLResponse::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResultsSQLResponse::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResultsSQLResponse::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_name();
}
inline const ::std::string& ResultsSQLResponse::table_name() const {
  // @@protoc_insertion_point(field_get:whiteBear.ResultsSQLResponse.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResultsSQLResponse::set_table_name(const ::std::string& value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.ResultsSQLResponse.table_name)
}
inline void ResultsSQLResponse::set_table_name(const char* value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.ResultsSQLResponse.table_name)
}
inline void ResultsSQLResponse::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.ResultsSQLResponse.table_name)
}
inline ::std::string* ResultsSQLResponse::mutable_table_name() {
  set_has_table_name();
  // @@protoc_insertion_point(field_mutable:whiteBear.ResultsSQLResponse.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResultsSQLResponse::release_table_name() {
  // @@protoc_insertion_point(field_release:whiteBear.ResultsSQLResponse.table_name)
  clear_has_table_name();
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResultsSQLResponse::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    set_has_table_name();
  } else {
    clear_has_table_name();
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.ResultsSQLResponse.table_name)
}

// required int32 meta_nums = 2 [default = 0];
inline bool ResultsSQLResponse::has_meta_nums() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResultsSQLResponse::set_has_meta_nums() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResultsSQLResponse::clear_has_meta_nums() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResultsSQLResponse::clear_meta_nums() {
  meta_nums_ = 0;
  clear_has_meta_nums();
}
inline ::google::protobuf::int32 ResultsSQLResponse::meta_nums() const {
  // @@protoc_insertion_point(field_get:whiteBear.ResultsSQLResponse.meta_nums)
  return meta_nums_;
}
inline void ResultsSQLResponse::set_meta_nums(::google::protobuf::int32 value) {
  set_has_meta_nums();
  meta_nums_ = value;
  // @@protoc_insertion_point(field_set:whiteBear.ResultsSQLResponse.meta_nums)
}

// repeated .whiteBear.Column columns = 3;
inline int ResultsSQLResponse::columns_size() const {
  return columns_.size();
}
inline void ResultsSQLResponse::clear_columns() {
  columns_.Clear();
}
inline const ::whiteBear::Column& ResultsSQLResponse::columns(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.ResultsSQLResponse.columns)
  return columns_.Get(index);
}
inline ::whiteBear::Column* ResultsSQLResponse::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:whiteBear.ResultsSQLResponse.columns)
  return columns_.Mutable(index);
}
inline ::whiteBear::Column* ResultsSQLResponse::add_columns() {
  // @@protoc_insertion_point(field_add:whiteBear.ResultsSQLResponse.columns)
  return columns_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::whiteBear::Column >*
ResultsSQLResponse::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.ResultsSQLResponse.columns)
  return &columns_;
}
inline const ::google::protobuf::RepeatedPtrField< ::whiteBear::Column >&
ResultsSQLResponse::columns() const {
  // @@protoc_insertion_point(field_list:whiteBear.ResultsSQLResponse.columns)
  return columns_;
}

// required bool success = 4 [default = false];
inline bool ResultsSQLResponse::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResultsSQLResponse::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResultsSQLResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResultsSQLResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool ResultsSQLResponse::success() const {
  // @@protoc_insertion_point(field_get:whiteBear.ResultsSQLResponse.success)
  return success_;
}
inline void ResultsSQLResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:whiteBear.ResultsSQLResponse.success)
}

// optional string errors = 5 [default = "NULL error message"];
inline bool ResultsSQLResponse::has_errors() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResultsSQLResponse::set_has_errors() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResultsSQLResponse::clear_has_errors() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResultsSQLResponse::clear_errors() {
  errors_.ClearToDefaultNoArena(_default_errors_);
  clear_has_errors();
}
inline const ::std::string& ResultsSQLResponse::errors() const {
  // @@protoc_insertion_point(field_get:whiteBear.ResultsSQLResponse.errors)
  return errors_.GetNoArena(_default_errors_);
}
inline void ResultsSQLResponse::set_errors(const ::std::string& value) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_, value);
  // @@protoc_insertion_point(field_set:whiteBear.ResultsSQLResponse.errors)
}
inline void ResultsSQLResponse::set_errors(const char* value) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.ResultsSQLResponse.errors)
}
inline void ResultsSQLResponse::set_errors(const char* value, size_t size) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.ResultsSQLResponse.errors)
}
inline ::std::string* ResultsSQLResponse::mutable_errors() {
  set_has_errors();
  // @@protoc_insertion_point(field_mutable:whiteBear.ResultsSQLResponse.errors)
  return errors_.MutableNoArena(_default_errors_);
}
inline ::std::string* ResultsSQLResponse::release_errors() {
  // @@protoc_insertion_point(field_release:whiteBear.ResultsSQLResponse.errors)
  clear_has_errors();
  return errors_.ReleaseNoArena(_default_errors_);
}
inline void ResultsSQLResponse::set_allocated_errors(::std::string* errors) {
  if (errors != NULL) {
    set_has_errors();
  } else {
    clear_has_errors();
  }
  errors_.SetAllocatedNoArena(_default_errors_, errors);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.ResultsSQLResponse.errors)
}

// -------------------------------------------------------------------

// SelectSQLRequest

// required string sql = 1;
inline bool SelectSQLRequest::has_sql() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SelectSQLRequest::set_has_sql() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SelectSQLRequest::clear_has_sql() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SelectSQLRequest::clear_sql() {
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sql();
}
inline const ::std::string& SelectSQLRequest::sql() const {
  // @@protoc_insertion_point(field_get:whiteBear.SelectSQLRequest.sql)
  return sql_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelectSQLRequest::set_sql(const ::std::string& value) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.SelectSQLRequest.sql)
}
inline void SelectSQLRequest::set_sql(const char* value) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.SelectSQLRequest.sql)
}
inline void SelectSQLRequest::set_sql(const char* value, size_t size) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.SelectSQLRequest.sql)
}
inline ::std::string* SelectSQLRequest::mutable_sql() {
  set_has_sql();
  // @@protoc_insertion_point(field_mutable:whiteBear.SelectSQLRequest.sql)
  return sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelectSQLRequest::release_sql() {
  // @@protoc_insertion_point(field_release:whiteBear.SelectSQLRequest.sql)
  clear_has_sql();
  return sql_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelectSQLRequest::set_allocated_sql(::std::string* sql) {
  if (sql != NULL) {
    set_has_sql();
  } else {
    clear_has_sql();
  }
  sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.SelectSQLRequest.sql)
}

// -------------------------------------------------------------------

// SelectSQLResponse

// required string table_name = 1;
inline bool SelectSQLResponse::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SelectSQLResponse::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SelectSQLResponse::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SelectSQLResponse::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_name();
}
inline const ::std::string& SelectSQLResponse::table_name() const {
  // @@protoc_insertion_point(field_get:whiteBear.SelectSQLResponse.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelectSQLResponse::set_table_name(const ::std::string& value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.SelectSQLResponse.table_name)
}
inline void SelectSQLResponse::set_table_name(const char* value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.SelectSQLResponse.table_name)
}
inline void SelectSQLResponse::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.SelectSQLResponse.table_name)
}
inline ::std::string* SelectSQLResponse::mutable_table_name() {
  set_has_table_name();
  // @@protoc_insertion_point(field_mutable:whiteBear.SelectSQLResponse.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelectSQLResponse::release_table_name() {
  // @@protoc_insertion_point(field_release:whiteBear.SelectSQLResponse.table_name)
  clear_has_table_name();
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelectSQLResponse::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    set_has_table_name();
  } else {
    clear_has_table_name();
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.SelectSQLResponse.table_name)
}

// required int32 meta_nums = 2 [default = 0];
inline bool SelectSQLResponse::has_meta_nums() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SelectSQLResponse::set_has_meta_nums() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SelectSQLResponse::clear_has_meta_nums() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SelectSQLResponse::clear_meta_nums() {
  meta_nums_ = 0;
  clear_has_meta_nums();
}
inline ::google::protobuf::int32 SelectSQLResponse::meta_nums() const {
  // @@protoc_insertion_point(field_get:whiteBear.SelectSQLResponse.meta_nums)
  return meta_nums_;
}
inline void SelectSQLResponse::set_meta_nums(::google::protobuf::int32 value) {
  set_has_meta_nums();
  meta_nums_ = value;
  // @@protoc_insertion_point(field_set:whiteBear.SelectSQLResponse.meta_nums)
}

// repeated .whiteBear.Column columns = 3;
inline int SelectSQLResponse::columns_size() const {
  return columns_.size();
}
inline void SelectSQLResponse::clear_columns() {
  columns_.Clear();
}
inline const ::whiteBear::Column& SelectSQLResponse::columns(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.SelectSQLResponse.columns)
  return columns_.Get(index);
}
inline ::whiteBear::Column* SelectSQLResponse::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:whiteBear.SelectSQLResponse.columns)
  return columns_.Mutable(index);
}
inline ::whiteBear::Column* SelectSQLResponse::add_columns() {
  // @@protoc_insertion_point(field_add:whiteBear.SelectSQLResponse.columns)
  return columns_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::whiteBear::Column >*
SelectSQLResponse::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.SelectSQLResponse.columns)
  return &columns_;
}
inline const ::google::protobuf::RepeatedPtrField< ::whiteBear::Column >&
SelectSQLResponse::columns() const {
  // @@protoc_insertion_point(field_list:whiteBear.SelectSQLResponse.columns)
  return columns_;
}

// required bool success = 4 [default = false];
inline bool SelectSQLResponse::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SelectSQLResponse::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SelectSQLResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SelectSQLResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool SelectSQLResponse::success() const {
  // @@protoc_insertion_point(field_get:whiteBear.SelectSQLResponse.success)
  return success_;
}
inline void SelectSQLResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:whiteBear.SelectSQLResponse.success)
}

// optional string errors = 5 [default = "NULL error message"];
inline bool SelectSQLResponse::has_errors() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SelectSQLResponse::set_has_errors() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SelectSQLResponse::clear_has_errors() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SelectSQLResponse::clear_errors() {
  errors_.ClearToDefaultNoArena(_default_errors_);
  clear_has_errors();
}
inline const ::std::string& SelectSQLResponse::errors() const {
  // @@protoc_insertion_point(field_get:whiteBear.SelectSQLResponse.errors)
  return errors_.GetNoArena(_default_errors_);
}
inline void SelectSQLResponse::set_errors(const ::std::string& value) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_, value);
  // @@protoc_insertion_point(field_set:whiteBear.SelectSQLResponse.errors)
}
inline void SelectSQLResponse::set_errors(const char* value) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.SelectSQLResponse.errors)
}
inline void SelectSQLResponse::set_errors(const char* value, size_t size) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.SelectSQLResponse.errors)
}
inline ::std::string* SelectSQLResponse::mutable_errors() {
  set_has_errors();
  // @@protoc_insertion_point(field_mutable:whiteBear.SelectSQLResponse.errors)
  return errors_.MutableNoArena(_default_errors_);
}
inline ::std::string* SelectSQLResponse::release_errors() {
  // @@protoc_insertion_point(field_release:whiteBear.SelectSQLResponse.errors)
  clear_has_errors();
  return errors_.ReleaseNoArena(_default_errors_);
}
inline void SelectSQLResponse::set_allocated_errors(::std::string* errors) {
  if (errors != NULL) {
    set_has_errors();
  } else {
    clear_has_errors();
  }
  errors_.SetAllocatedNoArena(_default_errors_, errors);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.SelectSQLResponse.errors)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace whiteBear

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::whiteBear::Predicate_OperationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::whiteBear::Predicate_OperationType>() {
  return ::whiteBear::Predicate_OperationType_descriptor();
}
template <> struct is_proto_enum< ::whiteBear::QueryNode_NodeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::whiteBear::QueryNode_NodeType>() {
  return ::whiteBear::QueryNode_NodeType_descriptor();
}
template <> struct is_proto_enum< ::whiteBear::Column_AttributeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::whiteBear::Column_AttributeType>() {
  return ::whiteBear::Column_AttributeType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fddbms_2eproto__INCLUDED
