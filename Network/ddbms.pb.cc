// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ddbms.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ddbms.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace whiteBear {

namespace {

const ::google::protobuf::Descriptor* Predicate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Predicate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Predicate_OperationType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* QueryNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryNode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* QueryNode_NodeType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* QueryTreeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryTreeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryTreeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryTreeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Column_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Column_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Column_AttributeType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LoadTableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadTableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadTableResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadTableResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryTempTableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryTempTableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryTempTableResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryTempTableResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteTempTableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteTempTableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteTempTableResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteTempTableResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* NonResultsSQLRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NonResultsSQLRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NonResultsSQLResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NonResultsSQLResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResultsSQLRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultsSQLRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResultsSQLResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultsSQLResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* DDBService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ddbms_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ddbms_2eproto() {
  protobuf_AddDesc_ddbms_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ddbms.proto");
  GOOGLE_CHECK(file != NULL);
  Predicate_descriptor_ = file->message_type(0);
  static const int Predicate_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Predicate, attribute_name__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Predicate, table_name__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Predicate, operation_type__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Predicate, left_operation_type__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Predicate, right_value__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Predicate, left_value__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Predicate, right_attribute_name__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Predicate, right_table_name__),
  };
  Predicate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Predicate_descriptor_,
      Predicate::default_instance_,
      Predicate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Predicate, _has_bits_[0]),
      -1,
      -1,
      sizeof(Predicate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Predicate, _internal_metadata_),
      -1);
  Predicate_OperationType_descriptor_ = Predicate_descriptor_->enum_type(0);
  QueryNode_descriptor_ = file->message_type(1);
  static const int QueryNode_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNode, node_type__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNode, site__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNode, table_name__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNode, attr_name__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNode, select_predicates__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNode, join_predicate__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNode, parent__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNode, sons__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNode, is_parent__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNode, is_leaf__),
  };
  QueryNode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryNode_descriptor_,
      QueryNode::default_instance_,
      QueryNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNode, _has_bits_[0]),
      -1,
      -1,
      sizeof(QueryNode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNode, _internal_metadata_),
      -1);
  QueryNode_NodeType_descriptor_ = QueryNode_descriptor_->enum_type(0);
  QueryTreeRequest_descriptor_ = file->message_type(2);
  static const int QueryTreeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTreeRequest, n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTreeRequest, root_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTreeRequest, nodes_),
  };
  QueryTreeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryTreeRequest_descriptor_,
      QueryTreeRequest::default_instance_,
      QueryTreeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTreeRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(QueryTreeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTreeRequest, _internal_metadata_),
      -1);
  QueryTreeResponse_descriptor_ = file->message_type(3);
  static const int QueryTreeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTreeResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTreeResponse, errors_),
  };
  QueryTreeResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryTreeResponse_descriptor_,
      QueryTreeResponse::default_instance_,
      QueryTreeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTreeResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(QueryTreeResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTreeResponse, _internal_metadata_),
      -1);
  Column_descriptor_ = file->message_type(4);
  static const int Column_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, attr_meta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, attr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, attr_values_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, attr_values_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, attr_values_bool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, attr_values_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, attr_values_int_),
  };
  Column_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Column_descriptor_,
      Column::default_instance_,
      Column_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, _has_bits_[0]),
      -1,
      -1,
      sizeof(Column),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, _internal_metadata_),
      -1);
  Column_AttributeType_descriptor_ = Column_descriptor_->enum_type(0);
  LoadTableRequest_descriptor_ = file->message_type(5);
  static const int LoadTableRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadTableRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadTableRequest, meta_nums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadTableRequest, columns_),
  };
  LoadTableRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoadTableRequest_descriptor_,
      LoadTableRequest::default_instance_,
      LoadTableRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadTableRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(LoadTableRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadTableRequest, _internal_metadata_),
      -1);
  LoadTableResponse_descriptor_ = file->message_type(6);
  static const int LoadTableResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadTableResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadTableResponse, errors_),
  };
  LoadTableResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoadTableResponse_descriptor_,
      LoadTableResponse::default_instance_,
      LoadTableResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadTableResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(LoadTableResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadTableResponse, _internal_metadata_),
      -1);
  QueryTempTableRequest_descriptor_ = file->message_type(7);
  static const int QueryTempTableRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTempTableRequest, table_name_),
  };
  QueryTempTableRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryTempTableRequest_descriptor_,
      QueryTempTableRequest::default_instance_,
      QueryTempTableRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTempTableRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(QueryTempTableRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTempTableRequest, _internal_metadata_),
      -1);
  QueryTempTableResponse_descriptor_ = file->message_type(8);
  static const int QueryTempTableResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTempTableResponse, meta_nums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTempTableResponse, columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTempTableResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTempTableResponse, errors_),
  };
  QueryTempTableResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryTempTableResponse_descriptor_,
      QueryTempTableResponse::default_instance_,
      QueryTempTableResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTempTableResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(QueryTempTableResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTempTableResponse, _internal_metadata_),
      -1);
  DeleteTempTableRequest_descriptor_ = file->message_type(9);
  static const int DeleteTempTableRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTempTableRequest, table_name_),
  };
  DeleteTempTableRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteTempTableRequest_descriptor_,
      DeleteTempTableRequest::default_instance_,
      DeleteTempTableRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTempTableRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(DeleteTempTableRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTempTableRequest, _internal_metadata_),
      -1);
  DeleteTempTableResponse_descriptor_ = file->message_type(10);
  static const int DeleteTempTableResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTempTableResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTempTableResponse, errors_),
  };
  DeleteTempTableResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteTempTableResponse_descriptor_,
      DeleteTempTableResponse::default_instance_,
      DeleteTempTableResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTempTableResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(DeleteTempTableResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTempTableResponse, _internal_metadata_),
      -1);
  NonResultsSQLRequest_descriptor_ = file->message_type(11);
  static const int NonResultsSQLRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonResultsSQLRequest, sql_),
  };
  NonResultsSQLRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NonResultsSQLRequest_descriptor_,
      NonResultsSQLRequest::default_instance_,
      NonResultsSQLRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonResultsSQLRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(NonResultsSQLRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonResultsSQLRequest, _internal_metadata_),
      -1);
  NonResultsSQLResponse_descriptor_ = file->message_type(12);
  static const int NonResultsSQLResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonResultsSQLResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonResultsSQLResponse, errors_),
  };
  NonResultsSQLResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NonResultsSQLResponse_descriptor_,
      NonResultsSQLResponse::default_instance_,
      NonResultsSQLResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonResultsSQLResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(NonResultsSQLResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonResultsSQLResponse, _internal_metadata_),
      -1);
  ResultsSQLRequest_descriptor_ = file->message_type(13);
  static const int ResultsSQLRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultsSQLRequest, sql_),
  };
  ResultsSQLRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResultsSQLRequest_descriptor_,
      ResultsSQLRequest::default_instance_,
      ResultsSQLRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultsSQLRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResultsSQLRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultsSQLRequest, _internal_metadata_),
      -1);
  ResultsSQLResponse_descriptor_ = file->message_type(14);
  static const int ResultsSQLResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultsSQLResponse, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultsSQLResponse, meta_nums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultsSQLResponse, columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultsSQLResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultsSQLResponse, errors_),
  };
  ResultsSQLResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResultsSQLResponse_descriptor_,
      ResultsSQLResponse::default_instance_,
      ResultsSQLResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultsSQLResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResultsSQLResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultsSQLResponse, _internal_metadata_),
      -1);
  DDBService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ddbms_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Predicate_descriptor_, &Predicate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryNode_descriptor_, &QueryNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryTreeRequest_descriptor_, &QueryTreeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryTreeResponse_descriptor_, &QueryTreeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Column_descriptor_, &Column::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoadTableRequest_descriptor_, &LoadTableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoadTableResponse_descriptor_, &LoadTableResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryTempTableRequest_descriptor_, &QueryTempTableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryTempTableResponse_descriptor_, &QueryTempTableResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteTempTableRequest_descriptor_, &DeleteTempTableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteTempTableResponse_descriptor_, &DeleteTempTableResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NonResultsSQLRequest_descriptor_, &NonResultsSQLRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NonResultsSQLResponse_descriptor_, &NonResultsSQLResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResultsSQLRequest_descriptor_, &ResultsSQLRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResultsSQLResponse_descriptor_, &ResultsSQLResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ddbms_2eproto() {
  delete Predicate::default_instance_;
  delete Predicate_reflection_;
  delete QueryNode::default_instance_;
  delete QueryNode_reflection_;
  delete QueryTreeRequest::default_instance_;
  delete QueryTreeRequest_reflection_;
  delete QueryTreeResponse::default_instance_;
  delete QueryTreeResponse_reflection_;
  delete QueryTreeResponse::_default_errors_;
  delete Column::default_instance_;
  delete Column_reflection_;
  delete LoadTableRequest::default_instance_;
  delete LoadTableRequest_reflection_;
  delete LoadTableResponse::default_instance_;
  delete LoadTableResponse_reflection_;
  delete LoadTableResponse::_default_errors_;
  delete QueryTempTableRequest::default_instance_;
  delete QueryTempTableRequest_reflection_;
  delete QueryTempTableResponse::default_instance_;
  delete QueryTempTableResponse_reflection_;
  delete QueryTempTableResponse::_default_errors_;
  delete DeleteTempTableRequest::default_instance_;
  delete DeleteTempTableRequest_reflection_;
  delete DeleteTempTableResponse::default_instance_;
  delete DeleteTempTableResponse_reflection_;
  delete DeleteTempTableResponse::_default_errors_;
  delete NonResultsSQLRequest::default_instance_;
  delete NonResultsSQLRequest_reflection_;
  delete NonResultsSQLResponse::default_instance_;
  delete NonResultsSQLResponse_reflection_;
  delete NonResultsSQLResponse::_default_errors_;
  delete ResultsSQLRequest::default_instance_;
  delete ResultsSQLRequest_reflection_;
  delete ResultsSQLResponse::default_instance_;
  delete ResultsSQLResponse_reflection_;
  delete ResultsSQLResponse::_default_errors_;
}

void protobuf_AddDesc_ddbms_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ddbms_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013ddbms.proto\022\twhiteBear\"\206\003\n\tPredicate\022\027"
    "\n\017attribute_name_\030\001 \002(\t\022\023\n\013table_name_\030\002"
    " \002(\t\022;\n\017operation_type_\030\003 \002(\0162\".whiteBea"
    "r.Predicate.OperationType\022@\n\024left_operat"
    "ion_type_\030\004 \002(\0162\".whiteBear.Predicate.Op"
    "erationType\022\024\n\014right_value_\030\005 \002(\t\022\023\n\013lef"
    "t_value_\030\006 \001(\t\022\035\n\025right_attribute_name_\030"
    "\007 \001(\t\022\031\n\021right_table_name_\030\010 \001(\t\"g\n\rOper"
    "ationType\022\010\n\004JOIN\020\000\022\t\n\005EQUAL\020\001\022\010\n\004LESS\020\002"
    "\022\016\n\nLESS_EQUAL\020\003\022\t\n\005GREAT\020\004\022\017\n\013GREAT_EQU"
    "AL\020\005\022\013\n\007DEFAULT\020\006\"\370\002\n\tQueryNode\0221\n\nnode_"
    "type_\030\001 \002(\0162\035.whiteBear.QueryNode.NodeTy"
    "pe\022\r\n\005site_\030\002 \002(\t\022\023\n\013table_name_\030\003 \002(\t\022\022"
    "\n\nattr_name_\030\004 \003(\t\0220\n\022select_predicates_"
    "\030\005 \003(\0132\024.whiteBear.Predicate\022-\n\017join_pre"
    "dicate_\030\006 \003(\0132\024.whiteBear.Predicate\022\017\n\007p"
    "arent_\030\007 \002(\005\022\r\n\005sons_\030\010 \003(\005\022\031\n\nis_parent"
    "_\030\t \002(\010:\005false\022\027\n\010is_leaf_\030\n \002(\010:\005false\""
    "K\n\010NodeType\022\016\n\nPROJECTION\020\000\022\r\n\tSELECTION"
    "\020\001\022\010\n\004JOIN\020\002\022\t\n\005UNION\020\003\022\013\n\007DEFAULT\020\004\"]\n\020"
    "QueryTreeRequest\022\014\n\001n\030\001 \002(\005:\0010\022\026\n\nroot_i"
    "ndex\030\002 \002(\005:\002-1\022#\n\005nodes\030\003 \003(\0132\024.whiteBea"
    "r.QueryNode\"N\n\021QueryTreeResponse\022\025\n\007succ"
    "ess\030\001 \002(\010:\004true\022\"\n\006errors\030\002 \001(\t:\022NULL er"
    "ror message\"\234\002\n\006Column\022\021\n\tattr_meta\030\001 \002("
    "\t\0222\n\tattr_type\030\002 \002(\0162\037.whiteBear.Column."
    "AttributeType\022\031\n\021attr_values_float\030\003 \003(\002"
    "\022\032\n\022attr_values_double\030\004 \003(\001\022\030\n\020attr_val"
    "ues_bool\030\005 \003(\010\022\032\n\022attr_values_string\030\006 \003"
    "(\t\022\027\n\017attr_values_int\030\007 \003(\005\"E\n\rAttribute"
    "Type\022\010\n\004BOOL\020\000\022\007\n\003INT\020\001\022\n\n\006STRING\020\002\022\t\n\005F"
    "LOAT\020\003\022\n\n\006DOUBLE\020\004\"`\n\020LoadTableRequest\022\022"
    "\n\ntable_name\030\001 \002(\t\022\024\n\tmeta_nums\030\002 \002(\005:\0010"
    "\022\"\n\007columns\030\003 \003(\0132\021.whiteBear.Column\"O\n\021"
    "LoadTableResponse\022\026\n\007success\030\001 \002(\010:\005fals"
    "e\022\"\n\006errors\030\002 \001(\t:\022NULL error message\"+\n"
    "\025QueryTempTableRequest\022\022\n\ntable_name\030\001 \002"
    "(\t\"\216\001\n\026QueryTempTableResponse\022\024\n\tmeta_nu"
    "ms\030\001 \002(\005:\0010\022\"\n\007columns\030\002 \003(\0132\021.whiteBear"
    ".Column\022\026\n\007success\030\003 \002(\010:\005false\022\"\n\006error"
    "s\030\004 \001(\t:\022NULL error message\",\n\026DeleteTem"
    "pTableRequest\022\022\n\ntable_name\030\001 \002(\t\"U\n\027Del"
    "eteTempTableResponse\022\026\n\007success\030\001 \002(\010:\005f"
    "alse\022\"\n\006errors\030\002 \001(\t:\022NULL error message"
    "\"#\n\024NonResultsSQLRequest\022\013\n\003sql\030\001 \002(\t\"S\n"
    "\025NonResultsSQLResponse\022\026\n\007success\030\001 \002(\010:"
    "\005false\022\"\n\006errors\030\002 \001(\t:\022NULL error messa"
    "ge\" \n\021ResultsSQLRequest\022\013\n\003sql\030\001 \002(\t\"\236\001\n"
    "\022ResultsSQLResponse\022\022\n\ntable_name\030\001 \002(\t\022"
    "\024\n\tmeta_nums\030\002 \002(\005:\0010\022\"\n\007columns\030\003 \003(\0132\021"
    ".whiteBear.Column\022\026\n\007success\030\004 \002(\010:\005fals"
    "e\022\"\n\006errors\030\005 \001(\t:\022NULL error message2\354\003"
    "\n\nDDBService\022F\n\tQueryTree\022\033.whiteBear.Qu"
    "eryTreeRequest\032\034.whiteBear.QueryTreeResp"
    "onse\022F\n\tLoadTable\022\033.whiteBear.LoadTableR"
    "equest\032\034.whiteBear.LoadTableResponse\022U\n\016"
    "QueryTempTable\022 .whiteBear.QueryTempTabl"
    "eRequest\032!.whiteBear.QueryTempTableRespo"
    "nse\022X\n\017DeleteTempTable\022!.whiteBear.Delet"
    "eTempTableRequest\032\".whiteBear.DeleteTemp"
    "TableResponse\022R\n\rNonResultsSQL\022\037.whiteBe"
    "ar.NonResultsSQLRequest\032 .whiteBear.NonR"
    "esultsSQLResponse\022I\n\nResultsSQL\022\034.whiteB"
    "ear.ResultsSQLRequest\032\035.whiteBear.Result"
    "sSQLResponseB\003\200\001\001", 2577);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ddbms.proto", &protobuf_RegisterTypes);
  Predicate::default_instance_ = new Predicate();
  QueryNode::default_instance_ = new QueryNode();
  QueryTreeRequest::default_instance_ = new QueryTreeRequest();
  QueryTreeResponse::_default_errors_ =
      new ::std::string("NULL error message", 18);
  QueryTreeResponse::default_instance_ = new QueryTreeResponse();
  Column::default_instance_ = new Column();
  LoadTableRequest::default_instance_ = new LoadTableRequest();
  LoadTableResponse::_default_errors_ =
      new ::std::string("NULL error message", 18);
  LoadTableResponse::default_instance_ = new LoadTableResponse();
  QueryTempTableRequest::default_instance_ = new QueryTempTableRequest();
  QueryTempTableResponse::_default_errors_ =
      new ::std::string("NULL error message", 18);
  QueryTempTableResponse::default_instance_ = new QueryTempTableResponse();
  DeleteTempTableRequest::default_instance_ = new DeleteTempTableRequest();
  DeleteTempTableResponse::_default_errors_ =
      new ::std::string("NULL error message", 18);
  DeleteTempTableResponse::default_instance_ = new DeleteTempTableResponse();
  NonResultsSQLRequest::default_instance_ = new NonResultsSQLRequest();
  NonResultsSQLResponse::_default_errors_ =
      new ::std::string("NULL error message", 18);
  NonResultsSQLResponse::default_instance_ = new NonResultsSQLResponse();
  ResultsSQLRequest::default_instance_ = new ResultsSQLRequest();
  ResultsSQLResponse::_default_errors_ =
      new ::std::string("NULL error message", 18);
  ResultsSQLResponse::default_instance_ = new ResultsSQLResponse();
  Predicate::default_instance_->InitAsDefaultInstance();
  QueryNode::default_instance_->InitAsDefaultInstance();
  QueryTreeRequest::default_instance_->InitAsDefaultInstance();
  QueryTreeResponse::default_instance_->InitAsDefaultInstance();
  Column::default_instance_->InitAsDefaultInstance();
  LoadTableRequest::default_instance_->InitAsDefaultInstance();
  LoadTableResponse::default_instance_->InitAsDefaultInstance();
  QueryTempTableRequest::default_instance_->InitAsDefaultInstance();
  QueryTempTableResponse::default_instance_->InitAsDefaultInstance();
  DeleteTempTableRequest::default_instance_->InitAsDefaultInstance();
  DeleteTempTableResponse::default_instance_->InitAsDefaultInstance();
  NonResultsSQLRequest::default_instance_->InitAsDefaultInstance();
  NonResultsSQLResponse::default_instance_->InitAsDefaultInstance();
  ResultsSQLRequest::default_instance_->InitAsDefaultInstance();
  ResultsSQLResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ddbms_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ddbms_2eproto {
  StaticDescriptorInitializer_ddbms_2eproto() {
    protobuf_AddDesc_ddbms_2eproto();
  }
} static_descriptor_initializer_ddbms_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Predicate_OperationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Predicate_OperationType_descriptor_;
}
bool Predicate_OperationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Predicate_OperationType Predicate::JOIN;
const Predicate_OperationType Predicate::EQUAL;
const Predicate_OperationType Predicate::LESS;
const Predicate_OperationType Predicate::LESS_EQUAL;
const Predicate_OperationType Predicate::GREAT;
const Predicate_OperationType Predicate::GREAT_EQUAL;
const Predicate_OperationType Predicate::DEFAULT;
const Predicate_OperationType Predicate::OperationType_MIN;
const Predicate_OperationType Predicate::OperationType_MAX;
const int Predicate::OperationType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Predicate::kAttributeNameFieldNumber;
const int Predicate::kTableNameFieldNumber;
const int Predicate::kOperationTypeFieldNumber;
const int Predicate::kLeftOperationTypeFieldNumber;
const int Predicate::kRightValueFieldNumber;
const int Predicate::kLeftValueFieldNumber;
const int Predicate::kRightAttributeNameFieldNumber;
const int Predicate::kRightTableNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Predicate::Predicate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whiteBear.Predicate)
}

void Predicate::InitAsDefaultInstance() {
}

Predicate::Predicate(const Predicate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whiteBear.Predicate)
}

void Predicate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  attribute_name__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_type__ = 0;
  left_operation_type__ = 0;
  right_value__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  left_value__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_attribute_name__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_table_name__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Predicate::~Predicate() {
  // @@protoc_insertion_point(destructor:whiteBear.Predicate)
  SharedDtor();
}

void Predicate::SharedDtor() {
  attribute_name__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_value__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  left_value__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_attribute_name__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_table_name__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Predicate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Predicate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Predicate_descriptor_;
}

const Predicate& Predicate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddbms_2eproto();
  return *default_instance_;
}

Predicate* Predicate::default_instance_ = NULL;

Predicate* Predicate::New(::google::protobuf::Arena* arena) const {
  Predicate* n = new Predicate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Predicate::Clear() {
// @@protoc_insertion_point(message_clear_start:whiteBear.Predicate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Predicate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Predicate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(operation_type__, left_operation_type__);
    if (has_attribute_name_()) {
      attribute_name__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_table_name_()) {
      table_name__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_right_value_()) {
      right_value__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_left_value_()) {
      left_value__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_right_attribute_name_()) {
      right_attribute_name__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_right_table_name_()) {
      right_table_name__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Predicate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whiteBear.Predicate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string attribute_name_ = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attribute_name_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attribute_name_().data(), this->attribute_name_().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "whiteBear.Predicate.attribute_name_");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_table_name_;
        break;
      }

      // required string table_name_ = 2;
      case 2: {
        if (tag == 18) {
         parse_table_name_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_name_().data(), this->table_name_().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "whiteBear.Predicate.table_name_");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_operation_type_;
        break;
      }

      // required .whiteBear.Predicate.OperationType operation_type_ = 3;
      case 3: {
        if (tag == 24) {
         parse_operation_type_:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::whiteBear::Predicate_OperationType_IsValid(value)) {
            set_operation_type_(static_cast< ::whiteBear::Predicate_OperationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_left_operation_type_;
        break;
      }

      // required .whiteBear.Predicate.OperationType left_operation_type_ = 4;
      case 4: {
        if (tag == 32) {
         parse_left_operation_type_:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::whiteBear::Predicate_OperationType_IsValid(value)) {
            set_left_operation_type_(static_cast< ::whiteBear::Predicate_OperationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_right_value_;
        break;
      }

      // required string right_value_ = 5;
      case 5: {
        if (tag == 42) {
         parse_right_value_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_right_value_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->right_value_().data(), this->right_value_().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "whiteBear.Predicate.right_value_");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_left_value_;
        break;
      }

      // optional string left_value_ = 6;
      case 6: {
        if (tag == 50) {
         parse_left_value_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_left_value_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->left_value_().data(), this->left_value_().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "whiteBear.Predicate.left_value_");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_right_attribute_name_;
        break;
      }

      // optional string right_attribute_name_ = 7;
      case 7: {
        if (tag == 58) {
         parse_right_attribute_name_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_right_attribute_name_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->right_attribute_name_().data(), this->right_attribute_name_().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "whiteBear.Predicate.right_attribute_name_");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_right_table_name_;
        break;
      }

      // optional string right_table_name_ = 8;
      case 8: {
        if (tag == 66) {
         parse_right_table_name_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_right_table_name_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->right_table_name_().data(), this->right_table_name_().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "whiteBear.Predicate.right_table_name_");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whiteBear.Predicate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whiteBear.Predicate)
  return false;
#undef DO_
}

void Predicate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whiteBear.Predicate)
  // required string attribute_name_ = 1;
  if (has_attribute_name_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attribute_name_().data(), this->attribute_name_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.Predicate.attribute_name_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->attribute_name_(), output);
  }

  // required string table_name_ = 2;
  if (has_table_name_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name_().data(), this->table_name_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.Predicate.table_name_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table_name_(), output);
  }

  // required .whiteBear.Predicate.OperationType operation_type_ = 3;
  if (has_operation_type_()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->operation_type_(), output);
  }

  // required .whiteBear.Predicate.OperationType left_operation_type_ = 4;
  if (has_left_operation_type_()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->left_operation_type_(), output);
  }

  // required string right_value_ = 5;
  if (has_right_value_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->right_value_().data(), this->right_value_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.Predicate.right_value_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->right_value_(), output);
  }

  // optional string left_value_ = 6;
  if (has_left_value_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->left_value_().data(), this->left_value_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.Predicate.left_value_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->left_value_(), output);
  }

  // optional string right_attribute_name_ = 7;
  if (has_right_attribute_name_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->right_attribute_name_().data(), this->right_attribute_name_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.Predicate.right_attribute_name_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->right_attribute_name_(), output);
  }

  // optional string right_table_name_ = 8;
  if (has_right_table_name_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->right_table_name_().data(), this->right_table_name_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.Predicate.right_table_name_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->right_table_name_(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:whiteBear.Predicate)
}

::google::protobuf::uint8* Predicate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:whiteBear.Predicate)
  // required string attribute_name_ = 1;
  if (has_attribute_name_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attribute_name_().data(), this->attribute_name_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.Predicate.attribute_name_");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->attribute_name_(), target);
  }

  // required string table_name_ = 2;
  if (has_table_name_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name_().data(), this->table_name_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.Predicate.table_name_");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table_name_(), target);
  }

  // required .whiteBear.Predicate.OperationType operation_type_ = 3;
  if (has_operation_type_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->operation_type_(), target);
  }

  // required .whiteBear.Predicate.OperationType left_operation_type_ = 4;
  if (has_left_operation_type_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->left_operation_type_(), target);
  }

  // required string right_value_ = 5;
  if (has_right_value_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->right_value_().data(), this->right_value_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.Predicate.right_value_");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->right_value_(), target);
  }

  // optional string left_value_ = 6;
  if (has_left_value_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->left_value_().data(), this->left_value_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.Predicate.left_value_");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->left_value_(), target);
  }

  // optional string right_attribute_name_ = 7;
  if (has_right_attribute_name_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->right_attribute_name_().data(), this->right_attribute_name_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.Predicate.right_attribute_name_");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->right_attribute_name_(), target);
  }

  // optional string right_table_name_ = 8;
  if (has_right_table_name_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->right_table_name_().data(), this->right_table_name_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.Predicate.right_table_name_");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->right_table_name_(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:whiteBear.Predicate)
  return target;
}

int Predicate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:whiteBear.Predicate)
  int total_size = 0;

  if (has_attribute_name_()) {
    // required string attribute_name_ = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->attribute_name_());
  }

  if (has_table_name_()) {
    // required string table_name_ = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name_());
  }

  if (has_operation_type_()) {
    // required .whiteBear.Predicate.OperationType operation_type_ = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation_type_());
  }

  if (has_left_operation_type_()) {
    // required .whiteBear.Predicate.OperationType left_operation_type_ = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->left_operation_type_());
  }

  if (has_right_value_()) {
    // required string right_value_ = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->right_value_());
  }

  return total_size;
}
int Predicate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whiteBear.Predicate)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string attribute_name_ = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->attribute_name_());

    // required string table_name_ = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name_());

    // required .whiteBear.Predicate.OperationType operation_type_ = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation_type_());

    // required .whiteBear.Predicate.OperationType left_operation_type_ = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->left_operation_type_());

    // required string right_value_ = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->right_value_());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[5 / 32] & 224u) {
    // optional string left_value_ = 6;
    if (has_left_value_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->left_value_());
    }

    // optional string right_attribute_name_ = 7;
    if (has_right_attribute_name_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->right_attribute_name_());
    }

    // optional string right_table_name_ = 8;
    if (has_right_table_name_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->right_table_name_());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Predicate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:whiteBear.Predicate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Predicate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Predicate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:whiteBear.Predicate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:whiteBear.Predicate)
    MergeFrom(*source);
  }
}

void Predicate::MergeFrom(const Predicate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whiteBear.Predicate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attribute_name_()) {
      set_has_attribute_name_();
      attribute_name__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attribute_name__);
    }
    if (from.has_table_name_()) {
      set_has_table_name_();
      table_name__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name__);
    }
    if (from.has_operation_type_()) {
      set_operation_type_(from.operation_type_());
    }
    if (from.has_left_operation_type_()) {
      set_left_operation_type_(from.left_operation_type_());
    }
    if (from.has_right_value_()) {
      set_has_right_value_();
      right_value__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.right_value__);
    }
    if (from.has_left_value_()) {
      set_has_left_value_();
      left_value__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.left_value__);
    }
    if (from.has_right_attribute_name_()) {
      set_has_right_attribute_name_();
      right_attribute_name__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.right_attribute_name__);
    }
    if (from.has_right_table_name_()) {
      set_has_right_table_name_();
      right_table_name__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.right_table_name__);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Predicate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:whiteBear.Predicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Predicate::CopyFrom(const Predicate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whiteBear.Predicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Predicate::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Predicate::Swap(Predicate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Predicate::InternalSwap(Predicate* other) {
  attribute_name__.Swap(&other->attribute_name__);
  table_name__.Swap(&other->table_name__);
  std::swap(operation_type__, other->operation_type__);
  std::swap(left_operation_type__, other->left_operation_type__);
  right_value__.Swap(&other->right_value__);
  left_value__.Swap(&other->left_value__);
  right_attribute_name__.Swap(&other->right_attribute_name__);
  right_table_name__.Swap(&other->right_table_name__);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Predicate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Predicate_descriptor_;
  metadata.reflection = Predicate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Predicate

// required string attribute_name_ = 1;
bool Predicate::has_attribute_name_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Predicate::set_has_attribute_name_() {
  _has_bits_[0] |= 0x00000001u;
}
void Predicate::clear_has_attribute_name_() {
  _has_bits_[0] &= ~0x00000001u;
}
void Predicate::clear_attribute_name_() {
  attribute_name__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attribute_name_();
}
 const ::std::string& Predicate::attribute_name_() const {
  // @@protoc_insertion_point(field_get:whiteBear.Predicate.attribute_name_)
  return attribute_name__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Predicate::set_attribute_name_(const ::std::string& value) {
  set_has_attribute_name_();
  attribute_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.Predicate.attribute_name_)
}
 void Predicate::set_attribute_name_(const char* value) {
  set_has_attribute_name_();
  attribute_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.Predicate.attribute_name_)
}
 void Predicate::set_attribute_name_(const char* value, size_t size) {
  set_has_attribute_name_();
  attribute_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.Predicate.attribute_name_)
}
 ::std::string* Predicate::mutable_attribute_name_() {
  set_has_attribute_name_();
  // @@protoc_insertion_point(field_mutable:whiteBear.Predicate.attribute_name_)
  return attribute_name__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Predicate::release_attribute_name_() {
  // @@protoc_insertion_point(field_release:whiteBear.Predicate.attribute_name_)
  clear_has_attribute_name_();
  return attribute_name__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Predicate::set_allocated_attribute_name_(::std::string* attribute_name_) {
  if (attribute_name_ != NULL) {
    set_has_attribute_name_();
  } else {
    clear_has_attribute_name_();
  }
  attribute_name__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attribute_name_);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.Predicate.attribute_name_)
}

// required string table_name_ = 2;
bool Predicate::has_table_name_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Predicate::set_has_table_name_() {
  _has_bits_[0] |= 0x00000002u;
}
void Predicate::clear_has_table_name_() {
  _has_bits_[0] &= ~0x00000002u;
}
void Predicate::clear_table_name_() {
  table_name__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_name_();
}
 const ::std::string& Predicate::table_name_() const {
  // @@protoc_insertion_point(field_get:whiteBear.Predicate.table_name_)
  return table_name__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Predicate::set_table_name_(const ::std::string& value) {
  set_has_table_name_();
  table_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.Predicate.table_name_)
}
 void Predicate::set_table_name_(const char* value) {
  set_has_table_name_();
  table_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.Predicate.table_name_)
}
 void Predicate::set_table_name_(const char* value, size_t size) {
  set_has_table_name_();
  table_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.Predicate.table_name_)
}
 ::std::string* Predicate::mutable_table_name_() {
  set_has_table_name_();
  // @@protoc_insertion_point(field_mutable:whiteBear.Predicate.table_name_)
  return table_name__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Predicate::release_table_name_() {
  // @@protoc_insertion_point(field_release:whiteBear.Predicate.table_name_)
  clear_has_table_name_();
  return table_name__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Predicate::set_allocated_table_name_(::std::string* table_name_) {
  if (table_name_ != NULL) {
    set_has_table_name_();
  } else {
    clear_has_table_name_();
  }
  table_name__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name_);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.Predicate.table_name_)
}

// required .whiteBear.Predicate.OperationType operation_type_ = 3;
bool Predicate::has_operation_type_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Predicate::set_has_operation_type_() {
  _has_bits_[0] |= 0x00000004u;
}
void Predicate::clear_has_operation_type_() {
  _has_bits_[0] &= ~0x00000004u;
}
void Predicate::clear_operation_type_() {
  operation_type__ = 0;
  clear_has_operation_type_();
}
 ::whiteBear::Predicate_OperationType Predicate::operation_type_() const {
  // @@protoc_insertion_point(field_get:whiteBear.Predicate.operation_type_)
  return static_cast< ::whiteBear::Predicate_OperationType >(operation_type__);
}
 void Predicate::set_operation_type_(::whiteBear::Predicate_OperationType value) {
  assert(::whiteBear::Predicate_OperationType_IsValid(value));
  set_has_operation_type_();
  operation_type__ = value;
  // @@protoc_insertion_point(field_set:whiteBear.Predicate.operation_type_)
}

// required .whiteBear.Predicate.OperationType left_operation_type_ = 4;
bool Predicate::has_left_operation_type_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Predicate::set_has_left_operation_type_() {
  _has_bits_[0] |= 0x00000008u;
}
void Predicate::clear_has_left_operation_type_() {
  _has_bits_[0] &= ~0x00000008u;
}
void Predicate::clear_left_operation_type_() {
  left_operation_type__ = 0;
  clear_has_left_operation_type_();
}
 ::whiteBear::Predicate_OperationType Predicate::left_operation_type_() const {
  // @@protoc_insertion_point(field_get:whiteBear.Predicate.left_operation_type_)
  return static_cast< ::whiteBear::Predicate_OperationType >(left_operation_type__);
}
 void Predicate::set_left_operation_type_(::whiteBear::Predicate_OperationType value) {
  assert(::whiteBear::Predicate_OperationType_IsValid(value));
  set_has_left_operation_type_();
  left_operation_type__ = value;
  // @@protoc_insertion_point(field_set:whiteBear.Predicate.left_operation_type_)
}

// required string right_value_ = 5;
bool Predicate::has_right_value_() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Predicate::set_has_right_value_() {
  _has_bits_[0] |= 0x00000010u;
}
void Predicate::clear_has_right_value_() {
  _has_bits_[0] &= ~0x00000010u;
}
void Predicate::clear_right_value_() {
  right_value__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_right_value_();
}
 const ::std::string& Predicate::right_value_() const {
  // @@protoc_insertion_point(field_get:whiteBear.Predicate.right_value_)
  return right_value__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Predicate::set_right_value_(const ::std::string& value) {
  set_has_right_value_();
  right_value__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.Predicate.right_value_)
}
 void Predicate::set_right_value_(const char* value) {
  set_has_right_value_();
  right_value__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.Predicate.right_value_)
}
 void Predicate::set_right_value_(const char* value, size_t size) {
  set_has_right_value_();
  right_value__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.Predicate.right_value_)
}
 ::std::string* Predicate::mutable_right_value_() {
  set_has_right_value_();
  // @@protoc_insertion_point(field_mutable:whiteBear.Predicate.right_value_)
  return right_value__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Predicate::release_right_value_() {
  // @@protoc_insertion_point(field_release:whiteBear.Predicate.right_value_)
  clear_has_right_value_();
  return right_value__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Predicate::set_allocated_right_value_(::std::string* right_value_) {
  if (right_value_ != NULL) {
    set_has_right_value_();
  } else {
    clear_has_right_value_();
  }
  right_value__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), right_value_);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.Predicate.right_value_)
}

// optional string left_value_ = 6;
bool Predicate::has_left_value_() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Predicate::set_has_left_value_() {
  _has_bits_[0] |= 0x00000020u;
}
void Predicate::clear_has_left_value_() {
  _has_bits_[0] &= ~0x00000020u;
}
void Predicate::clear_left_value_() {
  left_value__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_left_value_();
}
 const ::std::string& Predicate::left_value_() const {
  // @@protoc_insertion_point(field_get:whiteBear.Predicate.left_value_)
  return left_value__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Predicate::set_left_value_(const ::std::string& value) {
  set_has_left_value_();
  left_value__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.Predicate.left_value_)
}
 void Predicate::set_left_value_(const char* value) {
  set_has_left_value_();
  left_value__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.Predicate.left_value_)
}
 void Predicate::set_left_value_(const char* value, size_t size) {
  set_has_left_value_();
  left_value__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.Predicate.left_value_)
}
 ::std::string* Predicate::mutable_left_value_() {
  set_has_left_value_();
  // @@protoc_insertion_point(field_mutable:whiteBear.Predicate.left_value_)
  return left_value__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Predicate::release_left_value_() {
  // @@protoc_insertion_point(field_release:whiteBear.Predicate.left_value_)
  clear_has_left_value_();
  return left_value__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Predicate::set_allocated_left_value_(::std::string* left_value_) {
  if (left_value_ != NULL) {
    set_has_left_value_();
  } else {
    clear_has_left_value_();
  }
  left_value__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), left_value_);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.Predicate.left_value_)
}

// optional string right_attribute_name_ = 7;
bool Predicate::has_right_attribute_name_() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Predicate::set_has_right_attribute_name_() {
  _has_bits_[0] |= 0x00000040u;
}
void Predicate::clear_has_right_attribute_name_() {
  _has_bits_[0] &= ~0x00000040u;
}
void Predicate::clear_right_attribute_name_() {
  right_attribute_name__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_right_attribute_name_();
}
 const ::std::string& Predicate::right_attribute_name_() const {
  // @@protoc_insertion_point(field_get:whiteBear.Predicate.right_attribute_name_)
  return right_attribute_name__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Predicate::set_right_attribute_name_(const ::std::string& value) {
  set_has_right_attribute_name_();
  right_attribute_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.Predicate.right_attribute_name_)
}
 void Predicate::set_right_attribute_name_(const char* value) {
  set_has_right_attribute_name_();
  right_attribute_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.Predicate.right_attribute_name_)
}
 void Predicate::set_right_attribute_name_(const char* value, size_t size) {
  set_has_right_attribute_name_();
  right_attribute_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.Predicate.right_attribute_name_)
}
 ::std::string* Predicate::mutable_right_attribute_name_() {
  set_has_right_attribute_name_();
  // @@protoc_insertion_point(field_mutable:whiteBear.Predicate.right_attribute_name_)
  return right_attribute_name__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Predicate::release_right_attribute_name_() {
  // @@protoc_insertion_point(field_release:whiteBear.Predicate.right_attribute_name_)
  clear_has_right_attribute_name_();
  return right_attribute_name__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Predicate::set_allocated_right_attribute_name_(::std::string* right_attribute_name_) {
  if (right_attribute_name_ != NULL) {
    set_has_right_attribute_name_();
  } else {
    clear_has_right_attribute_name_();
  }
  right_attribute_name__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), right_attribute_name_);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.Predicate.right_attribute_name_)
}

// optional string right_table_name_ = 8;
bool Predicate::has_right_table_name_() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Predicate::set_has_right_table_name_() {
  _has_bits_[0] |= 0x00000080u;
}
void Predicate::clear_has_right_table_name_() {
  _has_bits_[0] &= ~0x00000080u;
}
void Predicate::clear_right_table_name_() {
  right_table_name__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_right_table_name_();
}
 const ::std::string& Predicate::right_table_name_() const {
  // @@protoc_insertion_point(field_get:whiteBear.Predicate.right_table_name_)
  return right_table_name__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Predicate::set_right_table_name_(const ::std::string& value) {
  set_has_right_table_name_();
  right_table_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.Predicate.right_table_name_)
}
 void Predicate::set_right_table_name_(const char* value) {
  set_has_right_table_name_();
  right_table_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.Predicate.right_table_name_)
}
 void Predicate::set_right_table_name_(const char* value, size_t size) {
  set_has_right_table_name_();
  right_table_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.Predicate.right_table_name_)
}
 ::std::string* Predicate::mutable_right_table_name_() {
  set_has_right_table_name_();
  // @@protoc_insertion_point(field_mutable:whiteBear.Predicate.right_table_name_)
  return right_table_name__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Predicate::release_right_table_name_() {
  // @@protoc_insertion_point(field_release:whiteBear.Predicate.right_table_name_)
  clear_has_right_table_name_();
  return right_table_name__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Predicate::set_allocated_right_table_name_(::std::string* right_table_name_) {
  if (right_table_name_ != NULL) {
    set_has_right_table_name_();
  } else {
    clear_has_right_table_name_();
  }
  right_table_name__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), right_table_name_);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.Predicate.right_table_name_)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* QueryNode_NodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryNode_NodeType_descriptor_;
}
bool QueryNode_NodeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const QueryNode_NodeType QueryNode::PROJECTION;
const QueryNode_NodeType QueryNode::SELECTION;
const QueryNode_NodeType QueryNode::JOIN;
const QueryNode_NodeType QueryNode::UNION;
const QueryNode_NodeType QueryNode::DEFAULT;
const QueryNode_NodeType QueryNode::NodeType_MIN;
const QueryNode_NodeType QueryNode::NodeType_MAX;
const int QueryNode::NodeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryNode::kNodeTypeFieldNumber;
const int QueryNode::kSiteFieldNumber;
const int QueryNode::kTableNameFieldNumber;
const int QueryNode::kAttrNameFieldNumber;
const int QueryNode::kSelectPredicatesFieldNumber;
const int QueryNode::kJoinPredicateFieldNumber;
const int QueryNode::kParentFieldNumber;
const int QueryNode::kSonsFieldNumber;
const int QueryNode::kIsParentFieldNumber;
const int QueryNode::kIsLeafFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryNode::QueryNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whiteBear.QueryNode)
}

void QueryNode::InitAsDefaultInstance() {
}

QueryNode::QueryNode(const QueryNode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whiteBear.QueryNode)
}

void QueryNode::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_type__ = 0;
  site__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent__ = 0;
  is_parent__ = false;
  is_leaf__ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryNode::~QueryNode() {
  // @@protoc_insertion_point(destructor:whiteBear.QueryNode)
  SharedDtor();
}

void QueryNode::SharedDtor() {
  site__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void QueryNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryNode_descriptor_;
}

const QueryNode& QueryNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddbms_2eproto();
  return *default_instance_;
}

QueryNode* QueryNode::default_instance_ = NULL;

QueryNode* QueryNode::New(::google::protobuf::Arena* arena) const {
  QueryNode* n = new QueryNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryNode::Clear() {
// @@protoc_insertion_point(message_clear_start:whiteBear.QueryNode)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QueryNode, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QueryNode*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 71u) {
    ZR_(node_type__, parent__);
    if (has_site_()) {
      site__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_table_name_()) {
      table_name__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ZR_(is_parent__, is_leaf__);

#undef ZR_HELPER_
#undef ZR_

  attr_name__.Clear();
  select_predicates__.Clear();
  join_predicate__.Clear();
  sons__.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QueryNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whiteBear.QueryNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .whiteBear.QueryNode.NodeType node_type_ = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::whiteBear::QueryNode_NodeType_IsValid(value)) {
            set_node_type_(static_cast< ::whiteBear::QueryNode_NodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_site_;
        break;
      }

      // required string site_ = 2;
      case 2: {
        if (tag == 18) {
         parse_site_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_site_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->site_().data(), this->site_().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "whiteBear.QueryNode.site_");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_table_name_;
        break;
      }

      // required string table_name_ = 3;
      case 3: {
        if (tag == 26) {
         parse_table_name_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_name_().data(), this->table_name_().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "whiteBear.QueryNode.table_name_");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attr_name_;
        break;
      }

      // repeated string attr_name_ = 4;
      case 4: {
        if (tag == 34) {
         parse_attr_name_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_attr_name_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attr_name_(this->attr_name__size() - 1).data(),
            this->attr_name_(this->attr_name__size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "whiteBear.QueryNode.attr_name_");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attr_name_;
        if (input->ExpectTag(42)) goto parse_select_predicates_;
        break;
      }

      // repeated .whiteBear.Predicate select_predicates_ = 5;
      case 5: {
        if (tag == 42) {
         parse_select_predicates_:
          DO_(input->IncrementRecursionDepth());
         parse_loop_select_predicates_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_select_predicates_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_select_predicates_;
        if (input->ExpectTag(50)) goto parse_loop_join_predicate_;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .whiteBear.Predicate join_predicate_ = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_join_predicate_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_join_predicate_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_join_predicate_;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(56)) goto parse_parent_;
        break;
      }

      // required int32 parent_ = 7;
      case 7: {
        if (tag == 56) {
         parse_parent_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent__)));
          set_has_parent_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_sons_;
        break;
      }

      // repeated int32 sons_ = 8;
      case 8: {
        if (tag == 64) {
         parse_sons_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_sons_())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_sons_())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_sons_;
        if (input->ExpectTag(72)) goto parse_is_parent_;
        break;
      }

      // required bool is_parent_ = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_is_parent_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_parent__)));
          set_has_is_parent_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_is_leaf_;
        break;
      }

      // required bool is_leaf_ = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_is_leaf_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_leaf__)));
          set_has_is_leaf_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whiteBear.QueryNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whiteBear.QueryNode)
  return false;
#undef DO_
}

void QueryNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whiteBear.QueryNode)
  // required .whiteBear.QueryNode.NodeType node_type_ = 1;
  if (has_node_type_()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->node_type_(), output);
  }

  // required string site_ = 2;
  if (has_site_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->site_().data(), this->site_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.QueryNode.site_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->site_(), output);
  }

  // required string table_name_ = 3;
  if (has_table_name_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name_().data(), this->table_name_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.QueryNode.table_name_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->table_name_(), output);
  }

  // repeated string attr_name_ = 4;
  for (int i = 0; i < this->attr_name__size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attr_name_(i).data(), this->attr_name_(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.QueryNode.attr_name_");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->attr_name_(i), output);
  }

  // repeated .whiteBear.Predicate select_predicates_ = 5;
  for (unsigned int i = 0, n = this->select_predicates__size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->select_predicates_(i), output);
  }

  // repeated .whiteBear.Predicate join_predicate_ = 6;
  for (unsigned int i = 0, n = this->join_predicate__size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->join_predicate_(i), output);
  }

  // required int32 parent_ = 7;
  if (has_parent_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->parent_(), output);
  }

  // repeated int32 sons_ = 8;
  for (int i = 0; i < this->sons__size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->sons_(i), output);
  }

  // required bool is_parent_ = 9 [default = false];
  if (has_is_parent_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_parent_(), output);
  }

  // required bool is_leaf_ = 10 [default = false];
  if (has_is_leaf_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_leaf_(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:whiteBear.QueryNode)
}

::google::protobuf::uint8* QueryNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:whiteBear.QueryNode)
  // required .whiteBear.QueryNode.NodeType node_type_ = 1;
  if (has_node_type_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->node_type_(), target);
  }

  // required string site_ = 2;
  if (has_site_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->site_().data(), this->site_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.QueryNode.site_");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->site_(), target);
  }

  // required string table_name_ = 3;
  if (has_table_name_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name_().data(), this->table_name_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.QueryNode.table_name_");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->table_name_(), target);
  }

  // repeated string attr_name_ = 4;
  for (int i = 0; i < this->attr_name__size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attr_name_(i).data(), this->attr_name_(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.QueryNode.attr_name_");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->attr_name_(i), target);
  }

  // repeated .whiteBear.Predicate select_predicates_ = 5;
  for (unsigned int i = 0, n = this->select_predicates__size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->select_predicates_(i), false, target);
  }

  // repeated .whiteBear.Predicate join_predicate_ = 6;
  for (unsigned int i = 0, n = this->join_predicate__size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->join_predicate_(i), false, target);
  }

  // required int32 parent_ = 7;
  if (has_parent_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->parent_(), target);
  }

  // repeated int32 sons_ = 8;
  for (int i = 0; i < this->sons__size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->sons_(i), target);
  }

  // required bool is_parent_ = 9 [default = false];
  if (has_is_parent_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_parent_(), target);
  }

  // required bool is_leaf_ = 10 [default = false];
  if (has_is_leaf_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_leaf_(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:whiteBear.QueryNode)
  return target;
}

int QueryNode::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:whiteBear.QueryNode)
  int total_size = 0;

  if (has_node_type_()) {
    // required .whiteBear.QueryNode.NodeType node_type_ = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->node_type_());
  }

  if (has_site_()) {
    // required string site_ = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->site_());
  }

  if (has_table_name_()) {
    // required string table_name_ = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name_());
  }

  if (has_parent_()) {
    // required int32 parent_ = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->parent_());
  }

  if (has_is_parent_()) {
    // required bool is_parent_ = 9 [default = false];
    total_size += 1 + 1;
  }

  if (has_is_leaf_()) {
    // required bool is_leaf_ = 10 [default = false];
    total_size += 1 + 1;
  }

  return total_size;
}
int QueryNode::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whiteBear.QueryNode)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000347) ^ 0x00000347) == 0) {  // All required fields are present.
    // required .whiteBear.QueryNode.NodeType node_type_ = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->node_type_());

    // required string site_ = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->site_());

    // required string table_name_ = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name_());

    // required int32 parent_ = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->parent_());

    // required bool is_parent_ = 9 [default = false];
    total_size += 1 + 1;

    // required bool is_leaf_ = 10 [default = false];
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string attr_name_ = 4;
  total_size += 1 * this->attr_name__size();
  for (int i = 0; i < this->attr_name__size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->attr_name_(i));
  }

  // repeated .whiteBear.Predicate select_predicates_ = 5;
  total_size += 1 * this->select_predicates__size();
  for (int i = 0; i < this->select_predicates__size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->select_predicates_(i));
  }

  // repeated .whiteBear.Predicate join_predicate_ = 6;
  total_size += 1 * this->join_predicate__size();
  for (int i = 0; i < this->join_predicate__size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->join_predicate_(i));
  }

  // repeated int32 sons_ = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->sons__size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->sons_(i));
    }
    total_size += 1 * this->sons__size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:whiteBear.QueryNode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QueryNode* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:whiteBear.QueryNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:whiteBear.QueryNode)
    MergeFrom(*source);
  }
}

void QueryNode::MergeFrom(const QueryNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whiteBear.QueryNode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  attr_name__.MergeFrom(from.attr_name__);
  select_predicates__.MergeFrom(from.select_predicates__);
  join_predicate__.MergeFrom(from.join_predicate__);
  sons__.MergeFrom(from.sons__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_type_()) {
      set_node_type_(from.node_type_());
    }
    if (from.has_site_()) {
      set_has_site_();
      site__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.site__);
    }
    if (from.has_table_name_()) {
      set_has_table_name_();
      table_name__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name__);
    }
    if (from.has_parent_()) {
      set_parent_(from.parent_());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_parent_()) {
      set_is_parent_(from.is_parent_());
    }
    if (from.has_is_leaf_()) {
      set_is_leaf_(from.is_leaf_());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QueryNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:whiteBear.QueryNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryNode::CopyFrom(const QueryNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whiteBear.QueryNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000347) != 0x00000347) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->select_predicates_())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->join_predicate_())) return false;
  return true;
}

void QueryNode::Swap(QueryNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryNode::InternalSwap(QueryNode* other) {
  std::swap(node_type__, other->node_type__);
  site__.Swap(&other->site__);
  table_name__.Swap(&other->table_name__);
  attr_name__.UnsafeArenaSwap(&other->attr_name__);
  select_predicates__.UnsafeArenaSwap(&other->select_predicates__);
  join_predicate__.UnsafeArenaSwap(&other->join_predicate__);
  std::swap(parent__, other->parent__);
  sons__.UnsafeArenaSwap(&other->sons__);
  std::swap(is_parent__, other->is_parent__);
  std::swap(is_leaf__, other->is_leaf__);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryNode_descriptor_;
  metadata.reflection = QueryNode_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryNode

// required .whiteBear.QueryNode.NodeType node_type_ = 1;
bool QueryNode::has_node_type_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryNode::set_has_node_type_() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryNode::clear_has_node_type_() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryNode::clear_node_type_() {
  node_type__ = 0;
  clear_has_node_type_();
}
 ::whiteBear::QueryNode_NodeType QueryNode::node_type_() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryNode.node_type_)
  return static_cast< ::whiteBear::QueryNode_NodeType >(node_type__);
}
 void QueryNode::set_node_type_(::whiteBear::QueryNode_NodeType value) {
  assert(::whiteBear::QueryNode_NodeType_IsValid(value));
  set_has_node_type_();
  node_type__ = value;
  // @@protoc_insertion_point(field_set:whiteBear.QueryNode.node_type_)
}

// required string site_ = 2;
bool QueryNode::has_site_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QueryNode::set_has_site_() {
  _has_bits_[0] |= 0x00000002u;
}
void QueryNode::clear_has_site_() {
  _has_bits_[0] &= ~0x00000002u;
}
void QueryNode::clear_site_() {
  site__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_site_();
}
 const ::std::string& QueryNode::site_() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryNode.site_)
  return site__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryNode::set_site_(const ::std::string& value) {
  set_has_site_();
  site__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.QueryNode.site_)
}
 void QueryNode::set_site_(const char* value) {
  set_has_site_();
  site__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.QueryNode.site_)
}
 void QueryNode::set_site_(const char* value, size_t size) {
  set_has_site_();
  site__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.QueryNode.site_)
}
 ::std::string* QueryNode::mutable_site_() {
  set_has_site_();
  // @@protoc_insertion_point(field_mutable:whiteBear.QueryNode.site_)
  return site__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QueryNode::release_site_() {
  // @@protoc_insertion_point(field_release:whiteBear.QueryNode.site_)
  clear_has_site_();
  return site__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryNode::set_allocated_site_(::std::string* site_) {
  if (site_ != NULL) {
    set_has_site_();
  } else {
    clear_has_site_();
  }
  site__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), site_);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.QueryNode.site_)
}

// required string table_name_ = 3;
bool QueryNode::has_table_name_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QueryNode::set_has_table_name_() {
  _has_bits_[0] |= 0x00000004u;
}
void QueryNode::clear_has_table_name_() {
  _has_bits_[0] &= ~0x00000004u;
}
void QueryNode::clear_table_name_() {
  table_name__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_name_();
}
 const ::std::string& QueryNode::table_name_() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryNode.table_name_)
  return table_name__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryNode::set_table_name_(const ::std::string& value) {
  set_has_table_name_();
  table_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.QueryNode.table_name_)
}
 void QueryNode::set_table_name_(const char* value) {
  set_has_table_name_();
  table_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.QueryNode.table_name_)
}
 void QueryNode::set_table_name_(const char* value, size_t size) {
  set_has_table_name_();
  table_name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.QueryNode.table_name_)
}
 ::std::string* QueryNode::mutable_table_name_() {
  set_has_table_name_();
  // @@protoc_insertion_point(field_mutable:whiteBear.QueryNode.table_name_)
  return table_name__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QueryNode::release_table_name_() {
  // @@protoc_insertion_point(field_release:whiteBear.QueryNode.table_name_)
  clear_has_table_name_();
  return table_name__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryNode::set_allocated_table_name_(::std::string* table_name_) {
  if (table_name_ != NULL) {
    set_has_table_name_();
  } else {
    clear_has_table_name_();
  }
  table_name__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name_);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.QueryNode.table_name_)
}

// repeated string attr_name_ = 4;
int QueryNode::attr_name__size() const {
  return attr_name__.size();
}
void QueryNode::clear_attr_name_() {
  attr_name__.Clear();
}
 const ::std::string& QueryNode::attr_name_(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryNode.attr_name_)
  return attr_name__.Get(index);
}
 ::std::string* QueryNode::mutable_attr_name_(int index) {
  // @@protoc_insertion_point(field_mutable:whiteBear.QueryNode.attr_name_)
  return attr_name__.Mutable(index);
}
 void QueryNode::set_attr_name_(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:whiteBear.QueryNode.attr_name_)
  attr_name__.Mutable(index)->assign(value);
}
 void QueryNode::set_attr_name_(int index, const char* value) {
  attr_name__.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:whiteBear.QueryNode.attr_name_)
}
 void QueryNode::set_attr_name_(int index, const char* value, size_t size) {
  attr_name__.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:whiteBear.QueryNode.attr_name_)
}
 ::std::string* QueryNode::add_attr_name_() {
  // @@protoc_insertion_point(field_add_mutable:whiteBear.QueryNode.attr_name_)
  return attr_name__.Add();
}
 void QueryNode::add_attr_name_(const ::std::string& value) {
  attr_name__.Add()->assign(value);
  // @@protoc_insertion_point(field_add:whiteBear.QueryNode.attr_name_)
}
 void QueryNode::add_attr_name_(const char* value) {
  attr_name__.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:whiteBear.QueryNode.attr_name_)
}
 void QueryNode::add_attr_name_(const char* value, size_t size) {
  attr_name__.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:whiteBear.QueryNode.attr_name_)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryNode::attr_name_() const {
  // @@protoc_insertion_point(field_list:whiteBear.QueryNode.attr_name_)
  return attr_name__;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryNode::mutable_attr_name_() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.QueryNode.attr_name_)
  return &attr_name__;
}

// repeated .whiteBear.Predicate select_predicates_ = 5;
int QueryNode::select_predicates__size() const {
  return select_predicates__.size();
}
void QueryNode::clear_select_predicates_() {
  select_predicates__.Clear();
}
const ::whiteBear::Predicate& QueryNode::select_predicates_(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryNode.select_predicates_)
  return select_predicates__.Get(index);
}
::whiteBear::Predicate* QueryNode::mutable_select_predicates_(int index) {
  // @@protoc_insertion_point(field_mutable:whiteBear.QueryNode.select_predicates_)
  return select_predicates__.Mutable(index);
}
::whiteBear::Predicate* QueryNode::add_select_predicates_() {
  // @@protoc_insertion_point(field_add:whiteBear.QueryNode.select_predicates_)
  return select_predicates__.Add();
}
::google::protobuf::RepeatedPtrField< ::whiteBear::Predicate >*
QueryNode::mutable_select_predicates_() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.QueryNode.select_predicates_)
  return &select_predicates__;
}
const ::google::protobuf::RepeatedPtrField< ::whiteBear::Predicate >&
QueryNode::select_predicates_() const {
  // @@protoc_insertion_point(field_list:whiteBear.QueryNode.select_predicates_)
  return select_predicates__;
}

// repeated .whiteBear.Predicate join_predicate_ = 6;
int QueryNode::join_predicate__size() const {
  return join_predicate__.size();
}
void QueryNode::clear_join_predicate_() {
  join_predicate__.Clear();
}
const ::whiteBear::Predicate& QueryNode::join_predicate_(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryNode.join_predicate_)
  return join_predicate__.Get(index);
}
::whiteBear::Predicate* QueryNode::mutable_join_predicate_(int index) {
  // @@protoc_insertion_point(field_mutable:whiteBear.QueryNode.join_predicate_)
  return join_predicate__.Mutable(index);
}
::whiteBear::Predicate* QueryNode::add_join_predicate_() {
  // @@protoc_insertion_point(field_add:whiteBear.QueryNode.join_predicate_)
  return join_predicate__.Add();
}
::google::protobuf::RepeatedPtrField< ::whiteBear::Predicate >*
QueryNode::mutable_join_predicate_() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.QueryNode.join_predicate_)
  return &join_predicate__;
}
const ::google::protobuf::RepeatedPtrField< ::whiteBear::Predicate >&
QueryNode::join_predicate_() const {
  // @@protoc_insertion_point(field_list:whiteBear.QueryNode.join_predicate_)
  return join_predicate__;
}

// required int32 parent_ = 7;
bool QueryNode::has_parent_() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void QueryNode::set_has_parent_() {
  _has_bits_[0] |= 0x00000040u;
}
void QueryNode::clear_has_parent_() {
  _has_bits_[0] &= ~0x00000040u;
}
void QueryNode::clear_parent_() {
  parent__ = 0;
  clear_has_parent_();
}
 ::google::protobuf::int32 QueryNode::parent_() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryNode.parent_)
  return parent__;
}
 void QueryNode::set_parent_(::google::protobuf::int32 value) {
  set_has_parent_();
  parent__ = value;
  // @@protoc_insertion_point(field_set:whiteBear.QueryNode.parent_)
}

// repeated int32 sons_ = 8;
int QueryNode::sons__size() const {
  return sons__.size();
}
void QueryNode::clear_sons_() {
  sons__.Clear();
}
 ::google::protobuf::int32 QueryNode::sons_(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryNode.sons_)
  return sons__.Get(index);
}
 void QueryNode::set_sons_(int index, ::google::protobuf::int32 value) {
  sons__.Set(index, value);
  // @@protoc_insertion_point(field_set:whiteBear.QueryNode.sons_)
}
 void QueryNode::add_sons_(::google::protobuf::int32 value) {
  sons__.Add(value);
  // @@protoc_insertion_point(field_add:whiteBear.QueryNode.sons_)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QueryNode::sons_() const {
  // @@protoc_insertion_point(field_list:whiteBear.QueryNode.sons_)
  return sons__;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QueryNode::mutable_sons_() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.QueryNode.sons_)
  return &sons__;
}

// required bool is_parent_ = 9 [default = false];
bool QueryNode::has_is_parent_() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void QueryNode::set_has_is_parent_() {
  _has_bits_[0] |= 0x00000100u;
}
void QueryNode::clear_has_is_parent_() {
  _has_bits_[0] &= ~0x00000100u;
}
void QueryNode::clear_is_parent_() {
  is_parent__ = false;
  clear_has_is_parent_();
}
 bool QueryNode::is_parent_() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryNode.is_parent_)
  return is_parent__;
}
 void QueryNode::set_is_parent_(bool value) {
  set_has_is_parent_();
  is_parent__ = value;
  // @@protoc_insertion_point(field_set:whiteBear.QueryNode.is_parent_)
}

// required bool is_leaf_ = 10 [default = false];
bool QueryNode::has_is_leaf_() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void QueryNode::set_has_is_leaf_() {
  _has_bits_[0] |= 0x00000200u;
}
void QueryNode::clear_has_is_leaf_() {
  _has_bits_[0] &= ~0x00000200u;
}
void QueryNode::clear_is_leaf_() {
  is_leaf__ = false;
  clear_has_is_leaf_();
}
 bool QueryNode::is_leaf_() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryNode.is_leaf_)
  return is_leaf__;
}
 void QueryNode::set_is_leaf_(bool value) {
  set_has_is_leaf_();
  is_leaf__ = value;
  // @@protoc_insertion_point(field_set:whiteBear.QueryNode.is_leaf_)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryTreeRequest::kNFieldNumber;
const int QueryTreeRequest::kRootIndexFieldNumber;
const int QueryTreeRequest::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryTreeRequest::QueryTreeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whiteBear.QueryTreeRequest)
}

void QueryTreeRequest::InitAsDefaultInstance() {
}

QueryTreeRequest::QueryTreeRequest(const QueryTreeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whiteBear.QueryTreeRequest)
}

void QueryTreeRequest::SharedCtor() {
  _cached_size_ = 0;
  n_ = 0;
  root_index_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryTreeRequest::~QueryTreeRequest() {
  // @@protoc_insertion_point(destructor:whiteBear.QueryTreeRequest)
  SharedDtor();
}

void QueryTreeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryTreeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryTreeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryTreeRequest_descriptor_;
}

const QueryTreeRequest& QueryTreeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddbms_2eproto();
  return *default_instance_;
}

QueryTreeRequest* QueryTreeRequest::default_instance_ = NULL;

QueryTreeRequest* QueryTreeRequest::New(::google::protobuf::Arena* arena) const {
  QueryTreeRequest* n = new QueryTreeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryTreeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:whiteBear.QueryTreeRequest)
  if (_has_bits_[0 / 32] & 3u) {
    n_ = 0;
    root_index_ = -1;
  }
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QueryTreeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whiteBear.QueryTreeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 n = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_)));
          set_has_n();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_root_index;
        break;
      }

      // required int32 root_index = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_root_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &root_index_)));
          set_has_root_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nodes;
        break;
      }

      // repeated .whiteBear.QueryNode nodes = 3;
      case 3: {
        if (tag == 26) {
         parse_nodes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_nodes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whiteBear.QueryTreeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whiteBear.QueryTreeRequest)
  return false;
#undef DO_
}

void QueryTreeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whiteBear.QueryTreeRequest)
  // required int32 n = 1 [default = 0];
  if (has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->n(), output);
  }

  // required int32 root_index = 2 [default = -1];
  if (has_root_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->root_index(), output);
  }

  // repeated .whiteBear.QueryNode nodes = 3;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->nodes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:whiteBear.QueryTreeRequest)
}

::google::protobuf::uint8* QueryTreeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:whiteBear.QueryTreeRequest)
  // required int32 n = 1 [default = 0];
  if (has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->n(), target);
  }

  // required int32 root_index = 2 [default = -1];
  if (has_root_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->root_index(), target);
  }

  // repeated .whiteBear.QueryNode nodes = 3;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->nodes(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:whiteBear.QueryTreeRequest)
  return target;
}

int QueryTreeRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:whiteBear.QueryTreeRequest)
  int total_size = 0;

  if (has_n()) {
    // required int32 n = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->n());
  }

  if (has_root_index()) {
    // required int32 root_index = 2 [default = -1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->root_index());
  }

  return total_size;
}
int QueryTreeRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whiteBear.QueryTreeRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 n = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->n());

    // required int32 root_index = 2 [default = -1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->root_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .whiteBear.QueryNode nodes = 3;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryTreeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:whiteBear.QueryTreeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QueryTreeRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryTreeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:whiteBear.QueryTreeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:whiteBear.QueryTreeRequest)
    MergeFrom(*source);
  }
}

void QueryTreeRequest::MergeFrom(const QueryTreeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whiteBear.QueryTreeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  nodes_.MergeFrom(from.nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_n()) {
      set_n(from.n());
    }
    if (from.has_root_index()) {
      set_root_index(from.root_index());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QueryTreeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:whiteBear.QueryTreeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryTreeRequest::CopyFrom(const QueryTreeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whiteBear.QueryTreeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTreeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->nodes())) return false;
  return true;
}

void QueryTreeRequest::Swap(QueryTreeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryTreeRequest::InternalSwap(QueryTreeRequest* other) {
  std::swap(n_, other->n_);
  std::swap(root_index_, other->root_index_);
  nodes_.UnsafeArenaSwap(&other->nodes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryTreeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryTreeRequest_descriptor_;
  metadata.reflection = QueryTreeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryTreeRequest

// required int32 n = 1 [default = 0];
bool QueryTreeRequest::has_n() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryTreeRequest::set_has_n() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryTreeRequest::clear_has_n() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryTreeRequest::clear_n() {
  n_ = 0;
  clear_has_n();
}
 ::google::protobuf::int32 QueryTreeRequest::n() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryTreeRequest.n)
  return n_;
}
 void QueryTreeRequest::set_n(::google::protobuf::int32 value) {
  set_has_n();
  n_ = value;
  // @@protoc_insertion_point(field_set:whiteBear.QueryTreeRequest.n)
}

// required int32 root_index = 2 [default = -1];
bool QueryTreeRequest::has_root_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QueryTreeRequest::set_has_root_index() {
  _has_bits_[0] |= 0x00000002u;
}
void QueryTreeRequest::clear_has_root_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void QueryTreeRequest::clear_root_index() {
  root_index_ = -1;
  clear_has_root_index();
}
 ::google::protobuf::int32 QueryTreeRequest::root_index() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryTreeRequest.root_index)
  return root_index_;
}
 void QueryTreeRequest::set_root_index(::google::protobuf::int32 value) {
  set_has_root_index();
  root_index_ = value;
  // @@protoc_insertion_point(field_set:whiteBear.QueryTreeRequest.root_index)
}

// repeated .whiteBear.QueryNode nodes = 3;
int QueryTreeRequest::nodes_size() const {
  return nodes_.size();
}
void QueryTreeRequest::clear_nodes() {
  nodes_.Clear();
}
const ::whiteBear::QueryNode& QueryTreeRequest::nodes(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryTreeRequest.nodes)
  return nodes_.Get(index);
}
::whiteBear::QueryNode* QueryTreeRequest::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:whiteBear.QueryTreeRequest.nodes)
  return nodes_.Mutable(index);
}
::whiteBear::QueryNode* QueryTreeRequest::add_nodes() {
  // @@protoc_insertion_point(field_add:whiteBear.QueryTreeRequest.nodes)
  return nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::whiteBear::QueryNode >*
QueryTreeRequest::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.QueryTreeRequest.nodes)
  return &nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::whiteBear::QueryNode >&
QueryTreeRequest::nodes() const {
  // @@protoc_insertion_point(field_list:whiteBear.QueryTreeRequest.nodes)
  return nodes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* QueryTreeResponse::_default_errors_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryTreeResponse::kSuccessFieldNumber;
const int QueryTreeResponse::kErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryTreeResponse::QueryTreeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whiteBear.QueryTreeResponse)
}

void QueryTreeResponse::InitAsDefaultInstance() {
}

QueryTreeResponse::QueryTreeResponse(const QueryTreeResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whiteBear.QueryTreeResponse)
}

void QueryTreeResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  success_ = true;
  errors_.UnsafeSetDefault(_default_errors_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryTreeResponse::~QueryTreeResponse() {
  // @@protoc_insertion_point(destructor:whiteBear.QueryTreeResponse)
  SharedDtor();
}

void QueryTreeResponse::SharedDtor() {
  errors_.DestroyNoArena(_default_errors_);
  if (this != default_instance_) {
  }
}

void QueryTreeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryTreeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryTreeResponse_descriptor_;
}

const QueryTreeResponse& QueryTreeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddbms_2eproto();
  return *default_instance_;
}

QueryTreeResponse* QueryTreeResponse::default_instance_ = NULL;

QueryTreeResponse* QueryTreeResponse::New(::google::protobuf::Arena* arena) const {
  QueryTreeResponse* n = new QueryTreeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryTreeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:whiteBear.QueryTreeResponse)
  if (_has_bits_[0 / 32] & 3u) {
    success_ = true;
    if (has_errors()) {
      errors_.ClearToDefaultNoArena(_default_errors_);
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QueryTreeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whiteBear.QueryTreeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1 [default = true];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errors;
        break;
      }

      // optional string errors = 2 [default = "NULL error message"];
      case 2: {
        if (tag == 18) {
         parse_errors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errors()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errors().data(), this->errors().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "whiteBear.QueryTreeResponse.errors");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whiteBear.QueryTreeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whiteBear.QueryTreeResponse)
  return false;
#undef DO_
}

void QueryTreeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whiteBear.QueryTreeResponse)
  // required bool success = 1 [default = true];
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional string errors = 2 [default = "NULL error message"];
  if (has_errors()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errors().data(), this->errors().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.QueryTreeResponse.errors");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errors(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:whiteBear.QueryTreeResponse)
}

::google::protobuf::uint8* QueryTreeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:whiteBear.QueryTreeResponse)
  // required bool success = 1 [default = true];
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional string errors = 2 [default = "NULL error message"];
  if (has_errors()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errors().data(), this->errors().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.QueryTreeResponse.errors");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errors(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:whiteBear.QueryTreeResponse)
  return target;
}

int QueryTreeResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whiteBear.QueryTreeResponse)
  int total_size = 0;

  // required bool success = 1 [default = true];
  if (has_success()) {
    total_size += 1 + 1;
  }
  // optional string errors = 2 [default = "NULL error message"];
  if (has_errors()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errors());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryTreeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:whiteBear.QueryTreeResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QueryTreeResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryTreeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:whiteBear.QueryTreeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:whiteBear.QueryTreeResponse)
    MergeFrom(*source);
  }
}

void QueryTreeResponse::MergeFrom(const QueryTreeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whiteBear.QueryTreeResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_errors()) {
      set_has_errors();
      errors_.AssignWithDefault(_default_errors_, from.errors_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QueryTreeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:whiteBear.QueryTreeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryTreeResponse::CopyFrom(const QueryTreeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whiteBear.QueryTreeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTreeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QueryTreeResponse::Swap(QueryTreeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryTreeResponse::InternalSwap(QueryTreeResponse* other) {
  std::swap(success_, other->success_);
  errors_.Swap(&other->errors_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryTreeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryTreeResponse_descriptor_;
  metadata.reflection = QueryTreeResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryTreeResponse

// required bool success = 1 [default = true];
bool QueryTreeResponse::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryTreeResponse::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryTreeResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryTreeResponse::clear_success() {
  success_ = true;
  clear_has_success();
}
 bool QueryTreeResponse::success() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryTreeResponse.success)
  return success_;
}
 void QueryTreeResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:whiteBear.QueryTreeResponse.success)
}

// optional string errors = 2 [default = "NULL error message"];
bool QueryTreeResponse::has_errors() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QueryTreeResponse::set_has_errors() {
  _has_bits_[0] |= 0x00000002u;
}
void QueryTreeResponse::clear_has_errors() {
  _has_bits_[0] &= ~0x00000002u;
}
void QueryTreeResponse::clear_errors() {
  errors_.ClearToDefaultNoArena(_default_errors_);
  clear_has_errors();
}
 const ::std::string& QueryTreeResponse::errors() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryTreeResponse.errors)
  return errors_.GetNoArena(_default_errors_);
}
 void QueryTreeResponse::set_errors(const ::std::string& value) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_, value);
  // @@protoc_insertion_point(field_set:whiteBear.QueryTreeResponse.errors)
}
 void QueryTreeResponse::set_errors(const char* value) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.QueryTreeResponse.errors)
}
 void QueryTreeResponse::set_errors(const char* value, size_t size) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.QueryTreeResponse.errors)
}
 ::std::string* QueryTreeResponse::mutable_errors() {
  set_has_errors();
  // @@protoc_insertion_point(field_mutable:whiteBear.QueryTreeResponse.errors)
  return errors_.MutableNoArena(_default_errors_);
}
 ::std::string* QueryTreeResponse::release_errors() {
  // @@protoc_insertion_point(field_release:whiteBear.QueryTreeResponse.errors)
  clear_has_errors();
  return errors_.ReleaseNoArena(_default_errors_);
}
 void QueryTreeResponse::set_allocated_errors(::std::string* errors) {
  if (errors != NULL) {
    set_has_errors();
  } else {
    clear_has_errors();
  }
  errors_.SetAllocatedNoArena(_default_errors_, errors);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.QueryTreeResponse.errors)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Column_AttributeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Column_AttributeType_descriptor_;
}
bool Column_AttributeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Column_AttributeType Column::BOOL;
const Column_AttributeType Column::INT;
const Column_AttributeType Column::STRING;
const Column_AttributeType Column::FLOAT;
const Column_AttributeType Column::DOUBLE;
const Column_AttributeType Column::AttributeType_MIN;
const Column_AttributeType Column::AttributeType_MAX;
const int Column::AttributeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Column::kAttrMetaFieldNumber;
const int Column::kAttrTypeFieldNumber;
const int Column::kAttrValuesFloatFieldNumber;
const int Column::kAttrValuesDoubleFieldNumber;
const int Column::kAttrValuesBoolFieldNumber;
const int Column::kAttrValuesStringFieldNumber;
const int Column::kAttrValuesIntFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Column::Column()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whiteBear.Column)
}

void Column::InitAsDefaultInstance() {
}

Column::Column(const Column& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whiteBear.Column)
}

void Column::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  attr_meta_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attr_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Column::~Column() {
  // @@protoc_insertion_point(destructor:whiteBear.Column)
  SharedDtor();
}

void Column::SharedDtor() {
  attr_meta_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Column::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Column::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Column_descriptor_;
}

const Column& Column::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddbms_2eproto();
  return *default_instance_;
}

Column* Column::default_instance_ = NULL;

Column* Column::New(::google::protobuf::Arena* arena) const {
  Column* n = new Column;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Column::Clear() {
// @@protoc_insertion_point(message_clear_start:whiteBear.Column)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_attr_meta()) {
      attr_meta_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    attr_type_ = 0;
  }
  attr_values_float_.Clear();
  attr_values_double_.Clear();
  attr_values_bool_.Clear();
  attr_values_string_.Clear();
  attr_values_int_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Column::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whiteBear.Column)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string attr_meta = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attr_meta()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attr_meta().data(), this->attr_meta().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "whiteBear.Column.attr_meta");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attr_type;
        break;
      }

      // required .whiteBear.Column.AttributeType attr_type = 2;
      case 2: {
        if (tag == 16) {
         parse_attr_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::whiteBear::Column_AttributeType_IsValid(value)) {
            set_attr_type(static_cast< ::whiteBear::Column_AttributeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_attr_values_float;
        break;
      }

      // repeated float attr_values_float = 3;
      case 3: {
        if (tag == 29) {
         parse_attr_values_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_attr_values_float())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_attr_values_float())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_attr_values_float;
        if (input->ExpectTag(33)) goto parse_attr_values_double;
        break;
      }

      // repeated double attr_values_double = 4;
      case 4: {
        if (tag == 33) {
         parse_attr_values_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_attr_values_double())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_attr_values_double())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_attr_values_double;
        if (input->ExpectTag(40)) goto parse_attr_values_bool;
        break;
      }

      // repeated bool attr_values_bool = 5;
      case 5: {
        if (tag == 40) {
         parse_attr_values_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 40, input, this->mutable_attr_values_bool())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_attr_values_bool())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_attr_values_bool;
        if (input->ExpectTag(50)) goto parse_attr_values_string;
        break;
      }

      // repeated string attr_values_string = 6;
      case 6: {
        if (tag == 50) {
         parse_attr_values_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_attr_values_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attr_values_string(this->attr_values_string_size() - 1).data(),
            this->attr_values_string(this->attr_values_string_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "whiteBear.Column.attr_values_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_attr_values_string;
        if (input->ExpectTag(56)) goto parse_attr_values_int;
        break;
      }

      // repeated int32 attr_values_int = 7;
      case 7: {
        if (tag == 56) {
         parse_attr_values_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_attr_values_int())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attr_values_int())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_attr_values_int;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whiteBear.Column)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whiteBear.Column)
  return false;
#undef DO_
}

void Column::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whiteBear.Column)
  // required string attr_meta = 1;
  if (has_attr_meta()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attr_meta().data(), this->attr_meta().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.Column.attr_meta");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->attr_meta(), output);
  }

  // required .whiteBear.Column.AttributeType attr_type = 2;
  if (has_attr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->attr_type(), output);
  }

  // repeated float attr_values_float = 3;
  for (int i = 0; i < this->attr_values_float_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->attr_values_float(i), output);
  }

  // repeated double attr_values_double = 4;
  for (int i = 0; i < this->attr_values_double_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->attr_values_double(i), output);
  }

  // repeated bool attr_values_bool = 5;
  for (int i = 0; i < this->attr_values_bool_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      5, this->attr_values_bool(i), output);
  }

  // repeated string attr_values_string = 6;
  for (int i = 0; i < this->attr_values_string_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attr_values_string(i).data(), this->attr_values_string(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.Column.attr_values_string");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->attr_values_string(i), output);
  }

  // repeated int32 attr_values_int = 7;
  for (int i = 0; i < this->attr_values_int_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->attr_values_int(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:whiteBear.Column)
}

::google::protobuf::uint8* Column::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:whiteBear.Column)
  // required string attr_meta = 1;
  if (has_attr_meta()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attr_meta().data(), this->attr_meta().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.Column.attr_meta");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->attr_meta(), target);
  }

  // required .whiteBear.Column.AttributeType attr_type = 2;
  if (has_attr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->attr_type(), target);
  }

  // repeated float attr_values_float = 3;
  for (int i = 0; i < this->attr_values_float_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->attr_values_float(i), target);
  }

  // repeated double attr_values_double = 4;
  for (int i = 0; i < this->attr_values_double_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->attr_values_double(i), target);
  }

  // repeated bool attr_values_bool = 5;
  for (int i = 0; i < this->attr_values_bool_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(5, this->attr_values_bool(i), target);
  }

  // repeated string attr_values_string = 6;
  for (int i = 0; i < this->attr_values_string_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attr_values_string(i).data(), this->attr_values_string(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.Column.attr_values_string");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->attr_values_string(i), target);
  }

  // repeated int32 attr_values_int = 7;
  for (int i = 0; i < this->attr_values_int_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->attr_values_int(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:whiteBear.Column)
  return target;
}

int Column::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:whiteBear.Column)
  int total_size = 0;

  if (has_attr_meta()) {
    // required string attr_meta = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->attr_meta());
  }

  if (has_attr_type()) {
    // required .whiteBear.Column.AttributeType attr_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->attr_type());
  }

  return total_size;
}
int Column::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whiteBear.Column)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string attr_meta = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->attr_meta());

    // required .whiteBear.Column.AttributeType attr_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->attr_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated float attr_values_float = 3;
  {
    int data_size = 0;
    data_size = 4 * this->attr_values_float_size();
    total_size += 1 * this->attr_values_float_size() + data_size;
  }

  // repeated double attr_values_double = 4;
  {
    int data_size = 0;
    data_size = 8 * this->attr_values_double_size();
    total_size += 1 * this->attr_values_double_size() + data_size;
  }

  // repeated bool attr_values_bool = 5;
  {
    int data_size = 0;
    data_size = 1 * this->attr_values_bool_size();
    total_size += 1 * this->attr_values_bool_size() + data_size;
  }

  // repeated string attr_values_string = 6;
  total_size += 1 * this->attr_values_string_size();
  for (int i = 0; i < this->attr_values_string_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->attr_values_string(i));
  }

  // repeated int32 attr_values_int = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->attr_values_int_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->attr_values_int(i));
    }
    total_size += 1 * this->attr_values_int_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Column::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:whiteBear.Column)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Column* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Column>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:whiteBear.Column)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:whiteBear.Column)
    MergeFrom(*source);
  }
}

void Column::MergeFrom(const Column& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whiteBear.Column)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  attr_values_float_.MergeFrom(from.attr_values_float_);
  attr_values_double_.MergeFrom(from.attr_values_double_);
  attr_values_bool_.MergeFrom(from.attr_values_bool_);
  attr_values_string_.MergeFrom(from.attr_values_string_);
  attr_values_int_.MergeFrom(from.attr_values_int_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attr_meta()) {
      set_has_attr_meta();
      attr_meta_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attr_meta_);
    }
    if (from.has_attr_type()) {
      set_attr_type(from.attr_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Column::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:whiteBear.Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Column::CopyFrom(const Column& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whiteBear.Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Column::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Column::Swap(Column* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Column::InternalSwap(Column* other) {
  attr_meta_.Swap(&other->attr_meta_);
  std::swap(attr_type_, other->attr_type_);
  attr_values_float_.UnsafeArenaSwap(&other->attr_values_float_);
  attr_values_double_.UnsafeArenaSwap(&other->attr_values_double_);
  attr_values_bool_.UnsafeArenaSwap(&other->attr_values_bool_);
  attr_values_string_.UnsafeArenaSwap(&other->attr_values_string_);
  attr_values_int_.UnsafeArenaSwap(&other->attr_values_int_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Column::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Column_descriptor_;
  metadata.reflection = Column_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Column

// required string attr_meta = 1;
bool Column::has_attr_meta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Column::set_has_attr_meta() {
  _has_bits_[0] |= 0x00000001u;
}
void Column::clear_has_attr_meta() {
  _has_bits_[0] &= ~0x00000001u;
}
void Column::clear_attr_meta() {
  attr_meta_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attr_meta();
}
 const ::std::string& Column::attr_meta() const {
  // @@protoc_insertion_point(field_get:whiteBear.Column.attr_meta)
  return attr_meta_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Column::set_attr_meta(const ::std::string& value) {
  set_has_attr_meta();
  attr_meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.Column.attr_meta)
}
 void Column::set_attr_meta(const char* value) {
  set_has_attr_meta();
  attr_meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.Column.attr_meta)
}
 void Column::set_attr_meta(const char* value, size_t size) {
  set_has_attr_meta();
  attr_meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.Column.attr_meta)
}
 ::std::string* Column::mutable_attr_meta() {
  set_has_attr_meta();
  // @@protoc_insertion_point(field_mutable:whiteBear.Column.attr_meta)
  return attr_meta_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Column::release_attr_meta() {
  // @@protoc_insertion_point(field_release:whiteBear.Column.attr_meta)
  clear_has_attr_meta();
  return attr_meta_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Column::set_allocated_attr_meta(::std::string* attr_meta) {
  if (attr_meta != NULL) {
    set_has_attr_meta();
  } else {
    clear_has_attr_meta();
  }
  attr_meta_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attr_meta);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.Column.attr_meta)
}

// required .whiteBear.Column.AttributeType attr_type = 2;
bool Column::has_attr_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Column::set_has_attr_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Column::clear_has_attr_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Column::clear_attr_type() {
  attr_type_ = 0;
  clear_has_attr_type();
}
 ::whiteBear::Column_AttributeType Column::attr_type() const {
  // @@protoc_insertion_point(field_get:whiteBear.Column.attr_type)
  return static_cast< ::whiteBear::Column_AttributeType >(attr_type_);
}
 void Column::set_attr_type(::whiteBear::Column_AttributeType value) {
  assert(::whiteBear::Column_AttributeType_IsValid(value));
  set_has_attr_type();
  attr_type_ = value;
  // @@protoc_insertion_point(field_set:whiteBear.Column.attr_type)
}

// repeated float attr_values_float = 3;
int Column::attr_values_float_size() const {
  return attr_values_float_.size();
}
void Column::clear_attr_values_float() {
  attr_values_float_.Clear();
}
 float Column::attr_values_float(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.Column.attr_values_float)
  return attr_values_float_.Get(index);
}
 void Column::set_attr_values_float(int index, float value) {
  attr_values_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:whiteBear.Column.attr_values_float)
}
 void Column::add_attr_values_float(float value) {
  attr_values_float_.Add(value);
  // @@protoc_insertion_point(field_add:whiteBear.Column.attr_values_float)
}
 const ::google::protobuf::RepeatedField< float >&
Column::attr_values_float() const {
  // @@protoc_insertion_point(field_list:whiteBear.Column.attr_values_float)
  return attr_values_float_;
}
 ::google::protobuf::RepeatedField< float >*
Column::mutable_attr_values_float() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.Column.attr_values_float)
  return &attr_values_float_;
}

// repeated double attr_values_double = 4;
int Column::attr_values_double_size() const {
  return attr_values_double_.size();
}
void Column::clear_attr_values_double() {
  attr_values_double_.Clear();
}
 double Column::attr_values_double(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.Column.attr_values_double)
  return attr_values_double_.Get(index);
}
 void Column::set_attr_values_double(int index, double value) {
  attr_values_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:whiteBear.Column.attr_values_double)
}
 void Column::add_attr_values_double(double value) {
  attr_values_double_.Add(value);
  // @@protoc_insertion_point(field_add:whiteBear.Column.attr_values_double)
}
 const ::google::protobuf::RepeatedField< double >&
Column::attr_values_double() const {
  // @@protoc_insertion_point(field_list:whiteBear.Column.attr_values_double)
  return attr_values_double_;
}
 ::google::protobuf::RepeatedField< double >*
Column::mutable_attr_values_double() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.Column.attr_values_double)
  return &attr_values_double_;
}

// repeated bool attr_values_bool = 5;
int Column::attr_values_bool_size() const {
  return attr_values_bool_.size();
}
void Column::clear_attr_values_bool() {
  attr_values_bool_.Clear();
}
 bool Column::attr_values_bool(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.Column.attr_values_bool)
  return attr_values_bool_.Get(index);
}
 void Column::set_attr_values_bool(int index, bool value) {
  attr_values_bool_.Set(index, value);
  // @@protoc_insertion_point(field_set:whiteBear.Column.attr_values_bool)
}
 void Column::add_attr_values_bool(bool value) {
  attr_values_bool_.Add(value);
  // @@protoc_insertion_point(field_add:whiteBear.Column.attr_values_bool)
}
 const ::google::protobuf::RepeatedField< bool >&
Column::attr_values_bool() const {
  // @@protoc_insertion_point(field_list:whiteBear.Column.attr_values_bool)
  return attr_values_bool_;
}
 ::google::protobuf::RepeatedField< bool >*
Column::mutable_attr_values_bool() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.Column.attr_values_bool)
  return &attr_values_bool_;
}

// repeated string attr_values_string = 6;
int Column::attr_values_string_size() const {
  return attr_values_string_.size();
}
void Column::clear_attr_values_string() {
  attr_values_string_.Clear();
}
 const ::std::string& Column::attr_values_string(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.Column.attr_values_string)
  return attr_values_string_.Get(index);
}
 ::std::string* Column::mutable_attr_values_string(int index) {
  // @@protoc_insertion_point(field_mutable:whiteBear.Column.attr_values_string)
  return attr_values_string_.Mutable(index);
}
 void Column::set_attr_values_string(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:whiteBear.Column.attr_values_string)
  attr_values_string_.Mutable(index)->assign(value);
}
 void Column::set_attr_values_string(int index, const char* value) {
  attr_values_string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:whiteBear.Column.attr_values_string)
}
 void Column::set_attr_values_string(int index, const char* value, size_t size) {
  attr_values_string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:whiteBear.Column.attr_values_string)
}
 ::std::string* Column::add_attr_values_string() {
  // @@protoc_insertion_point(field_add_mutable:whiteBear.Column.attr_values_string)
  return attr_values_string_.Add();
}
 void Column::add_attr_values_string(const ::std::string& value) {
  attr_values_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:whiteBear.Column.attr_values_string)
}
 void Column::add_attr_values_string(const char* value) {
  attr_values_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:whiteBear.Column.attr_values_string)
}
 void Column::add_attr_values_string(const char* value, size_t size) {
  attr_values_string_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:whiteBear.Column.attr_values_string)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Column::attr_values_string() const {
  // @@protoc_insertion_point(field_list:whiteBear.Column.attr_values_string)
  return attr_values_string_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Column::mutable_attr_values_string() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.Column.attr_values_string)
  return &attr_values_string_;
}

// repeated int32 attr_values_int = 7;
int Column::attr_values_int_size() const {
  return attr_values_int_.size();
}
void Column::clear_attr_values_int() {
  attr_values_int_.Clear();
}
 ::google::protobuf::int32 Column::attr_values_int(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.Column.attr_values_int)
  return attr_values_int_.Get(index);
}
 void Column::set_attr_values_int(int index, ::google::protobuf::int32 value) {
  attr_values_int_.Set(index, value);
  // @@protoc_insertion_point(field_set:whiteBear.Column.attr_values_int)
}
 void Column::add_attr_values_int(::google::protobuf::int32 value) {
  attr_values_int_.Add(value);
  // @@protoc_insertion_point(field_add:whiteBear.Column.attr_values_int)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Column::attr_values_int() const {
  // @@protoc_insertion_point(field_list:whiteBear.Column.attr_values_int)
  return attr_values_int_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Column::mutable_attr_values_int() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.Column.attr_values_int)
  return &attr_values_int_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoadTableRequest::kTableNameFieldNumber;
const int LoadTableRequest::kMetaNumsFieldNumber;
const int LoadTableRequest::kColumnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoadTableRequest::LoadTableRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whiteBear.LoadTableRequest)
}

void LoadTableRequest::InitAsDefaultInstance() {
}

LoadTableRequest::LoadTableRequest(const LoadTableRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whiteBear.LoadTableRequest)
}

void LoadTableRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meta_nums_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadTableRequest::~LoadTableRequest() {
  // @@protoc_insertion_point(destructor:whiteBear.LoadTableRequest)
  SharedDtor();
}

void LoadTableRequest::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LoadTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadTableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadTableRequest_descriptor_;
}

const LoadTableRequest& LoadTableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddbms_2eproto();
  return *default_instance_;
}

LoadTableRequest* LoadTableRequest::default_instance_ = NULL;

LoadTableRequest* LoadTableRequest::New(::google::protobuf::Arena* arena) const {
  LoadTableRequest* n = new LoadTableRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoadTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:whiteBear.LoadTableRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_table_name()) {
      table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    meta_nums_ = 0;
  }
  columns_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LoadTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whiteBear.LoadTableRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "whiteBear.LoadTableRequest.table_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_meta_nums;
        break;
      }

      // required int32 meta_nums = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_meta_nums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &meta_nums_)));
          set_has_meta_nums();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_columns;
        break;
      }

      // repeated .whiteBear.Column columns = 3;
      case 3: {
        if (tag == 26) {
         parse_columns:
          DO_(input->IncrementRecursionDepth());
         parse_loop_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_columns;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whiteBear.LoadTableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whiteBear.LoadTableRequest)
  return false;
#undef DO_
}

void LoadTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whiteBear.LoadTableRequest)
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.LoadTableRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // required int32 meta_nums = 2 [default = 0];
  if (has_meta_nums()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->meta_nums(), output);
  }

  // repeated .whiteBear.Column columns = 3;
  for (unsigned int i = 0, n = this->columns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->columns(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:whiteBear.LoadTableRequest)
}

::google::protobuf::uint8* LoadTableRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:whiteBear.LoadTableRequest)
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.LoadTableRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // required int32 meta_nums = 2 [default = 0];
  if (has_meta_nums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->meta_nums(), target);
  }

  // repeated .whiteBear.Column columns = 3;
  for (unsigned int i = 0, n = this->columns_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->columns(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:whiteBear.LoadTableRequest)
  return target;
}

int LoadTableRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:whiteBear.LoadTableRequest)
  int total_size = 0;

  if (has_table_name()) {
    // required string table_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  if (has_meta_nums()) {
    // required int32 meta_nums = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->meta_nums());
  }

  return total_size;
}
int LoadTableRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whiteBear.LoadTableRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string table_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());

    // required int32 meta_nums = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->meta_nums());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .whiteBear.Column columns = 3;
  total_size += 1 * this->columns_size();
  for (int i = 0; i < this->columns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columns(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:whiteBear.LoadTableRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoadTableRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoadTableRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:whiteBear.LoadTableRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:whiteBear.LoadTableRequest)
    MergeFrom(*source);
  }
}

void LoadTableRequest::MergeFrom(const LoadTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whiteBear.LoadTableRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  columns_.MergeFrom(from.columns_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_has_table_name();
      table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
    }
    if (from.has_meta_nums()) {
      set_meta_nums(from.meta_nums());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LoadTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:whiteBear.LoadTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadTableRequest::CopyFrom(const LoadTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whiteBear.LoadTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadTableRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->columns())) return false;
  return true;
}

void LoadTableRequest::Swap(LoadTableRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoadTableRequest::InternalSwap(LoadTableRequest* other) {
  table_name_.Swap(&other->table_name_);
  std::swap(meta_nums_, other->meta_nums_);
  columns_.UnsafeArenaSwap(&other->columns_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoadTableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadTableRequest_descriptor_;
  metadata.reflection = LoadTableRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoadTableRequest

// required string table_name = 1;
bool LoadTableRequest::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoadTableRequest::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
void LoadTableRequest::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoadTableRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_name();
}
 const ::std::string& LoadTableRequest::table_name() const {
  // @@protoc_insertion_point(field_get:whiteBear.LoadTableRequest.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoadTableRequest::set_table_name(const ::std::string& value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.LoadTableRequest.table_name)
}
 void LoadTableRequest::set_table_name(const char* value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.LoadTableRequest.table_name)
}
 void LoadTableRequest::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.LoadTableRequest.table_name)
}
 ::std::string* LoadTableRequest::mutable_table_name() {
  set_has_table_name();
  // @@protoc_insertion_point(field_mutable:whiteBear.LoadTableRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoadTableRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:whiteBear.LoadTableRequest.table_name)
  clear_has_table_name();
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoadTableRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    set_has_table_name();
  } else {
    clear_has_table_name();
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.LoadTableRequest.table_name)
}

// required int32 meta_nums = 2 [default = 0];
bool LoadTableRequest::has_meta_nums() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoadTableRequest::set_has_meta_nums() {
  _has_bits_[0] |= 0x00000002u;
}
void LoadTableRequest::clear_has_meta_nums() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoadTableRequest::clear_meta_nums() {
  meta_nums_ = 0;
  clear_has_meta_nums();
}
 ::google::protobuf::int32 LoadTableRequest::meta_nums() const {
  // @@protoc_insertion_point(field_get:whiteBear.LoadTableRequest.meta_nums)
  return meta_nums_;
}
 void LoadTableRequest::set_meta_nums(::google::protobuf::int32 value) {
  set_has_meta_nums();
  meta_nums_ = value;
  // @@protoc_insertion_point(field_set:whiteBear.LoadTableRequest.meta_nums)
}

// repeated .whiteBear.Column columns = 3;
int LoadTableRequest::columns_size() const {
  return columns_.size();
}
void LoadTableRequest::clear_columns() {
  columns_.Clear();
}
const ::whiteBear::Column& LoadTableRequest::columns(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.LoadTableRequest.columns)
  return columns_.Get(index);
}
::whiteBear::Column* LoadTableRequest::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:whiteBear.LoadTableRequest.columns)
  return columns_.Mutable(index);
}
::whiteBear::Column* LoadTableRequest::add_columns() {
  // @@protoc_insertion_point(field_add:whiteBear.LoadTableRequest.columns)
  return columns_.Add();
}
::google::protobuf::RepeatedPtrField< ::whiteBear::Column >*
LoadTableRequest::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.LoadTableRequest.columns)
  return &columns_;
}
const ::google::protobuf::RepeatedPtrField< ::whiteBear::Column >&
LoadTableRequest::columns() const {
  // @@protoc_insertion_point(field_list:whiteBear.LoadTableRequest.columns)
  return columns_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* LoadTableResponse::_default_errors_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoadTableResponse::kSuccessFieldNumber;
const int LoadTableResponse::kErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoadTableResponse::LoadTableResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whiteBear.LoadTableResponse)
}

void LoadTableResponse::InitAsDefaultInstance() {
}

LoadTableResponse::LoadTableResponse(const LoadTableResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whiteBear.LoadTableResponse)
}

void LoadTableResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  success_ = false;
  errors_.UnsafeSetDefault(_default_errors_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadTableResponse::~LoadTableResponse() {
  // @@protoc_insertion_point(destructor:whiteBear.LoadTableResponse)
  SharedDtor();
}

void LoadTableResponse::SharedDtor() {
  errors_.DestroyNoArena(_default_errors_);
  if (this != default_instance_) {
  }
}

void LoadTableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadTableResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadTableResponse_descriptor_;
}

const LoadTableResponse& LoadTableResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddbms_2eproto();
  return *default_instance_;
}

LoadTableResponse* LoadTableResponse::default_instance_ = NULL;

LoadTableResponse* LoadTableResponse::New(::google::protobuf::Arena* arena) const {
  LoadTableResponse* n = new LoadTableResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoadTableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:whiteBear.LoadTableResponse)
  if (_has_bits_[0 / 32] & 3u) {
    success_ = false;
    if (has_errors()) {
      errors_.ClearToDefaultNoArena(_default_errors_);
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LoadTableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whiteBear.LoadTableResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errors;
        break;
      }

      // optional string errors = 2 [default = "NULL error message"];
      case 2: {
        if (tag == 18) {
         parse_errors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errors()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errors().data(), this->errors().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "whiteBear.LoadTableResponse.errors");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whiteBear.LoadTableResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whiteBear.LoadTableResponse)
  return false;
#undef DO_
}

void LoadTableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whiteBear.LoadTableResponse)
  // required bool success = 1 [default = false];
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional string errors = 2 [default = "NULL error message"];
  if (has_errors()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errors().data(), this->errors().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.LoadTableResponse.errors");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errors(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:whiteBear.LoadTableResponse)
}

::google::protobuf::uint8* LoadTableResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:whiteBear.LoadTableResponse)
  // required bool success = 1 [default = false];
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional string errors = 2 [default = "NULL error message"];
  if (has_errors()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errors().data(), this->errors().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.LoadTableResponse.errors");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errors(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:whiteBear.LoadTableResponse)
  return target;
}

int LoadTableResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whiteBear.LoadTableResponse)
  int total_size = 0;

  // required bool success = 1 [default = false];
  if (has_success()) {
    total_size += 1 + 1;
  }
  // optional string errors = 2 [default = "NULL error message"];
  if (has_errors()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errors());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadTableResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:whiteBear.LoadTableResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoadTableResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoadTableResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:whiteBear.LoadTableResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:whiteBear.LoadTableResponse)
    MergeFrom(*source);
  }
}

void LoadTableResponse::MergeFrom(const LoadTableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whiteBear.LoadTableResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_errors()) {
      set_has_errors();
      errors_.AssignWithDefault(_default_errors_, from.errors_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LoadTableResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:whiteBear.LoadTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadTableResponse::CopyFrom(const LoadTableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whiteBear.LoadTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadTableResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoadTableResponse::Swap(LoadTableResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoadTableResponse::InternalSwap(LoadTableResponse* other) {
  std::swap(success_, other->success_);
  errors_.Swap(&other->errors_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoadTableResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadTableResponse_descriptor_;
  metadata.reflection = LoadTableResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoadTableResponse

// required bool success = 1 [default = false];
bool LoadTableResponse::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoadTableResponse::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
void LoadTableResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoadTableResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
 bool LoadTableResponse::success() const {
  // @@protoc_insertion_point(field_get:whiteBear.LoadTableResponse.success)
  return success_;
}
 void LoadTableResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:whiteBear.LoadTableResponse.success)
}

// optional string errors = 2 [default = "NULL error message"];
bool LoadTableResponse::has_errors() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoadTableResponse::set_has_errors() {
  _has_bits_[0] |= 0x00000002u;
}
void LoadTableResponse::clear_has_errors() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoadTableResponse::clear_errors() {
  errors_.ClearToDefaultNoArena(_default_errors_);
  clear_has_errors();
}
 const ::std::string& LoadTableResponse::errors() const {
  // @@protoc_insertion_point(field_get:whiteBear.LoadTableResponse.errors)
  return errors_.GetNoArena(_default_errors_);
}
 void LoadTableResponse::set_errors(const ::std::string& value) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_, value);
  // @@protoc_insertion_point(field_set:whiteBear.LoadTableResponse.errors)
}
 void LoadTableResponse::set_errors(const char* value) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.LoadTableResponse.errors)
}
 void LoadTableResponse::set_errors(const char* value, size_t size) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.LoadTableResponse.errors)
}
 ::std::string* LoadTableResponse::mutable_errors() {
  set_has_errors();
  // @@protoc_insertion_point(field_mutable:whiteBear.LoadTableResponse.errors)
  return errors_.MutableNoArena(_default_errors_);
}
 ::std::string* LoadTableResponse::release_errors() {
  // @@protoc_insertion_point(field_release:whiteBear.LoadTableResponse.errors)
  clear_has_errors();
  return errors_.ReleaseNoArena(_default_errors_);
}
 void LoadTableResponse::set_allocated_errors(::std::string* errors) {
  if (errors != NULL) {
    set_has_errors();
  } else {
    clear_has_errors();
  }
  errors_.SetAllocatedNoArena(_default_errors_, errors);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.LoadTableResponse.errors)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryTempTableRequest::kTableNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryTempTableRequest::QueryTempTableRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whiteBear.QueryTempTableRequest)
}

void QueryTempTableRequest::InitAsDefaultInstance() {
}

QueryTempTableRequest::QueryTempTableRequest(const QueryTempTableRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whiteBear.QueryTempTableRequest)
}

void QueryTempTableRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryTempTableRequest::~QueryTempTableRequest() {
  // @@protoc_insertion_point(destructor:whiteBear.QueryTempTableRequest)
  SharedDtor();
}

void QueryTempTableRequest::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void QueryTempTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryTempTableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryTempTableRequest_descriptor_;
}

const QueryTempTableRequest& QueryTempTableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddbms_2eproto();
  return *default_instance_;
}

QueryTempTableRequest* QueryTempTableRequest::default_instance_ = NULL;

QueryTempTableRequest* QueryTempTableRequest::New(::google::protobuf::Arena* arena) const {
  QueryTempTableRequest* n = new QueryTempTableRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryTempTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:whiteBear.QueryTempTableRequest)
  if (has_table_name()) {
    table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QueryTempTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whiteBear.QueryTempTableRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "whiteBear.QueryTempTableRequest.table_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whiteBear.QueryTempTableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whiteBear.QueryTempTableRequest)
  return false;
#undef DO_
}

void QueryTempTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whiteBear.QueryTempTableRequest)
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.QueryTempTableRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:whiteBear.QueryTempTableRequest)
}

::google::protobuf::uint8* QueryTempTableRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:whiteBear.QueryTempTableRequest)
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.QueryTempTableRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:whiteBear.QueryTempTableRequest)
  return target;
}

int QueryTempTableRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whiteBear.QueryTempTableRequest)
  int total_size = 0;

  // required string table_name = 1;
  if (has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryTempTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:whiteBear.QueryTempTableRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QueryTempTableRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryTempTableRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:whiteBear.QueryTempTableRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:whiteBear.QueryTempTableRequest)
    MergeFrom(*source);
  }
}

void QueryTempTableRequest::MergeFrom(const QueryTempTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whiteBear.QueryTempTableRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_has_table_name();
      table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QueryTempTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:whiteBear.QueryTempTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryTempTableRequest::CopyFrom(const QueryTempTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whiteBear.QueryTempTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTempTableRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QueryTempTableRequest::Swap(QueryTempTableRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryTempTableRequest::InternalSwap(QueryTempTableRequest* other) {
  table_name_.Swap(&other->table_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryTempTableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryTempTableRequest_descriptor_;
  metadata.reflection = QueryTempTableRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryTempTableRequest

// required string table_name = 1;
bool QueryTempTableRequest::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryTempTableRequest::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryTempTableRequest::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryTempTableRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_name();
}
 const ::std::string& QueryTempTableRequest::table_name() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryTempTableRequest.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryTempTableRequest::set_table_name(const ::std::string& value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.QueryTempTableRequest.table_name)
}
 void QueryTempTableRequest::set_table_name(const char* value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.QueryTempTableRequest.table_name)
}
 void QueryTempTableRequest::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.QueryTempTableRequest.table_name)
}
 ::std::string* QueryTempTableRequest::mutable_table_name() {
  set_has_table_name();
  // @@protoc_insertion_point(field_mutable:whiteBear.QueryTempTableRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QueryTempTableRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:whiteBear.QueryTempTableRequest.table_name)
  clear_has_table_name();
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryTempTableRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    set_has_table_name();
  } else {
    clear_has_table_name();
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.QueryTempTableRequest.table_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* QueryTempTableResponse::_default_errors_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryTempTableResponse::kMetaNumsFieldNumber;
const int QueryTempTableResponse::kColumnsFieldNumber;
const int QueryTempTableResponse::kSuccessFieldNumber;
const int QueryTempTableResponse::kErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryTempTableResponse::QueryTempTableResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whiteBear.QueryTempTableResponse)
}

void QueryTempTableResponse::InitAsDefaultInstance() {
}

QueryTempTableResponse::QueryTempTableResponse(const QueryTempTableResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whiteBear.QueryTempTableResponse)
}

void QueryTempTableResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  meta_nums_ = 0;
  success_ = false;
  errors_.UnsafeSetDefault(_default_errors_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryTempTableResponse::~QueryTempTableResponse() {
  // @@protoc_insertion_point(destructor:whiteBear.QueryTempTableResponse)
  SharedDtor();
}

void QueryTempTableResponse::SharedDtor() {
  errors_.DestroyNoArena(_default_errors_);
  if (this != default_instance_) {
  }
}

void QueryTempTableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryTempTableResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryTempTableResponse_descriptor_;
}

const QueryTempTableResponse& QueryTempTableResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddbms_2eproto();
  return *default_instance_;
}

QueryTempTableResponse* QueryTempTableResponse::default_instance_ = NULL;

QueryTempTableResponse* QueryTempTableResponse::New(::google::protobuf::Arena* arena) const {
  QueryTempTableResponse* n = new QueryTempTableResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryTempTableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:whiteBear.QueryTempTableResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QueryTempTableResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QueryTempTableResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 13u) {
    ZR_(meta_nums_, success_);
    if (has_errors()) {
      errors_.ClearToDefaultNoArena(_default_errors_);
    }
  }

#undef ZR_HELPER_
#undef ZR_

  columns_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QueryTempTableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whiteBear.QueryTempTableResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 meta_nums = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &meta_nums_)));
          set_has_meta_nums();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_columns;
        break;
      }

      // repeated .whiteBear.Column columns = 2;
      case 2: {
        if (tag == 18) {
         parse_columns:
          DO_(input->IncrementRecursionDepth());
         parse_loop_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_columns;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_success;
        break;
      }

      // required bool success = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_errors;
        break;
      }

      // optional string errors = 4 [default = "NULL error message"];
      case 4: {
        if (tag == 34) {
         parse_errors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errors()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errors().data(), this->errors().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "whiteBear.QueryTempTableResponse.errors");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whiteBear.QueryTempTableResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whiteBear.QueryTempTableResponse)
  return false;
#undef DO_
}

void QueryTempTableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whiteBear.QueryTempTableResponse)
  // required int32 meta_nums = 1 [default = 0];
  if (has_meta_nums()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->meta_nums(), output);
  }

  // repeated .whiteBear.Column columns = 2;
  for (unsigned int i = 0, n = this->columns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->columns(i), output);
  }

  // required bool success = 3 [default = false];
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->success(), output);
  }

  // optional string errors = 4 [default = "NULL error message"];
  if (has_errors()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errors().data(), this->errors().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.QueryTempTableResponse.errors");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->errors(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:whiteBear.QueryTempTableResponse)
}

::google::protobuf::uint8* QueryTempTableResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:whiteBear.QueryTempTableResponse)
  // required int32 meta_nums = 1 [default = 0];
  if (has_meta_nums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->meta_nums(), target);
  }

  // repeated .whiteBear.Column columns = 2;
  for (unsigned int i = 0, n = this->columns_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->columns(i), false, target);
  }

  // required bool success = 3 [default = false];
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->success(), target);
  }

  // optional string errors = 4 [default = "NULL error message"];
  if (has_errors()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errors().data(), this->errors().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.QueryTempTableResponse.errors");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->errors(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:whiteBear.QueryTempTableResponse)
  return target;
}

int QueryTempTableResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:whiteBear.QueryTempTableResponse)
  int total_size = 0;

  if (has_meta_nums()) {
    // required int32 meta_nums = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->meta_nums());
  }

  if (has_success()) {
    // required bool success = 3 [default = false];
    total_size += 1 + 1;
  }

  return total_size;
}
int QueryTempTableResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whiteBear.QueryTempTableResponse)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required int32 meta_nums = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->meta_nums());

    // required bool success = 3 [default = false];
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string errors = 4 [default = "NULL error message"];
  if (has_errors()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errors());
  }

  // repeated .whiteBear.Column columns = 2;
  total_size += 1 * this->columns_size();
  for (int i = 0; i < this->columns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columns(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryTempTableResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:whiteBear.QueryTempTableResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QueryTempTableResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryTempTableResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:whiteBear.QueryTempTableResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:whiteBear.QueryTempTableResponse)
    MergeFrom(*source);
  }
}

void QueryTempTableResponse::MergeFrom(const QueryTempTableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whiteBear.QueryTempTableResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  columns_.MergeFrom(from.columns_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_meta_nums()) {
      set_meta_nums(from.meta_nums());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_errors()) {
      set_has_errors();
      errors_.AssignWithDefault(_default_errors_, from.errors_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QueryTempTableResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:whiteBear.QueryTempTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryTempTableResponse::CopyFrom(const QueryTempTableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whiteBear.QueryTempTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTempTableResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->columns())) return false;
  return true;
}

void QueryTempTableResponse::Swap(QueryTempTableResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryTempTableResponse::InternalSwap(QueryTempTableResponse* other) {
  std::swap(meta_nums_, other->meta_nums_);
  columns_.UnsafeArenaSwap(&other->columns_);
  std::swap(success_, other->success_);
  errors_.Swap(&other->errors_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryTempTableResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryTempTableResponse_descriptor_;
  metadata.reflection = QueryTempTableResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryTempTableResponse

// required int32 meta_nums = 1 [default = 0];
bool QueryTempTableResponse::has_meta_nums() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryTempTableResponse::set_has_meta_nums() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryTempTableResponse::clear_has_meta_nums() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryTempTableResponse::clear_meta_nums() {
  meta_nums_ = 0;
  clear_has_meta_nums();
}
 ::google::protobuf::int32 QueryTempTableResponse::meta_nums() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryTempTableResponse.meta_nums)
  return meta_nums_;
}
 void QueryTempTableResponse::set_meta_nums(::google::protobuf::int32 value) {
  set_has_meta_nums();
  meta_nums_ = value;
  // @@protoc_insertion_point(field_set:whiteBear.QueryTempTableResponse.meta_nums)
}

// repeated .whiteBear.Column columns = 2;
int QueryTempTableResponse::columns_size() const {
  return columns_.size();
}
void QueryTempTableResponse::clear_columns() {
  columns_.Clear();
}
const ::whiteBear::Column& QueryTempTableResponse::columns(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryTempTableResponse.columns)
  return columns_.Get(index);
}
::whiteBear::Column* QueryTempTableResponse::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:whiteBear.QueryTempTableResponse.columns)
  return columns_.Mutable(index);
}
::whiteBear::Column* QueryTempTableResponse::add_columns() {
  // @@protoc_insertion_point(field_add:whiteBear.QueryTempTableResponse.columns)
  return columns_.Add();
}
::google::protobuf::RepeatedPtrField< ::whiteBear::Column >*
QueryTempTableResponse::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.QueryTempTableResponse.columns)
  return &columns_;
}
const ::google::protobuf::RepeatedPtrField< ::whiteBear::Column >&
QueryTempTableResponse::columns() const {
  // @@protoc_insertion_point(field_list:whiteBear.QueryTempTableResponse.columns)
  return columns_;
}

// required bool success = 3 [default = false];
bool QueryTempTableResponse::has_success() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QueryTempTableResponse::set_has_success() {
  _has_bits_[0] |= 0x00000004u;
}
void QueryTempTableResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000004u;
}
void QueryTempTableResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
 bool QueryTempTableResponse::success() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryTempTableResponse.success)
  return success_;
}
 void QueryTempTableResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:whiteBear.QueryTempTableResponse.success)
}

// optional string errors = 4 [default = "NULL error message"];
bool QueryTempTableResponse::has_errors() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QueryTempTableResponse::set_has_errors() {
  _has_bits_[0] |= 0x00000008u;
}
void QueryTempTableResponse::clear_has_errors() {
  _has_bits_[0] &= ~0x00000008u;
}
void QueryTempTableResponse::clear_errors() {
  errors_.ClearToDefaultNoArena(_default_errors_);
  clear_has_errors();
}
 const ::std::string& QueryTempTableResponse::errors() const {
  // @@protoc_insertion_point(field_get:whiteBear.QueryTempTableResponse.errors)
  return errors_.GetNoArena(_default_errors_);
}
 void QueryTempTableResponse::set_errors(const ::std::string& value) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_, value);
  // @@protoc_insertion_point(field_set:whiteBear.QueryTempTableResponse.errors)
}
 void QueryTempTableResponse::set_errors(const char* value) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.QueryTempTableResponse.errors)
}
 void QueryTempTableResponse::set_errors(const char* value, size_t size) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.QueryTempTableResponse.errors)
}
 ::std::string* QueryTempTableResponse::mutable_errors() {
  set_has_errors();
  // @@protoc_insertion_point(field_mutable:whiteBear.QueryTempTableResponse.errors)
  return errors_.MutableNoArena(_default_errors_);
}
 ::std::string* QueryTempTableResponse::release_errors() {
  // @@protoc_insertion_point(field_release:whiteBear.QueryTempTableResponse.errors)
  clear_has_errors();
  return errors_.ReleaseNoArena(_default_errors_);
}
 void QueryTempTableResponse::set_allocated_errors(::std::string* errors) {
  if (errors != NULL) {
    set_has_errors();
  } else {
    clear_has_errors();
  }
  errors_.SetAllocatedNoArena(_default_errors_, errors);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.QueryTempTableResponse.errors)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteTempTableRequest::kTableNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteTempTableRequest::DeleteTempTableRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whiteBear.DeleteTempTableRequest)
}

void DeleteTempTableRequest::InitAsDefaultInstance() {
}

DeleteTempTableRequest::DeleteTempTableRequest(const DeleteTempTableRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whiteBear.DeleteTempTableRequest)
}

void DeleteTempTableRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteTempTableRequest::~DeleteTempTableRequest() {
  // @@protoc_insertion_point(destructor:whiteBear.DeleteTempTableRequest)
  SharedDtor();
}

void DeleteTempTableRequest::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DeleteTempTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteTempTableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteTempTableRequest_descriptor_;
}

const DeleteTempTableRequest& DeleteTempTableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddbms_2eproto();
  return *default_instance_;
}

DeleteTempTableRequest* DeleteTempTableRequest::default_instance_ = NULL;

DeleteTempTableRequest* DeleteTempTableRequest::New(::google::protobuf::Arena* arena) const {
  DeleteTempTableRequest* n = new DeleteTempTableRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteTempTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:whiteBear.DeleteTempTableRequest)
  if (has_table_name()) {
    table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DeleteTempTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whiteBear.DeleteTempTableRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "whiteBear.DeleteTempTableRequest.table_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whiteBear.DeleteTempTableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whiteBear.DeleteTempTableRequest)
  return false;
#undef DO_
}

void DeleteTempTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whiteBear.DeleteTempTableRequest)
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.DeleteTempTableRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:whiteBear.DeleteTempTableRequest)
}

::google::protobuf::uint8* DeleteTempTableRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:whiteBear.DeleteTempTableRequest)
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.DeleteTempTableRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:whiteBear.DeleteTempTableRequest)
  return target;
}

int DeleteTempTableRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whiteBear.DeleteTempTableRequest)
  int total_size = 0;

  // required string table_name = 1;
  if (has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteTempTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:whiteBear.DeleteTempTableRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeleteTempTableRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteTempTableRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:whiteBear.DeleteTempTableRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:whiteBear.DeleteTempTableRequest)
    MergeFrom(*source);
  }
}

void DeleteTempTableRequest::MergeFrom(const DeleteTempTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whiteBear.DeleteTempTableRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_has_table_name();
      table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DeleteTempTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:whiteBear.DeleteTempTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTempTableRequest::CopyFrom(const DeleteTempTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whiteBear.DeleteTempTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTempTableRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteTempTableRequest::Swap(DeleteTempTableRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteTempTableRequest::InternalSwap(DeleteTempTableRequest* other) {
  table_name_.Swap(&other->table_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteTempTableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteTempTableRequest_descriptor_;
  metadata.reflection = DeleteTempTableRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteTempTableRequest

// required string table_name = 1;
bool DeleteTempTableRequest::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeleteTempTableRequest::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
void DeleteTempTableRequest::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeleteTempTableRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_name();
}
 const ::std::string& DeleteTempTableRequest::table_name() const {
  // @@protoc_insertion_point(field_get:whiteBear.DeleteTempTableRequest.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeleteTempTableRequest::set_table_name(const ::std::string& value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.DeleteTempTableRequest.table_name)
}
 void DeleteTempTableRequest::set_table_name(const char* value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.DeleteTempTableRequest.table_name)
}
 void DeleteTempTableRequest::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.DeleteTempTableRequest.table_name)
}
 ::std::string* DeleteTempTableRequest::mutable_table_name() {
  set_has_table_name();
  // @@protoc_insertion_point(field_mutable:whiteBear.DeleteTempTableRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeleteTempTableRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:whiteBear.DeleteTempTableRequest.table_name)
  clear_has_table_name();
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeleteTempTableRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    set_has_table_name();
  } else {
    clear_has_table_name();
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.DeleteTempTableRequest.table_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* DeleteTempTableResponse::_default_errors_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteTempTableResponse::kSuccessFieldNumber;
const int DeleteTempTableResponse::kErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteTempTableResponse::DeleteTempTableResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whiteBear.DeleteTempTableResponse)
}

void DeleteTempTableResponse::InitAsDefaultInstance() {
}

DeleteTempTableResponse::DeleteTempTableResponse(const DeleteTempTableResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whiteBear.DeleteTempTableResponse)
}

void DeleteTempTableResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  success_ = false;
  errors_.UnsafeSetDefault(_default_errors_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteTempTableResponse::~DeleteTempTableResponse() {
  // @@protoc_insertion_point(destructor:whiteBear.DeleteTempTableResponse)
  SharedDtor();
}

void DeleteTempTableResponse::SharedDtor() {
  errors_.DestroyNoArena(_default_errors_);
  if (this != default_instance_) {
  }
}

void DeleteTempTableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteTempTableResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteTempTableResponse_descriptor_;
}

const DeleteTempTableResponse& DeleteTempTableResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddbms_2eproto();
  return *default_instance_;
}

DeleteTempTableResponse* DeleteTempTableResponse::default_instance_ = NULL;

DeleteTempTableResponse* DeleteTempTableResponse::New(::google::protobuf::Arena* arena) const {
  DeleteTempTableResponse* n = new DeleteTempTableResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteTempTableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:whiteBear.DeleteTempTableResponse)
  if (_has_bits_[0 / 32] & 3u) {
    success_ = false;
    if (has_errors()) {
      errors_.ClearToDefaultNoArena(_default_errors_);
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DeleteTempTableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whiteBear.DeleteTempTableResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errors;
        break;
      }

      // optional string errors = 2 [default = "NULL error message"];
      case 2: {
        if (tag == 18) {
         parse_errors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errors()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errors().data(), this->errors().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "whiteBear.DeleteTempTableResponse.errors");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whiteBear.DeleteTempTableResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whiteBear.DeleteTempTableResponse)
  return false;
#undef DO_
}

void DeleteTempTableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whiteBear.DeleteTempTableResponse)
  // required bool success = 1 [default = false];
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional string errors = 2 [default = "NULL error message"];
  if (has_errors()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errors().data(), this->errors().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.DeleteTempTableResponse.errors");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errors(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:whiteBear.DeleteTempTableResponse)
}

::google::protobuf::uint8* DeleteTempTableResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:whiteBear.DeleteTempTableResponse)
  // required bool success = 1 [default = false];
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional string errors = 2 [default = "NULL error message"];
  if (has_errors()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errors().data(), this->errors().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.DeleteTempTableResponse.errors");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errors(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:whiteBear.DeleteTempTableResponse)
  return target;
}

int DeleteTempTableResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whiteBear.DeleteTempTableResponse)
  int total_size = 0;

  // required bool success = 1 [default = false];
  if (has_success()) {
    total_size += 1 + 1;
  }
  // optional string errors = 2 [default = "NULL error message"];
  if (has_errors()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errors());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteTempTableResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:whiteBear.DeleteTempTableResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeleteTempTableResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteTempTableResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:whiteBear.DeleteTempTableResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:whiteBear.DeleteTempTableResponse)
    MergeFrom(*source);
  }
}

void DeleteTempTableResponse::MergeFrom(const DeleteTempTableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whiteBear.DeleteTempTableResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_errors()) {
      set_has_errors();
      errors_.AssignWithDefault(_default_errors_, from.errors_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DeleteTempTableResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:whiteBear.DeleteTempTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTempTableResponse::CopyFrom(const DeleteTempTableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whiteBear.DeleteTempTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTempTableResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteTempTableResponse::Swap(DeleteTempTableResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteTempTableResponse::InternalSwap(DeleteTempTableResponse* other) {
  std::swap(success_, other->success_);
  errors_.Swap(&other->errors_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteTempTableResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteTempTableResponse_descriptor_;
  metadata.reflection = DeleteTempTableResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteTempTableResponse

// required bool success = 1 [default = false];
bool DeleteTempTableResponse::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeleteTempTableResponse::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
void DeleteTempTableResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeleteTempTableResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
 bool DeleteTempTableResponse::success() const {
  // @@protoc_insertion_point(field_get:whiteBear.DeleteTempTableResponse.success)
  return success_;
}
 void DeleteTempTableResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:whiteBear.DeleteTempTableResponse.success)
}

// optional string errors = 2 [default = "NULL error message"];
bool DeleteTempTableResponse::has_errors() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeleteTempTableResponse::set_has_errors() {
  _has_bits_[0] |= 0x00000002u;
}
void DeleteTempTableResponse::clear_has_errors() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeleteTempTableResponse::clear_errors() {
  errors_.ClearToDefaultNoArena(_default_errors_);
  clear_has_errors();
}
 const ::std::string& DeleteTempTableResponse::errors() const {
  // @@protoc_insertion_point(field_get:whiteBear.DeleteTempTableResponse.errors)
  return errors_.GetNoArena(_default_errors_);
}
 void DeleteTempTableResponse::set_errors(const ::std::string& value) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_, value);
  // @@protoc_insertion_point(field_set:whiteBear.DeleteTempTableResponse.errors)
}
 void DeleteTempTableResponse::set_errors(const char* value) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.DeleteTempTableResponse.errors)
}
 void DeleteTempTableResponse::set_errors(const char* value, size_t size) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.DeleteTempTableResponse.errors)
}
 ::std::string* DeleteTempTableResponse::mutable_errors() {
  set_has_errors();
  // @@protoc_insertion_point(field_mutable:whiteBear.DeleteTempTableResponse.errors)
  return errors_.MutableNoArena(_default_errors_);
}
 ::std::string* DeleteTempTableResponse::release_errors() {
  // @@protoc_insertion_point(field_release:whiteBear.DeleteTempTableResponse.errors)
  clear_has_errors();
  return errors_.ReleaseNoArena(_default_errors_);
}
 void DeleteTempTableResponse::set_allocated_errors(::std::string* errors) {
  if (errors != NULL) {
    set_has_errors();
  } else {
    clear_has_errors();
  }
  errors_.SetAllocatedNoArena(_default_errors_, errors);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.DeleteTempTableResponse.errors)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NonResultsSQLRequest::kSqlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NonResultsSQLRequest::NonResultsSQLRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whiteBear.NonResultsSQLRequest)
}

void NonResultsSQLRequest::InitAsDefaultInstance() {
}

NonResultsSQLRequest::NonResultsSQLRequest(const NonResultsSQLRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whiteBear.NonResultsSQLRequest)
}

void NonResultsSQLRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sql_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NonResultsSQLRequest::~NonResultsSQLRequest() {
  // @@protoc_insertion_point(destructor:whiteBear.NonResultsSQLRequest)
  SharedDtor();
}

void NonResultsSQLRequest::SharedDtor() {
  sql_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NonResultsSQLRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NonResultsSQLRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NonResultsSQLRequest_descriptor_;
}

const NonResultsSQLRequest& NonResultsSQLRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddbms_2eproto();
  return *default_instance_;
}

NonResultsSQLRequest* NonResultsSQLRequest::default_instance_ = NULL;

NonResultsSQLRequest* NonResultsSQLRequest::New(::google::protobuf::Arena* arena) const {
  NonResultsSQLRequest* n = new NonResultsSQLRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NonResultsSQLRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:whiteBear.NonResultsSQLRequest)
  if (has_sql()) {
    sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NonResultsSQLRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whiteBear.NonResultsSQLRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sql = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sql().data(), this->sql().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "whiteBear.NonResultsSQLRequest.sql");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whiteBear.NonResultsSQLRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whiteBear.NonResultsSQLRequest)
  return false;
#undef DO_
}

void NonResultsSQLRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whiteBear.NonResultsSQLRequest)
  // required string sql = 1;
  if (has_sql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql().data(), this->sql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.NonResultsSQLRequest.sql");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sql(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:whiteBear.NonResultsSQLRequest)
}

::google::protobuf::uint8* NonResultsSQLRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:whiteBear.NonResultsSQLRequest)
  // required string sql = 1;
  if (has_sql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql().data(), this->sql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.NonResultsSQLRequest.sql");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sql(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:whiteBear.NonResultsSQLRequest)
  return target;
}

int NonResultsSQLRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whiteBear.NonResultsSQLRequest)
  int total_size = 0;

  // required string sql = 1;
  if (has_sql()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sql());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NonResultsSQLRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:whiteBear.NonResultsSQLRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NonResultsSQLRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NonResultsSQLRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:whiteBear.NonResultsSQLRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:whiteBear.NonResultsSQLRequest)
    MergeFrom(*source);
  }
}

void NonResultsSQLRequest::MergeFrom(const NonResultsSQLRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whiteBear.NonResultsSQLRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sql()) {
      set_has_sql();
      sql_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NonResultsSQLRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:whiteBear.NonResultsSQLRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NonResultsSQLRequest::CopyFrom(const NonResultsSQLRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whiteBear.NonResultsSQLRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NonResultsSQLRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NonResultsSQLRequest::Swap(NonResultsSQLRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NonResultsSQLRequest::InternalSwap(NonResultsSQLRequest* other) {
  sql_.Swap(&other->sql_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NonResultsSQLRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NonResultsSQLRequest_descriptor_;
  metadata.reflection = NonResultsSQLRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NonResultsSQLRequest

// required string sql = 1;
bool NonResultsSQLRequest::has_sql() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NonResultsSQLRequest::set_has_sql() {
  _has_bits_[0] |= 0x00000001u;
}
void NonResultsSQLRequest::clear_has_sql() {
  _has_bits_[0] &= ~0x00000001u;
}
void NonResultsSQLRequest::clear_sql() {
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sql();
}
 const ::std::string& NonResultsSQLRequest::sql() const {
  // @@protoc_insertion_point(field_get:whiteBear.NonResultsSQLRequest.sql)
  return sql_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NonResultsSQLRequest::set_sql(const ::std::string& value) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.NonResultsSQLRequest.sql)
}
 void NonResultsSQLRequest::set_sql(const char* value) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.NonResultsSQLRequest.sql)
}
 void NonResultsSQLRequest::set_sql(const char* value, size_t size) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.NonResultsSQLRequest.sql)
}
 ::std::string* NonResultsSQLRequest::mutable_sql() {
  set_has_sql();
  // @@protoc_insertion_point(field_mutable:whiteBear.NonResultsSQLRequest.sql)
  return sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NonResultsSQLRequest::release_sql() {
  // @@protoc_insertion_point(field_release:whiteBear.NonResultsSQLRequest.sql)
  clear_has_sql();
  return sql_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NonResultsSQLRequest::set_allocated_sql(::std::string* sql) {
  if (sql != NULL) {
    set_has_sql();
  } else {
    clear_has_sql();
  }
  sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.NonResultsSQLRequest.sql)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* NonResultsSQLResponse::_default_errors_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NonResultsSQLResponse::kSuccessFieldNumber;
const int NonResultsSQLResponse::kErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NonResultsSQLResponse::NonResultsSQLResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whiteBear.NonResultsSQLResponse)
}

void NonResultsSQLResponse::InitAsDefaultInstance() {
}

NonResultsSQLResponse::NonResultsSQLResponse(const NonResultsSQLResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whiteBear.NonResultsSQLResponse)
}

void NonResultsSQLResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  success_ = false;
  errors_.UnsafeSetDefault(_default_errors_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NonResultsSQLResponse::~NonResultsSQLResponse() {
  // @@protoc_insertion_point(destructor:whiteBear.NonResultsSQLResponse)
  SharedDtor();
}

void NonResultsSQLResponse::SharedDtor() {
  errors_.DestroyNoArena(_default_errors_);
  if (this != default_instance_) {
  }
}

void NonResultsSQLResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NonResultsSQLResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NonResultsSQLResponse_descriptor_;
}

const NonResultsSQLResponse& NonResultsSQLResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddbms_2eproto();
  return *default_instance_;
}

NonResultsSQLResponse* NonResultsSQLResponse::default_instance_ = NULL;

NonResultsSQLResponse* NonResultsSQLResponse::New(::google::protobuf::Arena* arena) const {
  NonResultsSQLResponse* n = new NonResultsSQLResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NonResultsSQLResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:whiteBear.NonResultsSQLResponse)
  if (_has_bits_[0 / 32] & 3u) {
    success_ = false;
    if (has_errors()) {
      errors_.ClearToDefaultNoArena(_default_errors_);
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NonResultsSQLResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whiteBear.NonResultsSQLResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errors;
        break;
      }

      // optional string errors = 2 [default = "NULL error message"];
      case 2: {
        if (tag == 18) {
         parse_errors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errors()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errors().data(), this->errors().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "whiteBear.NonResultsSQLResponse.errors");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whiteBear.NonResultsSQLResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whiteBear.NonResultsSQLResponse)
  return false;
#undef DO_
}

void NonResultsSQLResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whiteBear.NonResultsSQLResponse)
  // required bool success = 1 [default = false];
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional string errors = 2 [default = "NULL error message"];
  if (has_errors()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errors().data(), this->errors().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.NonResultsSQLResponse.errors");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errors(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:whiteBear.NonResultsSQLResponse)
}

::google::protobuf::uint8* NonResultsSQLResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:whiteBear.NonResultsSQLResponse)
  // required bool success = 1 [default = false];
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional string errors = 2 [default = "NULL error message"];
  if (has_errors()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errors().data(), this->errors().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.NonResultsSQLResponse.errors");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errors(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:whiteBear.NonResultsSQLResponse)
  return target;
}

int NonResultsSQLResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whiteBear.NonResultsSQLResponse)
  int total_size = 0;

  // required bool success = 1 [default = false];
  if (has_success()) {
    total_size += 1 + 1;
  }
  // optional string errors = 2 [default = "NULL error message"];
  if (has_errors()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errors());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NonResultsSQLResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:whiteBear.NonResultsSQLResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NonResultsSQLResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NonResultsSQLResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:whiteBear.NonResultsSQLResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:whiteBear.NonResultsSQLResponse)
    MergeFrom(*source);
  }
}

void NonResultsSQLResponse::MergeFrom(const NonResultsSQLResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whiteBear.NonResultsSQLResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_errors()) {
      set_has_errors();
      errors_.AssignWithDefault(_default_errors_, from.errors_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NonResultsSQLResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:whiteBear.NonResultsSQLResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NonResultsSQLResponse::CopyFrom(const NonResultsSQLResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whiteBear.NonResultsSQLResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NonResultsSQLResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NonResultsSQLResponse::Swap(NonResultsSQLResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NonResultsSQLResponse::InternalSwap(NonResultsSQLResponse* other) {
  std::swap(success_, other->success_);
  errors_.Swap(&other->errors_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NonResultsSQLResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NonResultsSQLResponse_descriptor_;
  metadata.reflection = NonResultsSQLResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NonResultsSQLResponse

// required bool success = 1 [default = false];
bool NonResultsSQLResponse::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NonResultsSQLResponse::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
void NonResultsSQLResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
void NonResultsSQLResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
 bool NonResultsSQLResponse::success() const {
  // @@protoc_insertion_point(field_get:whiteBear.NonResultsSQLResponse.success)
  return success_;
}
 void NonResultsSQLResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:whiteBear.NonResultsSQLResponse.success)
}

// optional string errors = 2 [default = "NULL error message"];
bool NonResultsSQLResponse::has_errors() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NonResultsSQLResponse::set_has_errors() {
  _has_bits_[0] |= 0x00000002u;
}
void NonResultsSQLResponse::clear_has_errors() {
  _has_bits_[0] &= ~0x00000002u;
}
void NonResultsSQLResponse::clear_errors() {
  errors_.ClearToDefaultNoArena(_default_errors_);
  clear_has_errors();
}
 const ::std::string& NonResultsSQLResponse::errors() const {
  // @@protoc_insertion_point(field_get:whiteBear.NonResultsSQLResponse.errors)
  return errors_.GetNoArena(_default_errors_);
}
 void NonResultsSQLResponse::set_errors(const ::std::string& value) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_, value);
  // @@protoc_insertion_point(field_set:whiteBear.NonResultsSQLResponse.errors)
}
 void NonResultsSQLResponse::set_errors(const char* value) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.NonResultsSQLResponse.errors)
}
 void NonResultsSQLResponse::set_errors(const char* value, size_t size) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.NonResultsSQLResponse.errors)
}
 ::std::string* NonResultsSQLResponse::mutable_errors() {
  set_has_errors();
  // @@protoc_insertion_point(field_mutable:whiteBear.NonResultsSQLResponse.errors)
  return errors_.MutableNoArena(_default_errors_);
}
 ::std::string* NonResultsSQLResponse::release_errors() {
  // @@protoc_insertion_point(field_release:whiteBear.NonResultsSQLResponse.errors)
  clear_has_errors();
  return errors_.ReleaseNoArena(_default_errors_);
}
 void NonResultsSQLResponse::set_allocated_errors(::std::string* errors) {
  if (errors != NULL) {
    set_has_errors();
  } else {
    clear_has_errors();
  }
  errors_.SetAllocatedNoArena(_default_errors_, errors);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.NonResultsSQLResponse.errors)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResultsSQLRequest::kSqlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResultsSQLRequest::ResultsSQLRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whiteBear.ResultsSQLRequest)
}

void ResultsSQLRequest::InitAsDefaultInstance() {
}

ResultsSQLRequest::ResultsSQLRequest(const ResultsSQLRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whiteBear.ResultsSQLRequest)
}

void ResultsSQLRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sql_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultsSQLRequest::~ResultsSQLRequest() {
  // @@protoc_insertion_point(destructor:whiteBear.ResultsSQLRequest)
  SharedDtor();
}

void ResultsSQLRequest::SharedDtor() {
  sql_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResultsSQLRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultsSQLRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultsSQLRequest_descriptor_;
}

const ResultsSQLRequest& ResultsSQLRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddbms_2eproto();
  return *default_instance_;
}

ResultsSQLRequest* ResultsSQLRequest::default_instance_ = NULL;

ResultsSQLRequest* ResultsSQLRequest::New(::google::protobuf::Arena* arena) const {
  ResultsSQLRequest* n = new ResultsSQLRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResultsSQLRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:whiteBear.ResultsSQLRequest)
  if (has_sql()) {
    sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResultsSQLRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whiteBear.ResultsSQLRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sql = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sql().data(), this->sql().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "whiteBear.ResultsSQLRequest.sql");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whiteBear.ResultsSQLRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whiteBear.ResultsSQLRequest)
  return false;
#undef DO_
}

void ResultsSQLRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whiteBear.ResultsSQLRequest)
  // required string sql = 1;
  if (has_sql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql().data(), this->sql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.ResultsSQLRequest.sql");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sql(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:whiteBear.ResultsSQLRequest)
}

::google::protobuf::uint8* ResultsSQLRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:whiteBear.ResultsSQLRequest)
  // required string sql = 1;
  if (has_sql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql().data(), this->sql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.ResultsSQLRequest.sql");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sql(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:whiteBear.ResultsSQLRequest)
  return target;
}

int ResultsSQLRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whiteBear.ResultsSQLRequest)
  int total_size = 0;

  // required string sql = 1;
  if (has_sql()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sql());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultsSQLRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:whiteBear.ResultsSQLRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResultsSQLRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResultsSQLRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:whiteBear.ResultsSQLRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:whiteBear.ResultsSQLRequest)
    MergeFrom(*source);
  }
}

void ResultsSQLRequest::MergeFrom(const ResultsSQLRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whiteBear.ResultsSQLRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sql()) {
      set_has_sql();
      sql_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResultsSQLRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:whiteBear.ResultsSQLRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultsSQLRequest::CopyFrom(const ResultsSQLRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whiteBear.ResultsSQLRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultsSQLRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ResultsSQLRequest::Swap(ResultsSQLRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResultsSQLRequest::InternalSwap(ResultsSQLRequest* other) {
  sql_.Swap(&other->sql_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResultsSQLRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultsSQLRequest_descriptor_;
  metadata.reflection = ResultsSQLRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResultsSQLRequest

// required string sql = 1;
bool ResultsSQLRequest::has_sql() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResultsSQLRequest::set_has_sql() {
  _has_bits_[0] |= 0x00000001u;
}
void ResultsSQLRequest::clear_has_sql() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResultsSQLRequest::clear_sql() {
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sql();
}
 const ::std::string& ResultsSQLRequest::sql() const {
  // @@protoc_insertion_point(field_get:whiteBear.ResultsSQLRequest.sql)
  return sql_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResultsSQLRequest::set_sql(const ::std::string& value) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.ResultsSQLRequest.sql)
}
 void ResultsSQLRequest::set_sql(const char* value) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.ResultsSQLRequest.sql)
}
 void ResultsSQLRequest::set_sql(const char* value, size_t size) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.ResultsSQLRequest.sql)
}
 ::std::string* ResultsSQLRequest::mutable_sql() {
  set_has_sql();
  // @@protoc_insertion_point(field_mutable:whiteBear.ResultsSQLRequest.sql)
  return sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResultsSQLRequest::release_sql() {
  // @@protoc_insertion_point(field_release:whiteBear.ResultsSQLRequest.sql)
  clear_has_sql();
  return sql_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResultsSQLRequest::set_allocated_sql(::std::string* sql) {
  if (sql != NULL) {
    set_has_sql();
  } else {
    clear_has_sql();
  }
  sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.ResultsSQLRequest.sql)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* ResultsSQLResponse::_default_errors_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResultsSQLResponse::kTableNameFieldNumber;
const int ResultsSQLResponse::kMetaNumsFieldNumber;
const int ResultsSQLResponse::kColumnsFieldNumber;
const int ResultsSQLResponse::kSuccessFieldNumber;
const int ResultsSQLResponse::kErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResultsSQLResponse::ResultsSQLResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whiteBear.ResultsSQLResponse)
}

void ResultsSQLResponse::InitAsDefaultInstance() {
}

ResultsSQLResponse::ResultsSQLResponse(const ResultsSQLResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whiteBear.ResultsSQLResponse)
}

void ResultsSQLResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meta_nums_ = 0;
  success_ = false;
  errors_.UnsafeSetDefault(_default_errors_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultsSQLResponse::~ResultsSQLResponse() {
  // @@protoc_insertion_point(destructor:whiteBear.ResultsSQLResponse)
  SharedDtor();
}

void ResultsSQLResponse::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errors_.DestroyNoArena(_default_errors_);
  if (this != default_instance_) {
  }
}

void ResultsSQLResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultsSQLResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultsSQLResponse_descriptor_;
}

const ResultsSQLResponse& ResultsSQLResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddbms_2eproto();
  return *default_instance_;
}

ResultsSQLResponse* ResultsSQLResponse::default_instance_ = NULL;

ResultsSQLResponse* ResultsSQLResponse::New(::google::protobuf::Arena* arena) const {
  ResultsSQLResponse* n = new ResultsSQLResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResultsSQLResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:whiteBear.ResultsSQLResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ResultsSQLResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ResultsSQLResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 27u) {
    ZR_(meta_nums_, success_);
    if (has_table_name()) {
      table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_errors()) {
      errors_.ClearToDefaultNoArena(_default_errors_);
    }
  }

#undef ZR_HELPER_
#undef ZR_

  columns_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResultsSQLResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whiteBear.ResultsSQLResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "whiteBear.ResultsSQLResponse.table_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_meta_nums;
        break;
      }

      // required int32 meta_nums = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_meta_nums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &meta_nums_)));
          set_has_meta_nums();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_columns;
        break;
      }

      // repeated .whiteBear.Column columns = 3;
      case 3: {
        if (tag == 26) {
         parse_columns:
          DO_(input->IncrementRecursionDepth());
         parse_loop_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_columns;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_success;
        break;
      }

      // required bool success = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_errors;
        break;
      }

      // optional string errors = 5 [default = "NULL error message"];
      case 5: {
        if (tag == 42) {
         parse_errors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errors()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errors().data(), this->errors().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "whiteBear.ResultsSQLResponse.errors");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whiteBear.ResultsSQLResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whiteBear.ResultsSQLResponse)
  return false;
#undef DO_
}

void ResultsSQLResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whiteBear.ResultsSQLResponse)
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.ResultsSQLResponse.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // required int32 meta_nums = 2 [default = 0];
  if (has_meta_nums()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->meta_nums(), output);
  }

  // repeated .whiteBear.Column columns = 3;
  for (unsigned int i = 0, n = this->columns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->columns(i), output);
  }

  // required bool success = 4 [default = false];
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  // optional string errors = 5 [default = "NULL error message"];
  if (has_errors()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errors().data(), this->errors().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.ResultsSQLResponse.errors");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->errors(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:whiteBear.ResultsSQLResponse)
}

::google::protobuf::uint8* ResultsSQLResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:whiteBear.ResultsSQLResponse)
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.ResultsSQLResponse.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // required int32 meta_nums = 2 [default = 0];
  if (has_meta_nums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->meta_nums(), target);
  }

  // repeated .whiteBear.Column columns = 3;
  for (unsigned int i = 0, n = this->columns_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->columns(i), false, target);
  }

  // required bool success = 4 [default = false];
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->success(), target);
  }

  // optional string errors = 5 [default = "NULL error message"];
  if (has_errors()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errors().data(), this->errors().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "whiteBear.ResultsSQLResponse.errors");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->errors(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:whiteBear.ResultsSQLResponse)
  return target;
}

int ResultsSQLResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:whiteBear.ResultsSQLResponse)
  int total_size = 0;

  if (has_table_name()) {
    // required string table_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  if (has_meta_nums()) {
    // required int32 meta_nums = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->meta_nums());
  }

  if (has_success()) {
    // required bool success = 4 [default = false];
    total_size += 1 + 1;
  }

  return total_size;
}
int ResultsSQLResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whiteBear.ResultsSQLResponse)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string table_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());

    // required int32 meta_nums = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->meta_nums());

    // required bool success = 4 [default = false];
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string errors = 5 [default = "NULL error message"];
  if (has_errors()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errors());
  }

  // repeated .whiteBear.Column columns = 3;
  total_size += 1 * this->columns_size();
  for (int i = 0; i < this->columns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columns(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultsSQLResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:whiteBear.ResultsSQLResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResultsSQLResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResultsSQLResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:whiteBear.ResultsSQLResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:whiteBear.ResultsSQLResponse)
    MergeFrom(*source);
  }
}

void ResultsSQLResponse::MergeFrom(const ResultsSQLResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whiteBear.ResultsSQLResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  columns_.MergeFrom(from.columns_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_has_table_name();
      table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
    }
    if (from.has_meta_nums()) {
      set_meta_nums(from.meta_nums());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_errors()) {
      set_has_errors();
      errors_.AssignWithDefault(_default_errors_, from.errors_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResultsSQLResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:whiteBear.ResultsSQLResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultsSQLResponse::CopyFrom(const ResultsSQLResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whiteBear.ResultsSQLResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultsSQLResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->columns())) return false;
  return true;
}

void ResultsSQLResponse::Swap(ResultsSQLResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResultsSQLResponse::InternalSwap(ResultsSQLResponse* other) {
  table_name_.Swap(&other->table_name_);
  std::swap(meta_nums_, other->meta_nums_);
  columns_.UnsafeArenaSwap(&other->columns_);
  std::swap(success_, other->success_);
  errors_.Swap(&other->errors_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResultsSQLResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultsSQLResponse_descriptor_;
  metadata.reflection = ResultsSQLResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResultsSQLResponse

// required string table_name = 1;
bool ResultsSQLResponse::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResultsSQLResponse::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ResultsSQLResponse::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResultsSQLResponse::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_name();
}
 const ::std::string& ResultsSQLResponse::table_name() const {
  // @@protoc_insertion_point(field_get:whiteBear.ResultsSQLResponse.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResultsSQLResponse::set_table_name(const ::std::string& value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whiteBear.ResultsSQLResponse.table_name)
}
 void ResultsSQLResponse::set_table_name(const char* value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.ResultsSQLResponse.table_name)
}
 void ResultsSQLResponse::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.ResultsSQLResponse.table_name)
}
 ::std::string* ResultsSQLResponse::mutable_table_name() {
  set_has_table_name();
  // @@protoc_insertion_point(field_mutable:whiteBear.ResultsSQLResponse.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResultsSQLResponse::release_table_name() {
  // @@protoc_insertion_point(field_release:whiteBear.ResultsSQLResponse.table_name)
  clear_has_table_name();
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResultsSQLResponse::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    set_has_table_name();
  } else {
    clear_has_table_name();
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.ResultsSQLResponse.table_name)
}

// required int32 meta_nums = 2 [default = 0];
bool ResultsSQLResponse::has_meta_nums() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResultsSQLResponse::set_has_meta_nums() {
  _has_bits_[0] |= 0x00000002u;
}
void ResultsSQLResponse::clear_has_meta_nums() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResultsSQLResponse::clear_meta_nums() {
  meta_nums_ = 0;
  clear_has_meta_nums();
}
 ::google::protobuf::int32 ResultsSQLResponse::meta_nums() const {
  // @@protoc_insertion_point(field_get:whiteBear.ResultsSQLResponse.meta_nums)
  return meta_nums_;
}
 void ResultsSQLResponse::set_meta_nums(::google::protobuf::int32 value) {
  set_has_meta_nums();
  meta_nums_ = value;
  // @@protoc_insertion_point(field_set:whiteBear.ResultsSQLResponse.meta_nums)
}

// repeated .whiteBear.Column columns = 3;
int ResultsSQLResponse::columns_size() const {
  return columns_.size();
}
void ResultsSQLResponse::clear_columns() {
  columns_.Clear();
}
const ::whiteBear::Column& ResultsSQLResponse::columns(int index) const {
  // @@protoc_insertion_point(field_get:whiteBear.ResultsSQLResponse.columns)
  return columns_.Get(index);
}
::whiteBear::Column* ResultsSQLResponse::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:whiteBear.ResultsSQLResponse.columns)
  return columns_.Mutable(index);
}
::whiteBear::Column* ResultsSQLResponse::add_columns() {
  // @@protoc_insertion_point(field_add:whiteBear.ResultsSQLResponse.columns)
  return columns_.Add();
}
::google::protobuf::RepeatedPtrField< ::whiteBear::Column >*
ResultsSQLResponse::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:whiteBear.ResultsSQLResponse.columns)
  return &columns_;
}
const ::google::protobuf::RepeatedPtrField< ::whiteBear::Column >&
ResultsSQLResponse::columns() const {
  // @@protoc_insertion_point(field_list:whiteBear.ResultsSQLResponse.columns)
  return columns_;
}

// required bool success = 4 [default = false];
bool ResultsSQLResponse::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ResultsSQLResponse::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
void ResultsSQLResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
void ResultsSQLResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
 bool ResultsSQLResponse::success() const {
  // @@protoc_insertion_point(field_get:whiteBear.ResultsSQLResponse.success)
  return success_;
}
 void ResultsSQLResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:whiteBear.ResultsSQLResponse.success)
}

// optional string errors = 5 [default = "NULL error message"];
bool ResultsSQLResponse::has_errors() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ResultsSQLResponse::set_has_errors() {
  _has_bits_[0] |= 0x00000010u;
}
void ResultsSQLResponse::clear_has_errors() {
  _has_bits_[0] &= ~0x00000010u;
}
void ResultsSQLResponse::clear_errors() {
  errors_.ClearToDefaultNoArena(_default_errors_);
  clear_has_errors();
}
 const ::std::string& ResultsSQLResponse::errors() const {
  // @@protoc_insertion_point(field_get:whiteBear.ResultsSQLResponse.errors)
  return errors_.GetNoArena(_default_errors_);
}
 void ResultsSQLResponse::set_errors(const ::std::string& value) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_, value);
  // @@protoc_insertion_point(field_set:whiteBear.ResultsSQLResponse.errors)
}
 void ResultsSQLResponse::set_errors(const char* value) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whiteBear.ResultsSQLResponse.errors)
}
 void ResultsSQLResponse::set_errors(const char* value, size_t size) {
  set_has_errors();
  errors_.SetNoArena(_default_errors_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whiteBear.ResultsSQLResponse.errors)
}
 ::std::string* ResultsSQLResponse::mutable_errors() {
  set_has_errors();
  // @@protoc_insertion_point(field_mutable:whiteBear.ResultsSQLResponse.errors)
  return errors_.MutableNoArena(_default_errors_);
}
 ::std::string* ResultsSQLResponse::release_errors() {
  // @@protoc_insertion_point(field_release:whiteBear.ResultsSQLResponse.errors)
  clear_has_errors();
  return errors_.ReleaseNoArena(_default_errors_);
}
 void ResultsSQLResponse::set_allocated_errors(::std::string* errors) {
  if (errors != NULL) {
    set_has_errors();
  } else {
    clear_has_errors();
  }
  errors_.SetAllocatedNoArena(_default_errors_, errors);
  // @@protoc_insertion_point(field_set_allocated:whiteBear.ResultsSQLResponse.errors)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

DDBService::~DDBService() {}

const ::google::protobuf::ServiceDescriptor* DDBService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DDBService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* DDBService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return DDBService_descriptor_;
}

void DDBService::QueryTree(::google::protobuf::RpcController* controller,
                         const ::whiteBear::QueryTreeRequest*,
                         ::whiteBear::QueryTreeResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryTree() not implemented.");
  done->Run();
}

void DDBService::LoadTable(::google::protobuf::RpcController* controller,
                         const ::whiteBear::LoadTableRequest*,
                         ::whiteBear::LoadTableResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method LoadTable() not implemented.");
  done->Run();
}

void DDBService::QueryTempTable(::google::protobuf::RpcController* controller,
                         const ::whiteBear::QueryTempTableRequest*,
                         ::whiteBear::QueryTempTableResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryTempTable() not implemented.");
  done->Run();
}

void DDBService::DeleteTempTable(::google::protobuf::RpcController* controller,
                         const ::whiteBear::DeleteTempTableRequest*,
                         ::whiteBear::DeleteTempTableResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteTempTable() not implemented.");
  done->Run();
}

void DDBService::NonResultsSQL(::google::protobuf::RpcController* controller,
                         const ::whiteBear::NonResultsSQLRequest*,
                         ::whiteBear::NonResultsSQLResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NonResultsSQL() not implemented.");
  done->Run();
}

void DDBService::ResultsSQL(::google::protobuf::RpcController* controller,
                         const ::whiteBear::ResultsSQLRequest*,
                         ::whiteBear::ResultsSQLResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ResultsSQL() not implemented.");
  done->Run();
}

void DDBService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), DDBService_descriptor_);
  switch(method->index()) {
    case 0:
      QueryTree(controller,
             ::google::protobuf::down_cast<const ::whiteBear::QueryTreeRequest*>(request),
             ::google::protobuf::down_cast< ::whiteBear::QueryTreeResponse*>(response),
             done);
      break;
    case 1:
      LoadTable(controller,
             ::google::protobuf::down_cast<const ::whiteBear::LoadTableRequest*>(request),
             ::google::protobuf::down_cast< ::whiteBear::LoadTableResponse*>(response),
             done);
      break;
    case 2:
      QueryTempTable(controller,
             ::google::protobuf::down_cast<const ::whiteBear::QueryTempTableRequest*>(request),
             ::google::protobuf::down_cast< ::whiteBear::QueryTempTableResponse*>(response),
             done);
      break;
    case 3:
      DeleteTempTable(controller,
             ::google::protobuf::down_cast<const ::whiteBear::DeleteTempTableRequest*>(request),
             ::google::protobuf::down_cast< ::whiteBear::DeleteTempTableResponse*>(response),
             done);
      break;
    case 4:
      NonResultsSQL(controller,
             ::google::protobuf::down_cast<const ::whiteBear::NonResultsSQLRequest*>(request),
             ::google::protobuf::down_cast< ::whiteBear::NonResultsSQLResponse*>(response),
             done);
      break;
    case 5:
      ResultsSQL(controller,
             ::google::protobuf::down_cast<const ::whiteBear::ResultsSQLRequest*>(request),
             ::google::protobuf::down_cast< ::whiteBear::ResultsSQLResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& DDBService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::whiteBear::QueryTreeRequest::default_instance();
    case 1:
      return ::whiteBear::LoadTableRequest::default_instance();
    case 2:
      return ::whiteBear::QueryTempTableRequest::default_instance();
    case 3:
      return ::whiteBear::DeleteTempTableRequest::default_instance();
    case 4:
      return ::whiteBear::NonResultsSQLRequest::default_instance();
    case 5:
      return ::whiteBear::ResultsSQLRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& DDBService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::whiteBear::QueryTreeResponse::default_instance();
    case 1:
      return ::whiteBear::LoadTableResponse::default_instance();
    case 2:
      return ::whiteBear::QueryTempTableResponse::default_instance();
    case 3:
      return ::whiteBear::DeleteTempTableResponse::default_instance();
    case 4:
      return ::whiteBear::NonResultsSQLResponse::default_instance();
    case 5:
      return ::whiteBear::ResultsSQLResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

DDBService_Stub::DDBService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
DDBService_Stub::DDBService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
DDBService_Stub::~DDBService_Stub() {
  if (owns_channel_) delete channel_;
}

void DDBService_Stub::QueryTree(::google::protobuf::RpcController* controller,
                              const ::whiteBear::QueryTreeRequest* request,
                              ::whiteBear::QueryTreeResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void DDBService_Stub::LoadTable(::google::protobuf::RpcController* controller,
                              const ::whiteBear::LoadTableRequest* request,
                              ::whiteBear::LoadTableResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void DDBService_Stub::QueryTempTable(::google::protobuf::RpcController* controller,
                              const ::whiteBear::QueryTempTableRequest* request,
                              ::whiteBear::QueryTempTableResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void DDBService_Stub::DeleteTempTable(::google::protobuf::RpcController* controller,
                              const ::whiteBear::DeleteTempTableRequest* request,
                              ::whiteBear::DeleteTempTableResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void DDBService_Stub::NonResultsSQL(::google::protobuf::RpcController* controller,
                              const ::whiteBear::NonResultsSQLRequest* request,
                              ::whiteBear::NonResultsSQLResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void DDBService_Stub::ResultsSQL(::google::protobuf::RpcController* controller,
                              const ::whiteBear::ResultsSQLRequest* request,
                              ::whiteBear::ResultsSQLResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace whiteBear

// @@protoc_insertion_point(global_scope)
